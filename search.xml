<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ruby on Rails 설치</title>
    <url>/2016/08/25/RoR-Setup/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get update -y<br>apt-get upgrade -y<br>apt-get dist-upgrade -y<br>apt-get autoremove<br><br>apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev <span class="hljs-comment"># 기본적인 패키지 업데이트</span><br><br>apt-get install git<br> <span class="hljs-comment"># git 설치</span><br>apt-get install gcc<br><span class="hljs-comment"># gcc 설치</span><br>add-apt-repository ppa:chris-lea/node.js<br>apt-get update<br>apt-get install nodejs<br><span class="hljs-comment"># nodejs 설치</span><br>apt-get install python<br><span class="hljs-comment"># python 설치</span><br><br>git <span class="hljs-built_in">clone</span> https://github.com/rbenv/rbenv.git ~/.rbenv<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(rbenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span><br><br>git <span class="hljs-built_in">clone</span> https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span><br><span class="hljs-comment"># rbenv &amp; ruby-build 설치</span><br><span class="hljs-comment"># 환경변수 설정</span><br><br>git <span class="hljs-built_in">clone</span> https://github.com/rbenv/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash rbenv install 2.3.0 rbenv global 2.3.0 ruby -v<br>gem install bundler<br>gem install rails -v 4.2.6<br>rbenv <span class="hljs-built_in">rehash</span><br>rails -v <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;gem: --no-ri --no-rdoc&quot;</span> &gt; ~/.gemrc<br><span class="hljs-comment"># gem 도큐먼트 제외</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails 외부 접속이 안될 때</title>
    <url>/2016/08/25/RoR/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">bin/rails s -b 0.0.0.0 -p 3000<br></code></pre></td></tr></table></figure>

<p>실행하면 가능 하다</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>The Zen of Python</title>
    <url>/2017/03/20/zen_of_python/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> this<br></code></pre></td></tr></table></figure>

<p>The Zen of Python, by Tim Peters</p>
<blockquote>
<p>파이썬 철학, 팀 피터스</p>
</blockquote>
<hr>
<p>Beautiful is better than ugly.</p>
<blockquote>
<p>아름다움이 추함보다 좋다.</p>
</blockquote>
<p>Explicit is better than implicit.</p>
<blockquote>
<p>명확한 것이 함축적인 것보다 낫다.</p>
</blockquote>
<p>Simple is better than complex.</p>
<blockquote>
<p>단순한 것이 복잡한 것보다 낫다.</p>
</blockquote>
<p>Complex is better than complicated.</p>
<blockquote>
<p>복잡한 것이 난해한 것보다 낫다.</p>
</blockquote>
<p>Flat is better than nested.</p>
<blockquote>
<p>단조로운 것이 뒤엉킨 것보다 낫다.</p>
</blockquote>
<p>Sparse is better than dense.</p>
<blockquote>
<p>분포되어 있는 것이 빽빽한 것보다 낫다.</p>
</blockquote>
<p>Readability counts.</p>
<blockquote>
<p>가독성이 중요하다.</p>
</blockquote>
<p>Special cases aren’t special enough to break the rules.</p>
<blockquote>
<p>특별한 경우라 하더라도 규칙을 어길 수 있을 만큼 특별하지 않다.</p>
</blockquote>
<p>Although practicality beats purity.</p>
<blockquote>
<p>비록 실용성이 순수함을 앞선다 할지라도.</p>
</blockquote>
<p>Errors should never pass silently.</p>
<blockquote>
<p>오류를 절대로 조용히 넘기면 안 된다.</p>
</blockquote>
<p>Unless explicitly silenced.</p>
<blockquote>
<p>분명하게 조용하지 않는 한</p>
</blockquote>
<p>In the face of ambiguity, refuse the temptation to guess.</p>
<blockquote>
<p>모호한 상황에서도 추측하려는 유혹을 떨쳐내야 한다.</p>
</blockquote>
<p>There should be one– and preferably only one –obvious way to do it.</p>
<blockquote>
<p>그것을 할 수 잇는 분명한 한 가지 방법이 있어야 한다. 그 방법이 유일하다면 더 좋다.</p>
</blockquote>
<p>Although that way may not be obvious at first unless you’re Dutch.</p>
<blockquote>
<p>네덜란드 사람(파이썬 창시자를 가리킴)이 아니라면, 처음에는 그 방법이 분명하지 않을 수도 있다.</p>
</blockquote>
<p>Now is better than never.</p>
<blockquote>
<p>지금 하는 것이 하지 않는 것보다 낫다.</p>
</blockquote>
<p>Although never is often better than <em>right</em> now.</p>
<blockquote>
<p>비록 하지 않는 것이 종종 지금 <em>당장</em>하는 것보다 나을지라도</p>
</blockquote>
<p>If the implementation is hard to explain, it’s a bad idea.</p>
<blockquote>
<p>구현한 것이 설명하기 어렵다면, 그것은 나쁜 아이디어이다.</p>
</blockquote>
<p>If the implementation is easy to explain, it may be a good idea.</p>
<blockquote>
<p>구현한 것이 설명하기 쉽다면, 그것은 좋은 아이디어일 것이다.</p>
</blockquote>
<p>Namespaces are one honking great idea – let’s do more of those!</p>
<blockquote>
<p>네임스페이스는 정말 좋은 아이디어다. 더 많이 사용하자!</p>
</blockquote>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Gist 공유</title>
    <url>/2016/11/24/hexo-gist/</url>
    <content><![CDATA[<p>gist를 이용해서 간단하게 파일을 공유하고 싶을때는</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;% gist gist_id %&#125;<br></code></pre></td></tr></table></figure>

<p>다음과 같이 작성한다.</p>
<script src="//gist.github.com/bfc42966ff91c8b04941cbc4ccec53e1.js"></script>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Introducing Python</title>
    <url>/2017/10/06/Introducing-Python/Introducing-Python-00/</url>
    <content><![CDATA[<p><img src="http://www.hanbit.co.kr/data/books/B2827459900_l.jpg"></p>
<h2 id="처음-시작하는-파이썬-파이썬-패키지를-활용한-모던-컴퓨팅-입문"><a href="#처음-시작하는-파이썬-파이썬-패키지를-활용한-모던-컴퓨팅-입문" class="headerlink" title="처음 시작하는 파이썬: 파이썬 패키지를 활용한 모던 컴퓨팅 입문"></a>처음 시작하는 파이썬: 파이썬 패키지를 활용한 모던 컴퓨팅 입문</h2><ul>
<li>저자 : 빌 루바노빅</li>
<li>번역 : 최길우</li>
<li>출간 : 2015-12-04</li>
<li>페이지 : 568 쪽</li>
<li>ISBN : 9788968482397</li>
</ul>
<h3 id="CHAPTER-1-파이-Py-맛보기"><a href="#CHAPTER-1-파이-Py-맛보기" class="headerlink" title="CHAPTER 1 파이(Py) 맛보기"></a>CHAPTER 1 파이(Py) 맛보기</h3><h3 id="CHAPTER-2-파이-재료-숫자-문자열-변수"><a href="#CHAPTER-2-파이-재료-숫자-문자열-변수" class="headerlink" title="CHAPTER 2 파이 재료: 숫자, 문자열, 변수"></a>CHAPTER 2 파이 재료: 숫자, 문자열, 변수</h3><h3 id="CHAPTER-3-파이-채우기-리스트-튜플-딕셔너리-셋"><a href="#CHAPTER-3-파이-채우기-리스트-튜플-딕셔너리-셋" class="headerlink" title="CHAPTER 3 파이 채우기: 리스트, 튜플, 딕셔너리, 셋"></a>CHAPTER 3 파이 채우기: 리스트, 튜플, 딕셔너리, 셋</h3><h3 id="CHAPTER-4-파이-크러스트-코드-구조"><a href="#CHAPTER-4-파이-크러스트-코드-구조" class="headerlink" title="CHAPTER 4 파이 크러스트: 코드 구조"></a>CHAPTER 4 파이 크러스트: 코드 구조</h3><h3 id="CHAPTER-5-파이-포장하기-모듈-패키지-프로그램"><a href="#CHAPTER-5-파이-포장하기-모듈-패키지-프로그램" class="headerlink" title="CHAPTER 5 파이 포장하기: 모듈, 패키지, 프로그램"></a>CHAPTER 5 파이 포장하기: 모듈, 패키지, 프로그램</h3><h3 id="CHAPTER-6-객체와-클래스"><a href="#CHAPTER-6-객체와-클래스" class="headerlink" title="CHAPTER 6 객체와 클래스"></a>CHAPTER 6 객체와 클래스</h3><h3 id="CHAPTER-7-데이터-주무르기"><a href="#CHAPTER-7-데이터-주무르기" class="headerlink" title="CHAPTER 7 데이터 주무르기"></a>CHAPTER 7 데이터 주무르기</h3><h3 id="CHAPTER-8-흘러가는-데이터"><a href="#CHAPTER-8-흘러가는-데이터" class="headerlink" title="CHAPTER 8 흘러가는 데이터"></a>CHAPTER 8 흘러가는 데이터</h3><h3 id="CHAPTER-9-웹"><a href="#CHAPTER-9-웹" class="headerlink" title="CHAPTER 9 웹"></a>CHAPTER 9 웹</h3><h3 id="CHAPTER-10-시스템"><a href="#CHAPTER-10-시스템" class="headerlink" title="CHAPTER 10 시스템"></a>CHAPTER 10 시스템</h3><h3 id="CHAPTER-11-병행성과-네트워크"><a href="#CHAPTER-11-병행성과-네트워크" class="headerlink" title="CHAPTER 11 병행성과 네트워크"></a>CHAPTER 11 병행성과 네트워크</h3><h3 id="CHAPTER-12-파이-환경-설정-및-도구-파이써니스타-되기"><a href="#CHAPTER-12-파이-환경-설정-및-도구-파이써니스타-되기" class="headerlink" title="CHAPTER 12 파이 환경 설정 및 도구: 파이써니스타 되기"></a>CHAPTER 12 파이 환경 설정 및 도구: 파이써니스타 되기</h3>]]></content>
      <categories>
        <category>book</category>
        <category>Introducing-Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CHAPTER 1 파이(Py) 맛보기</title>
    <url>/2017/10/06/Introducing-Python/Introducing-Python-01/</url>
    <content><![CDATA[<ol>
<li>파이썬 활용</li>
<li>파이썬과 다른 언어</li>
<li>왜 파이썬인가?</li>
<li>파이썬을 쓰면 안 될 때</li>
<li>파이썬 2와 파이썬 3</li>
<li>파이썬 설치하기</li>
<li>파이썬 실행하기</li>
<li>파이썬 철학</li>
</ol>
<hr>
<h2 id="1-파이썬-활용"><a href="#1-파이썬-활용" class="headerlink" title="1. 파이썬 활용"></a>1. 파이썬 활용</h2><p>파이썬은 1991년 부터 가장 인기 있는 언어 10대 언어이다<br>많은 IT 회사에서 파이썬을 사용하고 있다</p>
<ul>
<li>CLI</li>
<li>GUI</li>
<li>Server / Client</li>
<li>Backend</li>
<li>Cloud</li>
<li>Moblie</li>
<li>Embedded </li>
</ul>
<hr>
<h2 id="2-파이썬과-다른-언어"><a href="#2-파이썬과-다른-언어" class="headerlink" title="2. 파이썬과 다른 언어"></a>2. 파이썬과 다른 언어</h2><p>bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>word=<span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$word</span> Bash&quot;</span><br></code></pre></td></tr></table></figure>

<p>C++</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> word[] = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; word &lt;&lt; <span class="hljs-string">&quot; C++&quot;</span> &lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String word = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>        System.out.format(<span class="hljs-string">&quot;%s Java\n&quot;</span>, word);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>정적 언어</p>
<p>Perl</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">my</span> $word = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;$word Perl\n&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>Ruby</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">word = <span class="hljs-string">&quot;Hello World&quot;</span><br>puts <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;word&#125;</span> Ruby&quot;</span><br></code></pre></td></tr></table></figure>

<p>PHP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$word</span> = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$word</span> PHP&quot;</span>;<br>&gt;<br></code></pre></td></tr></table></figure>

<p>Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">word = <span class="hljs-string">&quot;Hello world&quot;</span><br>print(<span class="hljs-string">&quot;%s Python&quot;</span> % word)<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="3-왜-파이썬인가"><a href="#3-왜-파이썬인가" class="headerlink" title="3. 왜 파이썬인가?"></a>3. 왜 파이썬인가?</h2><p>파이썬은 <strong>작성하기 쉽다</strong></p>
<hr>
<h2 id="4-파이썬을-쓰면-안-될-때"><a href="#4-파이썬을-쓰면-안-될-때" class="headerlink" title="4. 파이썬을 쓰면 안 될 때"></a>4. 파이썬을 쓰면 안 될 때</h2><p>파이썬은 모든 상황에서 좋지만 프로그램이 계산 작업을 많이 하는 경우에는 부적합하다<br>일반적인 경우에는 C, C++, JAVA로 작성한 경우가 빠르다</p>
<hr>
<h2 id="5-파이썬-2와-파이썬-3"><a href="#5-파이썬-2와-파이썬-3" class="headerlink" title="5. 파이썬 2와 파이썬 3"></a>5. 파이썬 2와 파이썬 3</h2><p>파이썬2는 예전, 파이썬3는 현재<br><strong>앞으로 파이썬3를 쓰도록 하자!!</strong></p>
<hr>
<h2 id="6-파이썬-설치하기"><a href="#6-파이썬-설치하기" class="headerlink" title="6. 파이썬 설치하기"></a>6. 파이썬 설치하기</h2><p>컴퓨터에 Python이 설치가 안되어있다는 가정하에 python을 설치 한다.<br><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>에서 3.5.x 버전을 다운받아서 설치한다.<br>많은 버전이 있지만 나는 3.5.x버전이 제일 편하더라</p>
<hr>
<h2 id="7-파이썬-실행하기"><a href="#7-파이썬-실행하기" class="headerlink" title="7. 파이썬 실행하기"></a>7. 파이썬 실행하기</h2><ul>
<li>대화형 인터프리터<br>python을 실행시켜서 하는 방법도 있다 </li>
</ul>
<p><img src="/img/Introducing-Python/1/1.png"></p>
<ul>
<li>파일</li>
</ul>
<p>test.py 파일을 만들어서 하는 방법도 있다.<br><code>python test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-number">6</span>)<br><br>print(<span class="hljs-number">5</span>+<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure>

<p><img src="/img/Introducing-Python/1/2.png"></p>
<ul>
<li>PyCharm</li>
</ul>
<p><a href="https://www.jetbrains.com/pycharm/download/">pycharm</a>을 이용해서 해보자<br>이게 제일 편한방법!! Community버전을 이용하면 무료이다!</p>
<hr>
<h2 id="8-파이썬-철학"><a href="#8-파이썬-철학" class="headerlink" title="8. 파이썬 철학"></a>8. 파이썬 철학</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> this<br></code></pre></td></tr></table></figure>
<p>파이썬에서 다음과 같이 입력하면 철학을 볼 수 있다</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">The Zen of Python, by Tim Peters<br>(파이썬 철학, 팀 피터스)<br><br>Beautiful is better than ugly.<br>(아름다운 것이 추한 것보다 낫다.)<br><br>Explicit is better than implicit.<br>(명확한 것이 함축적인 것보다 낫다.)<br><br>Simple is better than complex.<br>(단순한 것이 복잡한 것보다 낫다.)<br><br>Complex is better than complicated.<br>(복잡한 것이 난해한 것보다 낫다.)<br><br>Flat is better than nested.<br>(단조로운 것이 뒤엉킨 것보다 낫다.)<br><br>Sparse is better than dense.<br>(분포되어 있는 것이 빽빽한 것보다 낫다.)<br><br>Readability counts.<br>(가독성은 중요하다.)<br><br>Special cases aren&#39;t special enough to break the rules.<br>(특별한 경우라 하더라도 규칙을 어길 수 있을 만큼 특별하지 않다.)<br><br>Although practicality beats purity.<br>(비록 실용성이 순수함을 앞선다 할지라도.)<br><br>Errors should never pass silently.<br>(오류를 절대로 조용히 넘기면 안 된다.)<br><br>Unless explicitly silenced.<br>(분명하게 조용하지 않는 한.)<br><br>In the face of ambiguity, refuse the temptation to guess.<br>(모호한 상황에서도 추측하려는 유혹을 떨쳐내야 한다.)<br><br>There should be one--and preferably only one--obvious way to do it.<br>(그것을 할 수 있는 분명한 한 가지 방법이 있어야 한다. 그 방법이 유일하다면 더 좋다.)<br><br>Although that way may not be obvious at first unless you&#39;re Dutch.<br>(네덜란드 사람(Guido van Rossum)이 아니라면, 처음에 그 방법이 분명하지 않을 수도 있다.)<br><br>Now is better than never.<br>(지금 하는 것이 하지 않는 것보다 낫다.)<br><br>Although never is often better than *right* now.<br>(비록 하지 않는 것이 종종 지금 *당장*하는 것보다 나을지라도.)<br><br>If the implementation is hard to explain, it&#39;s a bad idea.<br>(구현한 것이 설명하기 어렵다면, 그것은 나쁜 아이디어다.)<br><br>If the implementation is easy to explain, it may be a good idea.<br>(구현한 것이 설명하기 쉽다면, 그것은 좋은 아이디어일 것이다.)<br><br>Namespaces are one honking great idea--let&#39;s do more of those!<br>(네임스페이스는 정말 좋은 아이디어다. 더 많이 사용하자!)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>book</category>
        <category>Introducing-Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CHAPTER 2 파이 재료 - 숫자, 문자열, 변수</title>
    <url>/2017/10/06/Introducing-Python/Introducing-Python-02/</url>
    <content><![CDATA[<ol>
<li>변수, 이름, 객체</li>
<li>숫자</li>
<li>문자열</li>
</ol>
<hr>
<h2 id="1-변수-이름-객체"><a href="#1-변수-이름-객체" class="headerlink" title="1. 변수, 이름, 객체"></a>1. 변수, 이름, 객체</h2><p>파이썬에서 모든것이 객체로 구현되어있다</p>
<p>파이썬은 객체 타입을 바꿀 수 없는 <strong>강 타입</strong>이다<br>변수 이름은 영문 소문자, 대문자, 숫자, 언더스코프만 가능하다<br>단 이름은 숫자로 시작할 수 없다</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">False</td>
<td align="center">class</td>
<td align="center">finally</td>
<td align="center">is</td>
<td align="center">return</td>
</tr>
<tr>
<td align="center">None</td>
<td align="center">continue</td>
<td align="center">for</td>
<td align="center">lambda</td>
<td align="center">try</td>
</tr>
<tr>
<td align="center">True</td>
<td align="center">def</td>
<td align="center">from</td>
<td align="center">nonlocal</td>
<td align="center">while</td>
</tr>
<tr>
<td align="center">and</td>
<td align="center">del</td>
<td align="center">global</td>
<td align="center">not</td>
<td align="center">with</td>
</tr>
<tr>
<td align="center">as</td>
<td align="center">elif</td>
<td align="center">if</td>
<td align="center">or</td>
<td align="center">yield</td>
</tr>
<tr>
<td align="center">assert</td>
<td align="center">else</td>
<td align="center">import</td>
<td align="center">pass</td>
<td align="center">break</td>
</tr>
<tr>
<td align="center">except</td>
<td align="center">in</td>
<td align="center">raise</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>다음은 예약어라서 사용 불가</p>
<hr>
<h2 id="2-숫자"><a href="#2-숫자" class="headerlink" title="2. 숫자"></a>2. 숫자</h2><hr>
<p>+(더하기), -(빼기), *(곱하기), /(나누기), //(몫), %(나머지), **(지수)<br>+=, -=, *=, /= 등등 축약형 가능 (단 ++, – 불가능)</p>
<p>일반적인 사칙연산의 우선순위를 따른다</p>
<p>0b, 0B : 2진수<br>0o, 0O : 8진수<br>0x, 0X : 16진수</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span>(데이터)<br></code></pre></td></tr></table></figure>
<p>정수형으로 데이터를 바꿀 수 있다</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">float</span>(데이터)<br></code></pre></td></tr></table></figure>
<p>실수형으로 데이터를 바꿀 수 있다</p>
<hr>
<h2 id="3-문자열"><a href="#3-문자열" class="headerlink" title="3. 문자열"></a>3. 문자열</h2><hr>
<p>“ “또는 ‘ ‘으로 문자열을 표시한다</p>
<p>문자열을 여러문장 입력할때는 ‘’’ ~~~ ‘’’ 으로 한다</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>(데이터)<br></code></pre></td></tr></table></figure>
<p>문자열형으로 데이터를 바꿀 수 있다</p>
<p>이스케이프 문자를 통해서 엔터(\n), 탭(\t)을 표현한다</p>
<p>문자열 결합은 +로 가능<br>문자열 복사는 *로 가능</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-string">&quot;def&quot;</span><br><span class="hljs-string">&#x27;abcdef&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;abc&quot;</span> * <span class="hljs-number">4</span><br><span class="hljs-string">&#x27;abcabcabcabc&#x27;</span><br></code></pre></td></tr></table></figure>

<p>문자열 추출은 [] 연산자를 통해서 왼쪽 오프셋은 0부터 시작<br>오른쪽 오프셋은 -1부터 시작</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">5</span>]<br><span class="hljs-string">&#x27;f&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;z&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[-<span class="hljs-number">5</span>]<br><span class="hljs-string">&#x27;v&#x27;</span><br></code></pre></td></tr></table></figure>

<p>전체 추출 [:]<br>부분 추출 [start offset : end offset : step]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[:]<br><span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[::<span class="hljs-number">3</span>]<br><span class="hljs-string">&#x27;adgjmpsvy&#x27;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(문자열 <span class="hljs-keyword">or</span> 문자열변수)<br></code></pre></td></tr></table></figure>
<p>문자열의 길이를 알 수 있다</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">split(<span class="hljs-string">&#x27;구분 문자&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>문자열을 구분 문자를 통해서 나눈다</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;결합 문자&#x27;</span>.join(문자열 <span class="hljs-keyword">or</span> 문자열 변수)<br></code></pre></td></tr></table></figure>
<p>나누어진 문자열을 결합한다</p>
<p>이와 같이 여러 문자열 함수가 있다<br><a href="https://docs.python.org/3/library/stdtypes.html#string-methods">https://docs.python.org/3/library/stdtypes.html#string-methods</a><br>여기서 확인해서 문자열을 다루자!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.capitalize()<br><span class="hljs-built_in">str</span>.casefold()<br><span class="hljs-built_in">str</span>.center(width[, fillchar])<br><span class="hljs-built_in">str</span>.count(sub[, start[, end]])<br><span class="hljs-built_in">str</span>.encode(encoding=”utf-<span class="hljs-number">8</span>”, errors=”strict”)<br><span class="hljs-built_in">str</span>.endswith(suffix[, start[, end]])<br><span class="hljs-built_in">str</span>.expandtabs(tabsize=<span class="hljs-number">8</span>)<br><span class="hljs-built_in">str</span>.find(sub[, start[, end]])<br><span class="hljs-built_in">str</span>.<span class="hljs-built_in">format</span>(*args, **kwargs)<br><span class="hljs-built_in">str</span>.format_map(mapping)<br><span class="hljs-built_in">str</span>.index(sub[, start[, end]])<br><span class="hljs-built_in">str</span>.isalnum()<br><span class="hljs-built_in">str</span>.isalpha()<br><span class="hljs-built_in">str</span>.isdecimal()<br><span class="hljs-built_in">str</span>.isdigit()<br><span class="hljs-built_in">str</span>.isidentifier()<br><span class="hljs-built_in">str</span>.islower()<br><span class="hljs-built_in">str</span>.isnumeric()<br><span class="hljs-built_in">str</span>.isprintable()<br><span class="hljs-built_in">str</span>.isspace()<br><span class="hljs-built_in">str</span>.istitle()<br><span class="hljs-built_in">str</span>.isupper()<br><span class="hljs-built_in">str</span>.join(iterable)<br><span class="hljs-built_in">str</span>.ljust(width[, fillchar])<br><span class="hljs-built_in">str</span>.lower()<br><span class="hljs-built_in">str</span>.lstrip([chars])<br><span class="hljs-built_in">str</span>.partition(sep)<br><span class="hljs-built_in">str</span>.replace(old, new[, count])<br><span class="hljs-built_in">str</span>.rfind(sub[, start[, end]])<br><span class="hljs-built_in">str</span>.rindex(sub[, start[, end]])<br><span class="hljs-built_in">str</span>.rjust(width[, fillchar])<br><span class="hljs-built_in">str</span>.rpartition(sep)<br><span class="hljs-built_in">str</span>.rsplit(sep=<span class="hljs-literal">None</span>, maxsplit=-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">str</span>.rstrip([chars])<br><span class="hljs-built_in">str</span>.split(sep=<span class="hljs-literal">None</span>, maxsplit=-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">str</span>.splitlines([keepends])<br><span class="hljs-built_in">str</span>.startswith(prefix[, start[, end]])<br><span class="hljs-built_in">str</span>.strip([chars])<br><span class="hljs-built_in">str</span>.swapcase()<br><span class="hljs-built_in">str</span>.title()<br><span class="hljs-built_in">str</span>.translate(table)<br><span class="hljs-built_in">str</span>.upper()<br><span class="hljs-built_in">str</span>.zfill(width)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>book</category>
        <category>Introducing-Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CHAPTER 3 파이 채우기 - 리스트, 튜플, 딕셔너리, 셋</title>
    <url>/2017/10/09/Introducing-Python/Introducing-Python-03/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>book</category>
        <category>Introducing-Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>C9과 Git</title>
    <url>/2017/10/03/Web/bootstrap/</url>
    <content><![CDATA[<ul>
<li>기본적으로 <a href="https://github.com/">Github</a> 와 <a href="https://c9.io/">C9</a>을 가입합니다</li>
</ul>
<p>C9에서 기본적인 프로젝트를 한번 만들어 본다</p>
<p>이름을 편하게 정하고 Ruby를 선택해서 기본적으로 진행이 가능하다<br>많은 폴더 중에 public 폴더에 index.html 파일을 만들어 본다</p>
<p>index.html에 HTML과 css를 연습해 본다</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>한글이 깨질 수 도 있으니 다음과 같이 추가한다</p>
<p>여러가지 css를 이용해서 웹 페이지를 꾸밀 수도 있지만 쉽지가 않다<br>우리는 도와줄 수 있는 친구 <a href="http://getbootstrap.com/">bootstrap</a>을 이용하자</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Required meta tags --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap CSS --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Optional JavaScript --&gt;</span><br>    <span class="hljs-comment">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>기본적인 템플릿 페이지를 이용해서 작업 하면 쉽다!</p>
<p>싸이트에서 여러가지를 복사해서 붙여 넣어서 페이지를 꾸며봅시다</p>
<p><a href="https://startbootstrap.com/">https://startbootstrap.com/</a> 싸이트에서 무료 테마를 이용해서 페이지를 이쁘게 꾸며 봅시다</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML/css 기초</title>
    <url>/2017/10/03/Web/html/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://www.codecademy.com/">https://www.codecademy.com/</a></p>
</li>
<li><p><a href="http://div.or.kr/">div.or.kr</a></p>
</li>
<li><p><a href="http://ko.learnlayout.com/">http://ko.learnlayout.com/</a></p>
</li>
<li><p><a href="https://learn.shayhowe.com/">https://learn.shayhowe.com/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Developing Android Apps</title>
    <url>/2017/02/01/adnroid-developing/Developing-Android-Apps-00/</url>
    <content><![CDATA[<p><a href="https://classroom.udacity.com/courses/ud853">https://classroom.udacity.com/courses/ud853</a> 강의를 정리하면서 포스팅한 자료입니다<br>예전 강의였기때문에 최신 내용과 많이 다를수가 있습니다</p>
<h2 id="다음과-같은-챕터로-구성되어있습니다"><a href="#다음과-같은-챕터로-구성되어있습니다" class="headerlink" title="다음과 같은 챕터로 구성되어있습니다"></a>다음과 같은 챕터로 구성되어있습니다</h2><ol>
<li>Create Project Sunshine</li>
<li>Connect Sunshine to the Cloud</li>
<li>Create New Activities and Navigate Apps with Intents</li>
<li>Activity Lifecycle and Data</li>
<li>Content Providers</li>
<li>Hooking it up with Loaders</li>
<li>Rich and Responsive Layouts</li>
<li>Services and Notifications</li>
</ol>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>7. Rich and Responsive Layouts (3)</title>
    <url>/2017/02/18/adnroid-developing/Developing-Android-Apps-07-03/</url>
    <content><![CDATA[<h2 id="Guideline-RedLine"><a href="#Guideline-RedLine" class="headerlink" title="Guideline (RedLine)"></a>Guideline (RedLine)</h2><p><a href="/downloads/code/7/Sunshine_Visual_Mocks_ALL.pdf">PDF 파일</a>을 참조하여서 RedLine에 맞게 화면을 설정해 봅시다</p>
<p>일단 디자인에서 글씨 폰트를 변경하라고 되어있습니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">android:fontFamily=&quot;sans-serif-condensed&quot;<br></code></pre></td></tr></table></figure>

<p>TextView에 다음과 같이 적어주면 폰트를 변경할 수 있습니다</p>
<p>폰트 크기도 22sp, 14sp라고 적혀있습니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">android:textAppearance=&quot;?android:textAppearanceLarge&quot;<br>android:textAppearance=&quot;?android:textAppearanceSmall&quot;<br></code></pre></td></tr></table></figure>

<p>다음과 같이 적으면 대략 22sp, 14sp와 비슷한 크기가 됩니다</p>
<p>현재 아이템에서 이미지 쪽을 보면 60dp 사이즈에 가운데 이미지가 표시 되어있습니다<br>FrameLayout을 이용해서 60dp사이즈를 사용해서 크기를 설정해주고 이미지 배치합시다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;FrameLayout<br>    android:layout_width=&quot;60dp&quot;<br>    android:layout_height=&quot;wrap_content&quot;&gt;<br></code></pre></td></tr></table></figure>

<p>날짜 / 날씨 설명을 표시하는 부분과 온도를 표시하는 부분은 dp로 설정하지 않고 비율 계산으로 합니다<br>175 : 125이닌깐 7:5로 해주면 됩니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;LinearLayout<br>    android:layout_width=&quot;0dp&quot;<br>    android:layout_height=&quot;wrap_content&quot;<br>    android:layout_weight=&quot;7&quot;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;LinearLayout<br>    android:layout_width=&quot;0dp&quot;<br>    android:layout_height=&quot;wrap_content&quot;<br>    android:layout_weight=&quot;5&quot;<br>    android:layout_gravity=&quot;center&quot;<br></code></pre></td></tr></table></figure>

<p>이제 남은 화면들도 RedLine에 맞게 수정을 해줍시다</p>
<p>좀더 효과적인 도구가 있습니다</p>
<p>(폰) 설정 - 개발자 옵션 - 레이아웃 범위 표시 하면 모든 뷰의 패딩과 마진과 같은 경계선을 볼 수 있습니다</p>
<p><a href="https://developer.android.com/reference/android/R.attr.html">R.attr</a><br><a href="https://material.io/guidelines/style/typography.html#">Typography</a><br><a href="https://developer.android.com/guide/topics/resources/more-resources.html#Color">Color</a></p>
<hr>
<h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><ul>
<li>나머지 화면들을 수정하세요</li>
<li><a href="https://gist.github.com/Hoyuo/be2a7f25ac9d051d1eee6e633055a9ac">정답</a></li>
</ul>
<script src="//gist.github.com/be2a7f25ac9d051d1eee6e633055a9ac.js"></script>

<hr>
<p>어느정도 RedLine과 비슷하게 했지만 더 수정하고 싶은 부분이 생기기 마련입니다</p>
<p>Tablets에서 세로 모드로 봤을때는 또 화면을 하나로 유지해도 괜찮은 UI 일수도 있습니다<br>Tablets으로 시작할때 오늘 날짜가 자동으로 선택 되도록 해야하는 방법도 좋은 방법입니다</p>
<p>정답은 없습니다 본인의 Application을 자유롭게 수정을 하고 좀 더 사용하기 좋은 앱으로 만드세요</p>
<hr>
<h2 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h2><p>앱이 얼마나 접근성이 좋은지 평가하려면 <a href="https://developer.android.com/guide/topics/ui/accessibility/checklist.html">Accessibility Developer Checklist</a>가 있습니다</p>
<p>설정에서 접근성을 보면 여러가지가 있습니다<br>캡션, 확대동작, 글꼴크기, 디스플레이크기등이 있습니다</p>
<p>우리가 더 자세하게 알아볼것은 TalkBack 입니다<br>시각장애우 분들이나 저 시력자 분들을 위해서 음성안내를 도와주는 Application 입니다<br>우리앱에서 적용을 해봅시다</p>
<p>ImageView에 content description을 추가해 주는 것이 좋습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DetailFragment.onLoadFinished()</span><br>mIconView.setContentDescription(description);<br><br><span class="hljs-comment">// ForecastAdapter.bindView()</span><br>viewHolder.iconView.setContentDescription(description);<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="Custom-View"><a href="#Custom-View" class="headerlink" title="Custom View"></a>Custom View</h2><p><a href="https://developer.android.com/training/custom-views/index.html">Creating Custom Views</a></p>
<p>표준 위젯 라이브러리를 알면 좋지만 표준 위젯 라이브러리로 표현이 힘들고 어려울 경우에는 Custom View를 제작하고 만들어야 합니다</p>
<p>우리가 만드는 Application 에서는 Custom View를 쓰지는 않습니다 하지만 알고는 있어야 합니다<br>우리는 언제 사용할지 모르기 때문입니다</p>
<p>MyView라는 Custom View를 만듭니다</p>
<p>MyView는 View 또는 SurfaceView 를 상속받아서 구현해야합니다</p>
<p>View는 가볍고, 캔버스 방식입니다<br>SurfaceView는 특별히 UI요소를 지원하도록 디자인 되어서 3D 그래픽이나 Open GL을 사용해서 빨리 그릴 수 있도록 합니다</p>
<p>View를 이용해서 100*100 빈 상자를 그립니다 이것을 바꾸려면</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span></span><br></code></pre></td></tr></table></figure>

<p>handler를 Override해서 뷰 크기를 정할 수 있습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span></span><br></code></pre></td></tr></table></figure>

<p>onDraw()도 Override해서 뷰의 내용을 그립니다<br>onMeasure()는 부모 뷰가 자식 뷰를 만들 때 호출됩니다</p>
<p>특정한 높이나 너비를 정할 수 있지만 대부분의 경우 match_parent 또는 wrap_content 를 많이 사용합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> hSpecMode = MeasureSpec.getMode(heightMeasureSpec);<br>    <span class="hljs-keyword">int</span> hSpecSize = MeasureSpec.getSize(heightMeasureSpec);<br>    <span class="hljs-keyword">int</span> myHeight = hSpecSize;<br><br>    <span class="hljs-keyword">if</span> (hSpecMode == MeasureSpec.EXACTLY) &#123;<br></code></pre></td></tr></table></figure>

<p>여유 공간을 계산을 해서 어떤 크기로 뷰를 설정할지를 알 수 있습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">setMeasuredDimension(myWidth, myHeight);<br></code></pre></td></tr></table></figure>

<p>setMeasuredDimension() 메서드를 이용해서 반영될 크기를 결정합니다</p>
<p>사실 여기서 부터는 추가사항입니다 안해도 괜찮습니다</p>
<p>우리는 Compass을 만들어서 바람이 오는 방향을 표시해 봅시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">View</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Compass</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(context);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Compass</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(context, attrs);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Compass</span><span class="hljs-params">(Context context, AttributeSet attrs, <span class="hljs-keyword">int</span> defStyleAttr)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(context, attrs, defStyleAttr);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;<br>        <span class="hljs-comment">// 내용생략</span><br>    &#125;<br></code></pre></td></tr></table></figure>

<p>기본 준비는 다했으니 실제로 뷰 내용을 그려봅시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Android에서 Canvas는 매우 일반적이고 단순합니다<br>아래의 그림위에 계속 그리는 형식으로 반복됩니다<br>Canvas와 Paint에는 다양한 브러쉬가 있습니다</p>
<p>선, 사각형, 원형, 컬러 텍스트, 패턴, 그라데이션, 이미지 등의 도구도 풍부합니다<br>또한 이동, 회전, 확대, 축소 하는 기능도 제공합니다<br>밑에 글을 참조해서 멋있는 UI를 그려보세요</p>
<p><a href="https://developer.android.com/guide/topics/graphics/2d-graphics.html">Canvas and Drawables</a><br><a href="https://developer.android.com/training/custom-views/custom-drawing.html">Custom Drawing</a></p>
<p>Paint 객체의 생성과 소멸이 빈번하고 GC 때문에 UI의 프레임이 떨어지는 현상을 보실수도 있습니다<br>onDraw에서 최적화를 통하여 UI 표시에 문제가 없도록 해야합니다</p>
<p>onDraw를 완성하고 xml의 추가를 할때는 패키지 이름을 포함해서 사용하면 됩니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;패키지명.Compass<br>    android:layout_width=&quot;...&quot;<br>    android:layout_height=&quot;...&quot;/&gt;<br></code></pre></td></tr></table></figure>

<p>Custom View의 마지막 단계는 interactive의 추가입니다<br>사용자 입력이 대표적인 예 입니다</p>
<p>키입력, 트랙볼 움직임, 화면 터치 이벤트등 이 모두에 해당하는 event handler를 Override해서 할 수 있습니다</p>
<p><a href="https://developer.android.com/reference/android/view/MotionEvent.html">MotionEvent</a> 문서를 참고하여서 여러분 스스로 완전한 interactive Custom View를 완성해 보세요</p>
<hr>
<h1 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h1><ul>
<li>View &amp; ViewGroup</li>
<li>Responsive Design</li>
<li>Fragment</li>
<li>UI</li>
<li>Accessibility</li>
<li>Custom Views</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android 기본 설치</title>
    <url>/2017/01/05/android/android0/</url>
    <content><![CDATA[<h2 id="JAVA-설치"><a href="#JAVA-설치" class="headerlink" title="JAVA 설치"></a>JAVA 설치</h2><p>OS에 맞게 JAVA를 설치 하고 환경 변수를 세팅 한다.<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<h2 id="Android-Studio-설치"><a href="#Android-Studio-설치" class="headerlink" title="Android Studio 설치"></a>Android Studio 설치</h2><p><a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a> 에서 다운 받고 설치하면 됩니다.</p>
<h2 id="Android-SDK-설치"><a href="#Android-SDK-설치" class="headerlink" title="Android SDK 설치"></a>Android SDK 설치</h2><ul>
<li>Tools -&gt; (가장 죄신 버전의) Android SDK Tools</li>
<li>Tools -&gt; (가장 죄신 버전의) Android SDK Platform-tools</li>
<li>Tools -&gt; (가장 죄신 버전의) Android SDK Build-tools</li>
<li>(가장 죄신 버전의) Android 버전 -&gt; SDK Platform</li>
<li>(가장 죄신 버전의) Android 버전 -&gt; ARM EABI v7a System Image, Intel x86 Atom(또는 Atom-64) System Image</li>
<li>(가장 죄신 버전의) Android 버전 -&gt; Documentation for Android SDK 애플리케이션 개발 시에 수시로 참조할 API 문서 등이 있으므로 설치하는 것이 좋다. 안드로이드 SDK가 설치된 디렉터리 밑의 docs 서브 디렉터리에 각종 문서 파일들이 저장된다.</li>
<li>Extras -&gt; (가장 죄신 버전의) Android Support Repository</li>
<li>Extras -&gt; (가장 죄신 버전의) Android Support Library</li>
<li>Extras -&gt; (가장 죄신 버전의) Google Repository</li>
<li>Extras -&gt; (가장 죄신 버전의) Google USB Driver(윈도우 시스템에서만 띨요함)</li>
<li>Extras -&gt; (가장 죄신 버전의) Intel x86 Emulator Accelerator(HAXM installer)</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>android 프로젝트 생성</title>
    <url>/2017/01/05/android/android1/</url>
    <content><![CDATA[<p><img src="/img/studio.png"></p>
<p><strong>Start a new Android Studio project</strong> 를 클릭해서 프로젝트를 만든다</p>
<p><img src="/img/project.png"></p>
<ul>
<li>Application name : 프로젝트의 이름을 설정한다</li>
<li>Company Domain : 자신의 도메인 URL을 입력한다 (www 제외)</li>
<li>Project location : 프로젝트를 저장할 위치를 설정한다</li>
</ul>
<p><img src="/img/target.png"></p>
<ul>
<li>Minimum SDK : 최소 버전의 Android 버전을 정합니다. API 16 정도로 설정합니다</li>
</ul>
<p><img src="/img/activity.png"></p>
<p>생성할 Activity를 정하는 페이지 입니다<br>기본적으로 Empty Activity를 설정합니다</p>
<p><img src="/img/activity_name.png"></p>
<ul>
<li>Activity Name : 기본적으로 적용할 화면의 이름을 정합니다. 관습적으로 액티비티 이름 + Activity 식으로 정하게 됩니다</li>
<li>Layout Name : activity name에 연결된 layout의 이름을 정합니다. 자동적으로 activity_액티비티 이름 형식으로 설정합니다</li>
</ul>
<p>마지막 Finish 버튼을 눌러서 프로젝트 생성을 마무리 합니다</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Const Function (상수 함수)</title>
    <url>/2016/06/29/cpluscplus/advanced-cpp-2/</url>
    <content><![CDATA[<h2 id="1-상수-함수"><a href="#1-상수-함수" class="headerlink" title="1. 상수 함수"></a>1. 상수 함수</h2><p>const를 붙이는 함수들 (ex. <code>void FOO() const</code>)<br>상수 함수 안에서는 멤버 값을 변경할 수 없다.<br>const는 반드시 사용해야 한다.<br>상수 인스턴스는 상수 함수만 호출가능하다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x, y;<br><br>    Point(<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>) : x(a), y(b) &#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        x = a;<br>        y = b;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        x = <span class="hljs-number">10</span>;	<span class="hljs-comment">//error, 상수 함수 안에서는 멤버 값을 변경할 수 없다.</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>    p.x = <span class="hljs-number">10</span>; <span class="hljs-comment">// error :  상수 인스턴스 이기때문이다.</span><br>    p.<span class="hljs-built_in">set</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// error : 객체를 상수화를 하였기 때문에 상수함수만 가능하다.</span><br><span class="hljs-comment">// 위에 2가지는 불가능 하더라고 밑에 print는 가능 해야한다. 이럴때 필요한것이 const이다</span><br>    p.print();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2-상수-함수-호출"><a href="#2-상수-함수-호출" class="headerlink" title="2. 상수 함수 호출"></a>2. 상수 함수 호출</h2><p>아무리 상수객체라고 하더라고 호출이 가능하도록 열어 둬야 한다.<br>핵심 : 상수 함수는 필수이다. 객체의 상태를 변경하지 않은 모든 멤버 함수는 반드시 상수함수로 만들어야 한다.<br><code>void foo(const Rect&amp; r)</code> 코드에서 r에 대해서 면적은 구할수 있어야 한다!!</p>
<blockquote>
<p>C++ 기본 문법 : call by value 대신 const &amp; 가 좋다.</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rect</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y, w, h;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> w * h; &#125;<br>&#125;;<br><br><span class="hljs-comment">//C++ 기본 문법 : call by value 대신 const &amp; 가 좋다.</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Rect &amp;r)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = r.getArea();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Rect r; <span class="hljs-comment">//초기화 하였다고 가정하고</span><br><br>    <span class="hljs-keyword">int</span> n = r.getArea(); <span class="hljs-comment">// ok</span><br><br>    foo(r);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="3-논리적-상수성"><a href="#3-논리적-상수성" class="headerlink" title="3. 논리적 상수성"></a>3. 논리적 상수성</h2><p>상수에서의 문제점을 해결하자</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br><span class="hljs-keyword">public</span> :<br>    Point(<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>) : x(a), y(b) &#123; &#125;<br><br>    <span class="hljs-comment">//객체의 상태를 문자열로 반환하는 함수 : java, C#에 있는 개념</span><br>    <span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    	<span class="hljs-keyword">char</span> cache[<span class="hljs-number">32</span>];<br>        <span class="hljs-built_in">sprintf</span>(cache, <span class="hljs-string">&quot;%d, %d&quot;</span>, x, y);<br>        <span class="hljs-keyword">return</span> cache;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; p.toString() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; p.toString() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>위와 같이 했을 때는 매 번 cache를 생성해서 작성하게 된다.<br>이 부분에 대해서 불필요 하다고 생각 되기 때문에 다음과 같이 수정을 한다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">char</span> cache[<span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">bool</span> cache_valid;<br><span class="hljs-keyword">public</span> :<br>    Point(<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>) : x(a), y(b), cache_valid(<span class="hljs-literal">false</span>) &#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (cache_valid == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-built_in">sprintf</span>(cache, <span class="hljs-string">&quot;%d, %d&quot;</span>, x, y);<br>            cache_valid = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>위와 같이 수정하였을 경우 cache에 대해서 매번 생성하는 불필요한 행위는 안 할 수있으나 문제가 있다.</p>
<p>실제로 멤버 x, y의 값은 변경하지는 않지만 cache_vaild를 수정하기 때문에 const를 붙일수가 없다.<br>논리적으로 봤을 때 cache와 cache_valid는 직접적으로 영향을 끼치는 역활이 아니라 도우미 역활이기때문에 const를 붙이는 것이 맞다.<br>이런한 점을 해결하기 위한 2가지 방법을 살펴보자.</p>
<h2 id="4-논리적-상수성-해결법"><a href="#4-논리적-상수성-해결법" class="headerlink" title="4. 논리적 상수성 해결법"></a>4. 논리적 상수성 해결법</h2><h3 id="1-변하는-멤버는-mutable로"><a href="#1-변하는-멤버는-mutable로" class="headerlink" title="1. 변하는 멤버는 mutable로!!"></a>1. 변하는 멤버는 mutable로!!</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-keyword">char</span> cache[<span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-keyword">bool</span> cache_valid; <span class="hljs-comment">// 상수 함수에서도 변경 가능한 멤버 data</span><br><br><span class="hljs-keyword">public</span> :<br>    Point(<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>) : x(a), y(b), cache_valid(<span class="hljs-literal">false</span>) &#123; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (cache_valid == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-built_in">sprintf</span>(cache, <span class="hljs-string">&quot;%d, %d&quot;</span>, x, y);<br>            cache_valid = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; p.toString() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; p.toString() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="4-논리적-상수성-해결법-1"><a href="#4-논리적-상수성-해결법-1" class="headerlink" title="4. 논리적 상수성 해결법"></a>4. 논리적 상수성 해결법</h2><p>외부에서 바라볼때는 상수 함수가 되야 하지만 내부적으로는 멤버 변수의 값을 변경해야 하는 문제</p>
<h3 id="2-변하지-않은-것과-변하는-것은-분리되어야-한다"><a href="#2-변하지-않은-것과-변하는-것은-분리되어야-한다" class="headerlink" title="2. 변하지 않은 것과 변하는 것은 분리되어야 한다."></a>2. 변하지 않은 것과 변하는 것은 분리되어야 한다.</h3><p>상수 함수에서 변해야 하는 것이 있다면 별도의 구조체로 분리한다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Cache</span> &#123;</span><br>    <span class="hljs-keyword">char</span> data[<span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">bool</span> valid;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br>    Cache *pCache;<br><br><span class="hljs-keyword">public</span> :<br>    Point(<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>) : x(a), y(b) &#123;<br>        pCache = <span class="hljs-keyword">new</span> Cache;<br>        pCache-&gt;valid = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">toString</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (pCache-&gt;valid == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-built_in">sprintf</span>(pCache-&gt;data, <span class="hljs-string">&quot;%d, %d&quot;</span>, x, y);<br>            pCache-&gt;valid = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pCache-&gt;data;<br>    &#125;<br><br>    ~Point() &#123;<br>        <span class="hljs-keyword">delete</span> pCache;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; p.toString() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; p.toString() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>this_call</title>
    <url>/2016/06/29/cpluscplus/advanced-cpp-1/</url>
    <content><![CDATA[<h2 id="1-this"><a href="#1-this" class="headerlink" title="1. this"></a>1. this</h2><p>객체가 여러번 인스턴스화 한다고 해서 멤버 함수가 생성되는게 아니라 인자가 추가 되는 개념으로 바뀐다.</p>
<h3 id="1-멤버-함수의-호출-원리"><a href="#1-멤버-함수의-호출-원리" class="headerlink" title="1. 멤버 함수의 호출 원리"></a>1. 멤버 함수의 호출 원리</h3><p>객체가 함수의 1번째 인자(this)로 추가된다. - this call<br>정확히는 ecx 레지스터로 전달</p>
<h3 id="2-static-멤버-함수는-this가-추가되지-않는다"><a href="#2-static-멤버-함수는-this가-추가되지-않는다" class="headerlink" title="2. static 멤버 함수는 this가 추가되지 않는다"></a>2. static 멤버 함수는 this가 추가되지 않는다</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">//컴파일을 하면서 바뀐다 void set(Point* const this, int a, int b)</span><br>        x = a; <span class="hljs-comment">// this-&gt;x = a;</span><br>        y = b; <span class="hljs-comment">// this-&gt;y = b;</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>    <span class="hljs-comment">// 컴파일을 해도 static function은 바뀌지 않는다.</span><br>    <span class="hljs-comment">// void foo( int a)</span><br>        x = a;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 컴파일을 하면서 this-&gt;x = a로 변한다.</span><br><span class="hljs-comment">         * 그러나 static function은 this가 없다.</span><br><span class="hljs-comment">         * 그래서 static function에서는 멤버 변수 접근이 안된다.</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span>&#123;<br>    Point::foo(<span class="hljs-number">10</span>);	<span class="hljs-comment">// static 멤버함수는 객체없이 호출 가능</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * push 10</span><br><span class="hljs-comment">     * 보낼 객체가 없다.</span><br><span class="hljs-comment">     * call Pint::foo</span><br><span class="hljs-comment">     */</span><br><br>    Point p1, p2;<br>    p1.<span class="hljs-built_in">set</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">// 이 순간의 원리를 생각해 봅시다.</span><br>    <span class="hljs-comment">/* set(&amp;p1, 10, 20)으로 변경됩니다.</span><br><span class="hljs-comment">     * push 20</span><br><span class="hljs-comment">     * push 10  진짜 인자는 스택으로</span><br><span class="hljs-comment">     * mov ecx, &amp;p1 객체 주소는 레지스터에 호출</span><br><span class="hljs-comment">     * call Point::set 그리고 함수 호출!!</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2-함수포인터"><a href="#2-함수포인터" class="headerlink" title="2. 함수포인터"></a>2. 함수포인터</h2><p>멤버 함수의 포인터를 만드는 법</p>
<h3 id="1-일반-함수-포인터에-멤버-함수의-주소를-담을-수-없다"><a href="#1-일반-함수-포인터에-멤버-함수의-주소를-담을-수-없다" class="headerlink" title="1. 일반 함수 포인터에 멤버 함수의 주소를 담을 수 없다."></a>1. 일반 함수 포인터에 멤버 함수의 주소를 담을 수 없다.</h3><p>this때문에..!!</p>
<h3 id="2-일반-함수-포인터에-static-멤버-함수의-주소를-담을-수-있다"><a href="#2-일반-함수-포인터에-static-멤버-함수의-주소를-담을-수-있다" class="headerlink" title="2. 일반 함수 포인터에 static 멤버 함수의 주소를 담을 수 있다."></a>2. 일반 함수 포인터에 static 멤버 함수의 주소를 담을 수 있다.</h3><h3 id="3-멤버-함수-포인터를-만들고-사용하는-방법"><a href="#3-멤버-함수-포인터를-만들고-사용하는-방법" class="headerlink" title="3. 멤버 함수 포인터를 만들고 사용하는 방법"></a>3. 멤버 함수 포인터를 만들고 사용하는 방법</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">void</span>(Dialog::*f3)() = &amp;Dialog::Close;<br>Dialog dlg;<br>(dlg.*f3)();<br></code></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Dialog Close&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;foo&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">void</span>(*f1)() = &amp;foo;<span class="hljs-comment">//OK</span><br><br>    <span class="hljs-comment">//void(* f2) () = &amp;Dialog::Close;// 될까요? 잘 생각해 보세요</span><br>    <span class="hljs-comment">// error</span><br><br>    <span class="hljs-comment">//멤버 함수 포인터를 만드는 법</span><br>    <span class="hljs-keyword">void</span>(Dialog::*f3)() = &amp;Dialog::Close; <span class="hljs-comment">//OK...외우자</span><br><br>    <span class="hljs-comment">// f3(); //될까요??</span><br>    <span class="hljs-comment">// error</span><br><br>    Dialog dlg;<br>    <span class="hljs-comment">// dlg.f3(); // ok 결국 dlg.Close() 즉 f3(&amp;dlg)</span><br>    <span class="hljs-comment">// 그런데. 이경우 컴파일러는 f3이라는 멤버를 찾게된다. 그래서 error</span><br><br>    (dlg.*f3)();    <span class="hljs-comment">// f3는 함수포인터이므로 *f3하면 함수가 된다.</span><br>    <span class="hljs-comment">// .* 연산자 우선순위를 호출함수()보다 높여야 한다.</span><br><br>    Dialog *pDlg = &amp;dlg;<br>    <span class="hljs-comment">//pDlg와 f3를 사용해서 Close를 호출해 보세요.</span><br>    ((*pDlg).*f3)();<br>    (pDlg-&gt;*f3)();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="3-this-관리의-어려움"><a href="#3-this-관리의-어려움" class="headerlink" title="3. this 관리의 어려움"></a>3. this 관리의 어려움</h2><p>일반적은 쓰레드 관리를 통해서 this 관리의 어려움을 본다</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//VC로만 가능</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;conio.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function">DWORD __stdcall <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* p)</span> </span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;foo&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, foo, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//쓰레드 생성</span><br>    _getch();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="4-this-관리의-어려움"><a href="#4-this-관리의-어려움" class="headerlink" title="4. this 관리의 어려움"></a>4. this 관리의 어려움</h2><p>일반적은 쓰레드 관리를 통해서 this 관리의 어려움을 본다</p>
<h3 id="핵심-1-C의-callback-함수는-객체-지향으로-디자인-될때-static-멤버함수가-되어야-한다"><a href="#핵심-1-C의-callback-함수는-객체-지향으로-디자인-될때-static-멤버함수가-되어야-한다" class="headerlink" title="핵심 1. C의 callback 함수는 객체 지향으로 디자인 될때 static 멤버함수가 되어야 한다."></a>핵심 1. C의 callback 함수는 객체 지향으로 디자인 될때 static 멤버함수가 되어야 한다.</h3><h3 id="핵심-2-static-멤버에는-this가-없으므로-가상함수나-멤버-data에-접근할-수-없다-다양한-기법으로-this를-사용할-수-있게-하는것이-편리하다"><a href="#핵심-2-static-멤버에는-this가-없으므로-가상함수나-멤버-data에-접근할-수-없다-다양한-기법으로-this를-사용할-수-있게-하는것이-편리하다" class="headerlink" title="핵심 2. static 멤버에는 this가 없으므로 가상함수나 멤버 data에 접근할 수 없다. 다양한 기법으로 this를 사용할 수 있게 하는것이 편리하다."></a>핵심 2. static 멤버에는 this가 없으므로 가상함수나 멤버 data에 접근할 수 없다. 다양한 기법으로 this를 사용할 수 있게 하는것이 편리하다.</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//VC로만 가능</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;conio.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// C의 스레드 개념을 c++로 캡슐화 해 봅시다.</span><br><span class="hljs-comment">// 아래 클래스를 라이브러리 내부 클래스라고 생각합니다.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Create</span><span class="hljs-params">()</span> </span>&#123;<br>        CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, _threadMain, <span class="hljs-keyword">this</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// !!</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> DWORD __stdcall _threadMain(<span class="hljs-keyword">void</span> *p) &#123;<br>        <span class="hljs-comment">// 다시 가상함수 호출</span><br>    threadMain();<br>    <span class="hljs-comment">/* 컴파일을 통해서 바뀌게 된다. this-&gt;threadMain();</span><br><span class="hljs-comment">         * 즉 threadMain(this)가 되어야 한다.</span><br><span class="hljs-comment">         * 그러나 threadMain()으로는 사용할수가 없게 된다.</span><br><span class="hljs-comment">         * 방법은 p가 this이므로 캐스팅해서 사용합니다</span><br><span class="hljs-comment">         */</span><br><br>        Thread* self = <span class="hljs-keyword">static_cast</span>&lt;Thread*&gt;(p);<br>        self-&gt;threadMain(); <span class="hljs-comment">// 결국 threadMain(self)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadMain</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 컴파일을 통해서 바뀐다. void threadMain(Thread* this)</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 아래 클래스가 라이브러리 사용자 클래스 입니다.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHtread</span> :</span> <span class="hljs-keyword">public</span> Thread &#123;<br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadMain</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;MyThread&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyHtread t;<br>    t.Create();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="5-NULL-객체-호출-문제"><a href="#5-NULL-객체-호출-문제" class="headerlink" title="5. NULL 객체 호출 문제"></a>5. NULL 객체 호출 문제</h2><p>NULL 객체에 대해서 handling을 해준다.<br>NULL 객체에서 호출하는 문제는 this를 생각하면 쉽게 풀어 나갈 수 있다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span> </span>&#123;<br>    	<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f3&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> data; <span class="hljs-comment">// this-&gt;data</span><br>    &#125;<br><br>    <span class="hljs-comment">// 아래 코드는 왜 만들었을까요 ?</span><br>    <span class="hljs-comment">// NULL 객체에 대해서 함수를 호출해도 죽지 않게 하기 위해</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">call_f3</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span> ? f3() : <span class="hljs-number">0</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f4</span><span class="hljs-params">()</span> </span>&#123; &#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Test *p = <span class="hljs-number">0</span>;<span class="hljs-comment">// 메모리 할당에 실패해서 0이 나왔다고 가정합니다.</span><br><br>    p-&gt;f1(); <span class="hljs-comment">// 어떻게 될까요 ?? 실행하지 말고 생각해 보세요.</span><br>    <span class="hljs-comment">//f1(p), f1(0)</span><br>    p-&gt;f2(); <span class="hljs-comment">// OK</span><br><br>    p-&gt;f3(); <span class="hljs-comment">// error : this-&gt;data 이기 때문에</span><br><br>    p-&gt;call_f3();<br><br>    p-&gt;f4(); <span class="hljs-comment">// 될까요? 0 번지에 가상함수 테이블이 있다고 생각하게 된다.!! run-time error</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="6-상속과-포인터"><a href="#6-상속과-포인터" class="headerlink" title="6. 상속과 포인터"></a>6. 상속과 포인터</h2><p>상속 순서에 따라서 포인터 주소를 배정 받는다.<br>다운케스팅을 하면 자동으로 그 주소를 찾아 간다.<br>부모의 주소를 100번지라고 가정을 하면 상속 받은 순서에 따라서 주소를 배정을 받게 된다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Y</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> :</span> <span class="hljs-keyword">public</span> X, <span class="hljs-keyword">public</span> Y &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> c;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    C c;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; &amp;c &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//100번지 라고 할 때</span><br><br>    X *pX = &amp;c;<br>    Y *pY = &amp;c;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; pX &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// ? 100</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; pY &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// ? 104</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="6-상속과-포인터-1"><a href="#6-상속과-포인터-1" class="headerlink" title="6. 상속과 포인터"></a>6. 상속과 포인터</h2><p>우리가 예상하는 것보다 컴파일러는 주소 값을 잘 찾아서 간다. 컴파일러가 어떻게 이 과정을 찾는지는 모른다.</p>
<blockquote>
<p>모든 함수 포인터는 4바이트라고 생각했지만 일반적은 함수 포인터만 4바이트<br>다중 상속을 하는 경우 포인터의 주소는 8바이트 인다. { 함수주소, this offset }</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fx</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Y</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> y;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fy</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> :</span> <span class="hljs-keyword">public</span> X, <span class="hljs-keyword">public</span> Y &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> c;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    C c;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; &amp;c &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 100번지 라고 할 때</span><br><br>    c.fx(); <span class="hljs-comment">// 100</span><br>    c.fy(); <span class="hljs-comment">// 104</span><br><br>    <span class="hljs-keyword">void</span> (C::*f)();<br><br>    <span class="hljs-comment">//f = &amp;C::fx; // &#123; fx 주소, 0 &#125;</span><br>    <span class="hljs-comment">//(c.*f)();// 결과 ? 100 나와야 한다.</span><br>    <span class="hljs-comment">//f(&amp;c)</span><br><br>    f = &amp;C::fy; <span class="hljs-comment">// &#123; fy 주소, sizeof(X) 즉, 4 &#125;</span><br>    (c.*f)(); <span class="hljs-comment">//f(&amp;c)</span><br>    <span class="hljs-comment">// f.함수주소(&amp;c + f.this_offset)</span><br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(f) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="7-함수포인터와-가상함수"><a href="#7-함수포인터와-가상함수" class="headerlink" title="7. 함수포인터와 가상함수"></a>7. 함수포인터와 가상함수</h2><p>가상함수의 경우는 가상함수 테이블의 인덱스 번호가 넘어온다.<br>즉,  가상함수 table의 인덱스, 가상함수의 순서가 나오게 된다.<br>g++ : 0, 1, 2, 3 등의 숫자가 나오게 됩니다.<br>vc++ : 주소 비슷하게 나오는데… 그 주소를 따라가면 index가 있습니다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goo</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Base foo&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-comment">// &#123; cout &lt;&lt; &quot;Base foo&quot; &lt;&lt; endl; &#125;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dervied</span> :</span> <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Derived foo&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">void</span> (Base::*f)() = &amp;Base::foo;<span class="hljs-comment">// 잘 생각해 보자.</span><br><br>    <span class="hljs-comment">//cout &lt;&lt; f &lt;&lt; endl;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f);<span class="hljs-comment">//foo -&gt; 9</span><br>    <span class="hljs-comment">//goo -&gt; 1</span><br><br>    Base *p = <span class="hljs-keyword">new</span> Dervied;<br><br>    (p-&gt;*f)(); <span class="hljs-comment">// 오버라이딩의 개념에 맞게 Dervied 클래스의 값을 찾아간다.</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="8-Handler"><a href="#8-Handler" class="headerlink" title="8. Handler"></a>8. Handler</h2><p>하나의 클래스를 이용해서 각각의 인스턴스가 다른 역활을 하기 위해서는 Handler를 이용해서 처리한다.<br>java에서 리스너와 비슷한 처리 방법이다.<br>c/c++에서는 모든 함수의 주소를 담을 수 있는 도구가 없다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span> &#123;</span><br>    <span class="hljs-keyword">void</span>(*handler)();<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHandler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>(*f)())</span> </span>&#123;<br>        handler = f;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">click</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 버튼이 눌렸다는 사실을 외부에 전달합니다.</span><br>        <span class="hljs-comment">// 흔히 &quot;객체가 외부에 이벤트를 발생한다.&quot;라고 표현!</span><br>        handler();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Btn1Handler</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;버튼 1 클릭&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Button b1;<br>    b1.setHandler(&amp;Btn1Handler);<br>    b1.click(); <span class="hljs-comment">// 사용자가 버튼을 클릭하면 이함수가 호출된다고 가정합니다.</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>다음과 같이 처리 하면 모든 클래스에 대해서 처리를 할 수 가 없다.<br>이럴 때 사용하는 것이 template 이다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Dialog Close&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span> &#123;</span><br>    <span class="hljs-comment">//void(*handler)();</span><br>    <span class="hljs-keyword">void</span>(T::*handler)();<br><br>    <span class="hljs-comment">//멤버 함수를 담기 위해서 만든다.</span><br>    T *member;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHandler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>(T::*f)())</span> </span>&#123;<br>        handler = f;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">click</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 버튼이 눌렸다는 사실을 외부에 전달합니다.</span><br>        <span class="hljs-comment">// 흔히 &quot;객체가 외부에 이벤트를 발생한다.&quot;라고 표현!</span><br>        (member-&gt;*handler)();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Button&lt;Dialog&gt; b1;<br>    b1.setHandler(&amp;Dialog::Close);<br>    b1.click(); <span class="hljs-comment">// 사용자가 버튼을 클릭하면 이함수가 호출된다고 가정합니다.</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>다음과 같이 코드를 수정하면 모든 클래스에 대해서 처리를 할 수가 있다.</p>
<h2 id="9-function-lt-gt"><a href="#9-function-lt-gt" class="headerlink" title="9. function&lt;&gt;"></a>9. function&lt;&gt;</h2><p>모든 함수의 주소를 담을 수 있는 도구<br>c,c++       : 문법적으로는 없다.<br>c#          : delegate 라는 문법<br>objective-c : Selector 라는 문법</p>
<p>c++11 : function&lt;&gt; 모든 함수의 주소를 담을 수 있다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;foo&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">goo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;goo : &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hoo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;hoo : &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Dialog Close&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    function&lt;<span class="hljs-keyword">void</span>()&gt; f = &amp;foo;<br>    <span class="hljs-comment">//function&lt;리턴값(파라메터)&gt;</span><br>    f(); <span class="hljs-comment">// ok..foo() 호출</span><br><br>    f = bind(&amp;goo, <span class="hljs-number">5</span>);<span class="hljs-comment">// 인자를 고정</span><br>    f();<span class="hljs-comment">//goo(5)</span><br><br>    f = bind(&amp;hoo, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    f();<span class="hljs-comment">//hoo(1,2)</span><br><br>    Dialog dlg;<br>    f = bind(&amp;Dialog::Close, dlg);<span class="hljs-comment">// 객체를 고정</span><br>    f();<span class="hljs-comment">//dlg.Close()</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="10-Bind"><a href="#10-Bind" class="headerlink" title="10.  Bind"></a>10.  Bind</h2><p>bind에 사용법을 더 자세하게 배워보자</p>
<figure class="highlight plain"><figcaption><span>namespace std::placeholders; ``` _1, _2, .... 이용해서 입력하는 인자의 위치를 정해 준다.</span></figcaption><table><tr><td class="code"><pre><code class="hljs using"><br>&#96;&#96;&#96;c++<br>#include &lt;iostream&gt;<br>#include &lt;functional&gt;<br><br>using namespace std;<br>using namespace std::placeholders;<br><br>void foo() &#123; cout &lt;&lt; &quot;foo&quot; &lt;&lt; endl; &#125;<br><br>void goo(int a) &#123; cout &lt;&lt; &quot;goo : &quot; &lt;&lt; a &lt;&lt; endl; &#125;<br><br>void hoo(int a, int b) &#123; cout &lt;&lt; &quot;hoo : &quot; &lt;&lt; a &lt;&lt; &quot;, &quot; &lt;&lt; b &lt;&lt; endl; &#125;<br><br>class Dialog &#123;<br>public:<br>    void Close() &#123;<br>        cout &lt;&lt; &quot;Dialog Close&quot; &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br>void koo(int a, int b, int c, int d) &#123;<br>    printf(&quot;%d %d %d %d\n&quot;, a, b, c, d);<br>&#125;<br><br>int main() &#123;<br>    function&lt;void(int)&gt; f &#x3D; &amp;goo;<br>    f(5); &#x2F;&#x2F;goo(5)<br><br>    f &#x3D; bind(&amp;hoo, _1, 3);<br>    f(5); &#x2F;&#x2F;hoo(5, 3)<br><br>    function&lt;void(int, int)&gt; f2;<br>    f2 &#x3D; bind(&amp;koo, _2, 2, 9, _1);<br>    f2(6, 3); &#x2F;&#x2F; 3, 2, 9, 6<br><br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>리펙토링 1강</title>
    <url>/2016/06/29/cpluscplus/refactoring-1/</url>
    <content><![CDATA[<p>Git<br>Github</p>
<p>CR, LF</p>
<p>Binary, ASCII 구분 안하는 Linux/Unix (?)</p>
<p>Linux/Unix - LF만 해도 CR까지 함<br>Windows - CR + LF 해줘야</p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="기본-환경-설정"><a href="#기본-환경-설정" class="headerlink" title="기본 환경 설정"></a>기본 환경 설정</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;NAME&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;EXAM@PLE.COM&quot;</span><br></code></pre></td></tr></table></figure>

<h2 id="Git-시작하기"><a href="#Git-시작하기" class="headerlink" title="Git 시작하기"></a>Git 시작하기</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git init<br></code></pre></td></tr></table></figure>

<h2 id="Tracking-files"><a href="#Tracking-files" class="headerlink" title="Tracking files"></a>Tracking files</h2><p>새로 생성된 파일들은 기본적으로 Untracked 상태이다.<br>버전 관리를 할 파일들은 Track 상태로 만들어줘야 한다.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git add <span class="hljs-string">&quot;FILENAME&quot;</span><br></code></pre></td></tr></table></figure>

<h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git commit -m <span class="hljs-string">&quot;DESCRIPTION&quot;</span><br></code></pre></td></tr></table></figure>

<h2 id="Add-remote-URL"><a href="#Add-remote-URL" class="headerlink" title="Add remote URL"></a>Add remote URL</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git remote add <span class="hljs-string">&quot;SHORTNAME&quot;</span> <span class="hljs-string">&quot;URL&quot;</span><br>git remote -v<br></code></pre></td></tr></table></figure>

<h2 id="Push-to-remote"><a href="#Push-to-remote" class="headerlink" title="Push to remote"></a>Push to remote</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git push <span class="hljs-string">&quot;REMOTE&quot;</span> <span class="hljs-string">&quot;BRANCH&quot;</span><br></code></pre></td></tr></table></figure>

<h2 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># See branch list</span><br>git branch<br><br><span class="hljs-comment"># Make a branch</span><br>git branch <span class="hljs-string">&quot;BRANCHNAME&quot;</span><br></code></pre></td></tr></table></figure>

<p>현재 작업중인 브랜치는 HEAD가 가리키고 있다.<br>이 HEAD를 다른 브랜치로 옮기고 싶다면 checkout을 해야함.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git checkout <span class="hljs-string">&quot;BRANCHNAME&quot;</span><br></code></pre></td></tr></table></figure>

<h2 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h2><p>Github Repository에 push를 하면 Reviewer가 보면서 Pull Request를 하면된다. 이때 Merge를 하게된다.</p>
<h1 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h1><h2 id="리팩토링이란"><a href="#리팩토링이란" class="headerlink" title="리팩토링이란?"></a>리팩토링이란?</h2><p>마틴 파울러가 만든 단어.<br>코드를 개선하는 방법론에 대한 이야기.<br>마틴 파울러가 Refactoring이라는 책에서 언급한 내용으로는 외부에선 변화를 알 수 없지만 내부의 코드는 개선된 것을 뜻한다.</p>
<p><code>리팩토링은 디자인 패턴과 뗄래야 뗄 수 없다!</code></p>
<h2 id="용어-설명"><a href="#용어-설명" class="headerlink" title="용어 설명"></a>용어 설명</h2><h3 id="Bad-smell"><a href="#Bad-smell" class="headerlink" title="Bad smell"></a>Bad smell</h3><p>재사용성이 떨어지거나 가독성이 떨어지는 코드를 지칭.<br>22가지의 종류로 나눠놨음.</p>
<h3 id="Extract-Method"><a href="#Extract-Method" class="headerlink" title="Extract Method"></a>Extract Method</h3><p>함수는 하나의 일만하도록 하자.</p>
<h3 id="Lazy-Class"><a href="#Lazy-Class" class="headerlink" title="Lazy Class"></a>Lazy Class</h3><p>하는 일이 별로없는 클래스.<br>지워버리자…</p>
<h2 id="들어가기x"><a href="#들어가기x" class="headerlink" title="들어가기x"></a>들어가기x</h2><h3 id="인터페이스의-개념"><a href="#인터페이스의-개념" class="headerlink" title="인터페이스의 개념"></a>인터페이스의 개념</h3><p>OCP (Open-Closed Principle)</p>
<p>Tightly-coupling &lt;-&gt; Loosely-Coupling</p>
<p><strong>abstract method</strong> in Java, <strong>virtual function</strong> in C++<br>둘 다 자식에게 어떤 기능이 구현되지 않으면 객체가 생성되지 않도록 강제하는 문법</p>
<p>C++에서는 인터페이스에 대한 명시적인 문법이 없으므로 관습적으로 클래스 이름 앞에 대문자 I를 붙인다.</p>
<p>두 클래스가 부모-자식의 관계를 가지는 상속이라면 Upcasting이 가능하다는 것을 의미한다.</p>
<h3 id="인터페이스의-내부-구현"><a href="#인터페이스의-내부-구현" class="headerlink" title="인터페이스의 내부 구현"></a>인터페이스의 내부 구현</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IPhone</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>인터페이스를 구현하기 위해 virtual function을 사용했는데 이 때 접근지시자는 항상 public이여야 한다. 그렇다면 굳이 쓸 필요가…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IPhone</span></span><br><span class="hljs-class">&#123;</span><br>     <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>그래서 class를 struct로 바꿨다. 왜냐하면 class란 접근지시자가 private인 struct이닌까.<br>C++에서는 명시적으로 interface 키워드가 존재하지 않는다. 이렇게하면 어떨까?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> interface struct</span><br><br>interface IPhone<br>&#123;<br> <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>결국 interface란 class에 불과한 것임을 알 수 있다.</p>
<p>Java는 외부적으로 다중 상속을 지원 안하지만 implement, 즉 인터페이스 구현 부는 여러 개를 구현할 수 있다. 결국 내부적으로는 다중 상속을 지원하지만 설계 측면에서 클래스의 모호함을 제거하기 위해 제한을 둔 것이다.</p>
<h3 id="중복-코드-해결"><a href="#중복-코드-해결" class="headerlink" title="중복 코드 해결"></a>중복 코드 해결</h3><p>함수 포인터를 사용하면 중복 코드를 줄일 수 있다.<br>예를들면 stdlib.h의 qsort()가 있다.<br>하지만 이 함수의 문제는 함수를 call 한다는 것이다. 즉 이로인해 overhead가 너무 커지는 것.</p>
<p>그래서 inline 키워드를 함수 앞에 붙여주면 컴파일러가 컴파일 후 어셈블리 언어를 함수 호출 명령어에 대체시킨다. 하지만 꼭 그렇지는 않은데…</p>
<h4 id="어셈블리-언어"><a href="#어셈블리-언어" class="headerlink" title="어셈블리 언어"></a>어셈블리 언어</h4><p>1.cpp -&gt; 1.i -&gt; 1.asm<br>소스코드 -&gt; 인터프리터가 처리한 코드 -&gt; 니모닉 언어(어셈블리 코드) -&gt; 0100101…</p>
<p>니모닉 언어 중 하나가 어셈블리 언어이다.</p>
<h4 id="어셈블리-언어로-변환하는-방법"><a href="#어셈블리-언어로-변환하는-방법" class="headerlink" title="어셈블리 언어로 변환하는 방법"></a>어셈블리 언어로 변환하는 방법</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">cl.exe 파일명.cpp /FAs<br></code></pre></td></tr></table></figure>

<p>s 플래그는 주석으로 소스 코드를 넣어준다.</p>
<p>이렇게 하면 파일명.asm 파일이 나오게 되는데 들여다 보면 inline이 안된 것을 볼 수 있다. 왜냐하면 기본적으로 디버깅 모드로 컴파일하기 때문이다. inline으로 대체시키면 디버깅이 안되므로…</p>
<p>그래서 이 최적화 옵션을 꺼줄 필요가 있다. 그 플래그는 /Ob1이다. (/Ob0 이 기본값)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">cl.exe 파일명.cpp /FAs /Ob1<br></code></pre></td></tr></table></figure>

<p>그런데 함수 포인터를 사용하면 이렇게 해도 inline이 대체되지 않는다. 그 이유는 이 기법은 컴파일 타임에서 적용되는 것인데 함수 포인터로 함수를 호출시키는 것은 런타임에서 동작하는 것이므로 컴파일러로써는 최적화를 시킬 수 없는 것이다.</p>
<p>정확하게는 함수는 시그니쳐로만 구분되기 때문에, 즉 타입으로 구분되지 않기 때문에 구별할 수가 없는 것이다.</p>
<p>이러한 경우를 보면 inline 키워드는 컴파일러에게 주는 일종의 힌트라고 볼 수 있다. <code>최적화 할 수 있으면 하고 없으면 말아라.</code> 라는 뜻.</p>
<h4 id="inline을-수행하지-않는-경우"><a href="#inline을-수행하지-않는-경우" class="headerlink" title="inline을 수행하지 않는 경우"></a>inline을 수행하지 않는 경우</h4><ol>
<li>함수 포인터를 사용하는 경우</li>
<li></li>
<li>함수의 코드 길이가 너무 길 경우</li>
</ol>
<p>이러한 제약을 해결하는 방법은 함수 객체를 사용하는 것이다.</p>
<h4 id="함수-객체"><a href="#함수-객체" class="headerlink" title="함수 객체"></a>함수 객체</h4><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Adder</span></span><br><span class="hljs-class">&#123;</span><br>     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a + b; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Subber</span></span><br><span class="hljs-class">&#123;</span><br>     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a - b; &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     Adder add;<br>     <span class="hljs-built_in">cout</span> &lt;&lt; add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>     Subber sub;<br>     <span class="hljs-built_in">cout</span> &lt;&lt; sub(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>호출하는 시그니쳐는 같지만 객체이므로 다른 타입으로 본다. 따라서 inline 키워드로 최적화가 가능하다!</p>
<h4 id="템플릿을-활용한-함수-객체-방식-vs-함수-포인터-방식"><a href="#템플릿을-활용한-함수-객체-방식-vs-함수-포인터-방식" class="headerlink" title="템플릿을 활용한 함수 객체 방식 vs 함수 포인터 방식"></a>템플릿을 활용한 함수 객체 방식 vs 함수 포인터 방식</h4><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">asc_int</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a &gt; b; &#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dss_int</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a &lt; b; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span> &#125;;<br><br>     <span class="hljs-comment">// 장점 : 성능상의 오버헤드가 없다</span><br>     <span class="hljs-comment">// 단점 : 목적파일의 크기가 커질수 있다. 메모리 이슈 (템플릿 함수는 사용한 타입의 수만큼 기계어 코드를 만들기 때문)</span><br>     greater&lt;<span class="hljs-keyword">int</span>&gt; g;<br>     less&lt;<span class="hljs-keyword">int</span>&gt; l;<br>     sort(arr, arr + <span class="hljs-number">10</span>, g);<br>     sort(arr, arr + <span class="hljs-number">10</span>, l);<br><br>     <span class="hljs-comment">// 장점 : 메모리 최적화</span><br>     <span class="hljs-comment">// 단점 : 성능이 떨어짐</span><br>     sort(arr, arr + <span class="hljs-number">10</span>, asc_int);<br>     sort(arr, arr + <span class="hljs-number">10</span>, des_int);<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>실제로 functional 헤더에 있는 greater 객체를 봐보니 inline 키워드가 없는데요??</p>
<h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h4><p>클래스 내부에서 function을 정의하면 암시적 inline이 진행된다.<br>이를 이해하기 위해선 extern linkage와 internal linkage를 알아야 할 필요가 있다.<br>C++ 창시자의 책을 참조하세요.</p>
</blockquote>
<h4 id="Thin-Template-Pattern"><a href="#Thin-Template-Pattern" class="headerlink" title="Thin Template Pattern"></a>Thin Template Pattern</h4><p><a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Thin_Template">Thin Template in More C++ Idioms</a></p>
<p>코드 블로우트 현상을 제거하는 디자인 기법</p>
<p>자유로운 타입을 사용하기 위해선 C에선 void를 쓴다. 대신 형 안정성이 떨어짐. 프로세스가 뻗을 수 있다. 그래서 C++에선 템플릿을 쓴다.</p>
<p>Java에선 할 수 없는 기법. template가 없기 때문.</p>
<p>C++에 specific한 기법이다.</p>
<h3 id="참고-라이브러리와-프레임워크의-차이"><a href="#참고-라이브러리와-프레임워크의-차이" class="headerlink" title="[참고] 라이브러리와 프레임워크의 차이"></a>[참고] 라이브러리와 프레임워크의 차이</h3><p>라이브러리는 사용 흐름의 주도권이 사용자에게 있지만 프레임워크는 주도권이 프레임워크에게 있다. 왜냐하면 그 틀에 맞춰서 코딩을 해야하기 때문이다. 예를들면 안드로이드 코딩을 할 때 Activity를 만들때 항상 Activity 상속을 해서 구현해야 하는 점을 들 수 있다.</p>
<h3 id="상속을-사용하는-이유"><a href="#상속을-사용하는-이유" class="headerlink" title="상속을 사용하는 이유?"></a>상속을 사용하는 이유?</h3><h4 id="일반적인-관념"><a href="#일반적인-관념" class="headerlink" title="일반적인 관념"></a>일반적인 관념</h4><ol>
<li>재사용성</li>
<li>유지 보수</li>
</ol>
<h4 id="본질"><a href="#본질" class="headerlink" title="본질"></a>본질</h4><p>서로 다른 두개의 타입을 하나의 타입으로 사용하는게 바로 상속의 본질이다.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 추상화를 해보자.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span> &#123;</span>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Marine</span> :</span> <span class="hljs-keyword">public</span> Unit<br>&#123;<br><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ghost</span> :</span> <span class="hljs-keyword">public</span> Unit<br>&#123;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     Marine m;<br>     Ghost g;<br><br>     <span class="hljs-comment">// void* grp[2] = &#123; &amp;m, &amp;g &#125;; // 다분히 C언어의 관점이다.</span><br>     Unit* grp[<span class="hljs-number">2</span>] = &#123; &amp;m, &amp;g &#125;; <span class="hljs-comment">// upcasting이 되면서 하나의 그룹으로 묶을 수 있다.</span><br><br>     <span class="hljs-comment">// 서로 다른 두개의 타입을 하나의 타입으로 사용하는게 바로 상속의 본질이다.</span><br>     <span class="hljs-comment">// &lt;-&gt; 다형성을 가진 것을 하나의 타입으로 묶을 수 있다면 상속을 사용하면 된다.</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>Java에서는 void 포인터가 존재하지 않는다. 그렇기 때문에 모든 객체들은 Object를 상속할 수 밖에 없는 것이다.</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>refactoring</tag>
      </tags>
  </entry>
  <entry>
    <title>리펙토링 2강</title>
    <url>/2016/06/29/cpluscplus/refactoring-2/</url>
    <content><![CDATA[<h1 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h1><h2 id="지난-이야기"><a href="#지난-이야기" class="headerlink" title="지난 이야기?"></a>지난 이야기?</h2><p>많은 사람들이 C++로 C스러운 코드를 짠다.<br>먼저 캐스팅에 대해 알아보자.</p>
<h2 id="캐스팅-이야기"><a href="#캐스팅-이야기" class="headerlink" title="캐스팅 이야기"></a>캐스팅 이야기</h2><h3 id="C-C-의-차이"><a href="#C-C-의-차이" class="headerlink" title="C / C++의 차이"></a>C / C++의 차이</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// casting.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span>* p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>C에선 흔한 코드</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// casting.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span>* p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>C++에선 컴파일 타임에서 에러가 난다.</p>
<p>왜 그럴까?</p>
<h3 id="C언어의-설계-철학"><a href="#C언어의-설계-철학" class="headerlink" title="C언어의 설계 철학"></a>C언어의 설계 철학</h3><p>C언어는 사용자를 믿고 실행시킨다. 즉 많은 책임이 사용자에게 있다. 그렇기 때문에 컴파일 타임에서 에러가 나지 않는다. 반면에 C++에선 컴파일러가 타입 체크를 해주므로 컴파일 타임에서 에러가 나는 것. 이건 개발자에 축복이다!</p>
<h3 id="C-에서의-형-변환"><a href="#C-에서의-형-변환" class="headerlink" title="C++에서의 형 변환"></a>C++에서의 형 변환</h3><p>원래 컴파일러는 포인터간의 캐스팅은 이성적이지 않다고 판단한다. 그래서 사용자가 형 변환을 시키지 않으면 암시적 형 변환은 일어나지 않는다. 하지만 void형 포인터에 한해서는 다르다. void 타입을 구체적인 타입으로 캐스팅을 하는 건 이성적인 코드라고 판단한다. void형 포인터는 아무런 연산 (역참조, 덧셈, 뺄셈)을 할 수 없지만 char형 포인터로는 연산이 가능하므로 의미가 있다고 판단하는 것이다.</p>
<p>근데 그렇다고 암시적 형 변환을 해주는 것은 아니다. C++에는 여러가지 형 변환이 있는데…</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 0. 명시적 형변환: 컴파일러의 타입 체크 기능을 끔</span><br>    <span class="hljs-comment">// 이렇게 짜지말것! 포인터에 대해 컴파일러가 보장해주지 않는 것이기 때문이다.</span><br>    <span class="hljs-keyword">char</span>* p1 = (<span class="hljs-keyword">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 1. 이성적 형 변환: static_cast</span><br>    <span class="hljs-comment">// 형 변환이 이성적이라면 캐스팅이 된다.</span><br>    <span class="hljs-keyword">char</span>* p2 = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(<span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0x1</span>;<br><br>    <span class="hljs-keyword">char</span>* p = &amp;x; <span class="hljs-comment">// ERROR</span><br>    <span class="hljs-keyword">char</span>* p = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(&amp;x); <span class="hljs-comment">// ERROR</span><br><br>    <span class="hljs-comment">// 2. 비이성적 형 변환: char*로 재해석 해달라는 의미.</span><br>    <span class="hljs-comment">// 컴파일러의 타입 체크 기능을 끄지 않고 형 변환을 강행.</span><br>    <span class="hljs-comment">// C언어의 대부분의 형 변환을 지원한다.</span><br>    <span class="hljs-keyword">char</span>* p = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(&amp;x);<br><br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>; <span class="hljs-comment">// * 심볼릭 상수: 이름이 있는 상수</span><br><br>    <span class="hljs-keyword">double</span>* p = &amp;PI <span class="hljs-comment">// C언어에서는 에러가 나지 않는다. 즉 런타임에서 상수성을 보장하지 않는다.</span><br>    <span class="hljs-keyword">double</span>* p = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">double</span>*&gt;(&amp;PI); <span class="hljs-comment">// ERROR</span><br>    <span class="hljs-comment">// C언어의 대부분의 형 변환을 지원하지만 이것만은 예외로 지원하지 않는다.</span><br>    <span class="hljs-comment">// 이러한 캐스팅을 C언어에서 지원하는건 언어의 스펙 때문이지</span><br>    <span class="hljs-comment">// 이성적인 판단에 의한 것은 아니다.</span><br><br>    <span class="hljs-comment">// 3. 비상수 형 변환: const_cast</span><br>    <span class="hljs-comment">// 문법적으로 지원을 한다. 필요한 경우가 있으닌까.</span><br>    <span class="hljs-comment">// 하지만 대부분의 개발자들은 const_cast를 쓴다는 것은 설계가 잘못된 것이라고 생각한다.</span><br>    <span class="hljs-keyword">double</span> *p = <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">double</span>*&gt;(&amp;PI);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Up-Casting-Down-Casting"><a href="#Up-Casting-Down-Casting" class="headerlink" title="Up Casting / Down Casting"></a>Up Casting / Down Casting</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~Animal() &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Animal* p1 = <span class="hljs-keyword">new</span> Animal;<br><br>    Animal* p2 = <span class="hljs-keyword">static_cast</span>&lt;Animal*&gt;(<span class="hljs-keyword">new</span> Dog); <span class="hljs-comment">// 이성적 형 변환이니 이렇게 해야...</span><br>    Animal* p2 = <span class="hljs-keyword">new</span> Dog; <span class="hljs-comment">// 이건 왜 되는거야?: 상속 관계이므로!</span><br>    <span class="hljs-comment">// upcasting: 형 변환 연산자를 생략할 수 있다.</span><br>    <span class="hljs-comment">// 컴파일러가 컴파일 타임에 두 클래스 간의 관계를 알고있기 때문.</span><br><br><br>    Dog* pDog = p2; <span class="hljs-comment">// ERROR: 컴파일 타임에 p2가 어떤 형일지 알 수가 없다.</span><br>    <span class="hljs-comment">// downcasting을 위해 명시적 형 변환을 하면 컴파일러 기능을 꺼버리므로 문제가 됨.</span><br>    <span class="hljs-comment">// RTTI를 사용해야 한다.</span><br><br><br>    <span class="hljs-comment">// RTTI(Runtime Type Information)</span><br>    <span class="hljs-comment">// : C언어 표준이 아니라 컴파일러가 제공해 주는 기능</span><br>    <span class="hljs-comment">// 컴파일러 옵션에 켜는게 있다.</span><br>    <span class="hljs-comment">// 이 기능을 사용하려면 class 안에 가상 함수가 하나라도 있어야함.</span><br>    <span class="hljs-comment">// Lookup Table 위에 RTTI 정보가 저장이 된다. (밑에 참조)</span><br>    <span class="hljs-comment">// 자바는 기본으로 제공이 된다.</span><br><br><br>    <span class="hljs-comment">// downcasting: dynamic_cast</span><br>    <span class="hljs-comment">// 만약 캐스팅에 실패하면 return type이 null이 나옴.</span><br>    <span class="hljs-comment">// 형 변환에 대한 안정성이 보장이 안되기 때문에 값을 확인하고 사용해야한다.</span><br>    Dog* pDog = <span class="hljs-keyword">dynamic_cast</span>&lt;Dog*&gt;(p2);<br>    <span class="hljs-keyword">if</span>(p2 == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// ..</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// ..</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h3 id="참고-Virtual-함수에-대하여"><a href="#참고-Virtual-함수에-대하여" class="headerlink" title="[참고] Virtual 함수에 대하여"></a>[참고] Virtual 함수에 대하여</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// * 번호 순서대로 볼 것</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clazz</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">void foo() &#123;&#125;</span><br><span class="hljs-comment">    // 2. 여전히 크기는 1이 나온다.</span><br><span class="hljs-comment">    // 즉 Class안에 함수가 포함되지 않는 걸 알 수 있다.</span><br><span class="hljs-comment">    // 멤버함수는 텍스트 영역에 저장되기 때문!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo2</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-comment">// 3. 이건 크기가 4가 나온다!</span><br>    <span class="hljs-comment">// Dynamic binding</span><br>    <span class="hljs-comment">// 변수 목록 위에 포인터를 하나 더 만듦</span><br>    <span class="hljs-comment">// Lookup Table...</span><br><br>     <span class="hljs-comment">// 정리하기</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Clazz obj;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(obj) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">// 1. 사이즈가 0이 나올꺼 같지만 1이 나온다.</span><br>    <span class="hljs-comment">// 왜일까?</span><br>    <span class="hljs-comment">// 접근을 위해선 최소한의 공간으로 메모리에 할당이 되야하기 때문.</span><br>    <span class="hljs-comment">// 그래서 C++는 클래스가 비어있더라도 1크기 만큼을 할당해서 메모리에 올린다.</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Replace-Magic-number-with-Symbolic-Constant"><a href="#Replace-Magic-number-with-Symbolic-Constant" class="headerlink" title="Replace Magic number with Symbolic Constant"></a>Replace Magic number with Symbolic Constant</h2><h3 id="수동으로-처리하는-상수"><a href="#수동으로-처리하는-상수" class="headerlink" title="수동으로 처리하는 상수"></a>수동으로 처리하는 상수</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_language</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lang)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">switch</span> (lang)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;KOR&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ENG&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;JPN&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Window w;<br>    w.set_language(<span class="hljs-number">0</span>); <span class="hljs-comment">// KOR - 여기서 사용된 숫자가 Magic Number라고 한다 (?)</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>이런식의 처리는…</p>
<ol>
<li>사용된 상수의 의미가 모호 -&gt; 가독성이 떨어짐</li>
<li>외부에 대한 유연성이 떨어짐 -&gt; 확장성이 떨어짐</li>
</ol>
<h3 id="매크로-상수-도입"><a href="#매크로-상수-도입" class="headerlink" title="매크로 상수 도입"></a>매크로 상수 도입</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 매크로 상수 사용</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KOR (0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ENG (1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> JPN (2)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_language</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lang)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">switch</span> (lang)<br>        &#123;<br>            <span class="hljs-keyword">case</span> KOR: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;KOR&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ENG: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ENG&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> JPN: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;JPN&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Window w;<br>    w.set_language(KOR);<br>&#125;<br></code></pre></td></tr></table></figure>
<ol>
<li>가독성이 높아지지만 유지보수가 어렵다.</li>
<li>컴파일러의 고급 기능(디버깅)을 지원 받을 수가 없다. (인터프리터가 처리하는 것이기 때문이다)</li>
</ol>
<h3 id="컴파일러-상수-컴파일-타임-상수"><a href="#컴파일러-상수-컴파일-타임-상수" class="headerlink" title="컴파일러 상수 (컴파일 타임 상수)"></a>컴파일러 상수 (컴파일 타임 상수)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> KOR = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ENG = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> JPN = <span class="hljs-number">2</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_language</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lang)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">switch</span> (lang)<br>        &#123;<br>        <span class="hljs-keyword">case</span> KOR: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;KOR&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">case</span> ENG: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ENG&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">case</span> JPN: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;JPN&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Window w;<br>    w.set_language(KOR);<br>&#125;<br></code></pre></td></tr></table></figure>
<ol>
<li>디버깅시 watch 상수 값을 확인할 수 있다.</li>
<li>대신 런타임에서 메모리 사용량이 증가하긴함.</li>
</ol>
<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// enumeration</span><br><span class="hljs-comment">enum &#123; KOR = 0, ENG, JPN &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// C언어에서는 enum은 완전한 타입이 아니라 int의 호환형이다.</span><br><span class="hljs-comment">// 그래서 int가 인수인 자리에도 enum이 들어갈 수 있다.</span><br><span class="hljs-comment">// 하지만 C++에선 하나의 타입으로 인정받는다.</span><br><span class="hljs-comment">// 대신 태그를 붙여서 선언해야함</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">enum LANG &#123; KOR = 0, ENG, JPN &#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 하지만 전역에 이렇게 선언해 버리면 네임 스페이스가 오염되므로</span><br><span class="hljs-comment">// 클래스 안으로 넣어버리는게 더 좋다.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">LANG</span> &#123;</span> KOR = <span class="hljs-number">0</span>, ENG, JPN &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_language</span><span class="hljs-params">(LANG lang)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">switch</span> (lang)<br>        &#123;<br>        <span class="hljs-keyword">case</span> KOR: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;KOR&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ENG: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ENG&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> JPN: <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;JPN&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Window w;<br>     <span class="hljs-comment">// w.set_language(KOR); // 전역 변수에 선언한 경우 사용법</span><br>    w.set_language(Window::KOR); <span class="hljs-comment">// 클래스 안에 선언한 경우 사용법</span><br>&#125;<br></code></pre></td></tr></table></figure>
<ol>
<li>타입으로 인정 받을 수 있다.</li>
<li>사용이 편함</li>
</ol>
<h2 id="Null-Object"><a href="#Null-Object" class="headerlink" title="Null Object"></a>Null Object</h2><h3 id="필요성에-대하여"><a href="#필요성에-대하여" class="headerlink" title="필요성에 대하여"></a>필요성에 대하여</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 각 객체를 하나의 타입으로 처리 하기 위해 부모 클래스를 설계한다.</span><br><span class="hljs-comment">// write 함수가 반드시 구현될 수 있도록 인터페이스를 도입</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ILog</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsoleLog</span> :</span> <span class="hljs-keyword">public</span> ILog<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Console: &quot;</span> &lt;&lt; msg &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileLog</span> :</span> <span class="hljs-keyword">public</span> ILog<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Console:&quot;</span> &lt;&lt; msg &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogService</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    ILog* pLog;<br><br>    LogService(ILog* p) &#123; pLog = p; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-keyword">if</span> (pLog != <span class="hljs-number">0</span>) pLog-&gt;write(<span class="hljs-string">&quot;url error&quot;</span>);<br><br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-keyword">if</span> (pLog != <span class="hljs-number">0</span>) pLog-&gt;write((<span class="hljs-string">&quot;file error&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>LogService에서 보면 Null 포인터를 항상 체크해줘야한다.<br>굳이 해야할까?</p>
<h3 id="싱글톤"><a href="#싱글톤" class="headerlink" title="싱글톤"></a>싱글톤</h3><h4 id="싱글톤을-위한-문법-규칙-3가지"><a href="#싱글톤을-위한-문법-규칙-3가지" class="headerlink" title="싱글톤을 위한 문법 규칙 3가지"></a>싱글톤을 위한 문법 규칙 3가지</h4><ol>
<li>객체의 임의 생성을 막기 위해 생성자를 private 영역에 정의</li>
<li>유일한 객체를 반환하기 위한 정적 인터페이스 도입</li>
<li>대입과 복사를 금지하기 위해 대입 연산자 함수와 복사 생성자 함수를 private 영역에 정의</li>
</ol>
<h4 id="참고-Exception"><a href="#참고-Exception" class="headerlink" title="[참고] Exception"></a>[참고] Exception</h4><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>C에선 리턴 값이 함수의 성공과 실패를 반환하기도 하고 함수의 출력을 반환하기도함. 즉 모호함.<br>C++에선 이를 분리해놨다. 예외를 통해 성공과 실패를 알리고 리턴 값이 함수의 출력을 의미하게 함.</p>
<h4 id="Cursor-구현하면서-싱글톤-들여다보기"><a href="#Cursor-구현하면서-싱글톤-들여다보기" class="headerlink" title="Cursor 구현하면서 싱글톤 들여다보기"></a>Cursor 구현하면서 싱글톤 들여다보기</h4><p>싱글톤을 만들려니 thread safety 하지 않아서 쓰레드를 도입하니<br>exception safety 하지 않더라. (데드락 발생)<br>그래서 AutoLock 기법을 도입.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 인스턴스를 최초 생성할 때 thread safety 하지 못하므로</span><br><span class="hljs-comment">// Mutex 도입</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mutex</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;LOCK&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;UNLOCK&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoLock</span></span><br><span class="hljs-class">&#123;</span><br>    T&amp; obj;<br><br><span class="hljs-keyword">public</span>:<br>    AutoLock(T&amp; o) : obj(o) &#123; obj.lock(); &#125;<br>    AutoLock(T* p) : obj(*p) &#123; obj.lock(); &#125;<br>    ~AutoLock() &#123; obj.unlock(); &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cursor</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// 1. 객체의 임의 생성을 막기 위해</span><br>    <span class="hljs-comment">// 생성자를 private 영역에 정의</span><br>    Cursor() &#123;&#125;<br><br>    <span class="hljs-comment">// 3. 대입과 복사를 금지하기 위해 대입 연산자 함수와</span><br>    <span class="hljs-comment">// 복사 생성자 함수를 private 영역에 정의</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    // 이렇게 막아줄 수 있지만...</span><br><span class="hljs-comment">    Cursor(const Cursor&amp; c) &#123;&#125;</span><br><span class="hljs-comment">    Cursor&amp; operator=(const Cursor&amp; c) &#123;&#125;</span><br><span class="hljs-comment">    // 클래스 내부에서의 호출은 못막음 (아래 foo 함수)</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    // 따라서</span><br><span class="hljs-comment">    Cursor(const Cursor&amp; c);</span><br><span class="hljs-comment">    Cursor&amp; operator=(const Cursor&amp; c);</span><br><span class="hljs-comment">    // 이렇게 해서 링킹 타임에 에러를 나게 만든다!</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 근데 이건 가독성이 떨어짐.</span><br>    <span class="hljs-comment">// 그래서 새 표준에선 다음과 같이 쓴다.</span><br>    Cursor(<span class="hljs-keyword">const</span> Cursor&amp; c) = <span class="hljs-keyword">delete</span>;<br>    Cursor&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Cursor&amp; c) = <span class="hljs-keyword">delete</span>;<br><br><br>    <span class="hljs-keyword">static</span> Mutex mutex;<br>    <span class="hljs-comment">// 고프 싱글톤</span><br>    <span class="hljs-keyword">static</span> Cursor* pInstance; <span class="hljs-comment">// 이건 단순한 선언에 불과하다.</span><br>    <span class="hljs-comment">// 초기화 해줘야함!</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// private에 정의만 하면 내부에서 복사 생성자를 호출 할 수 있다.</span><br>    <span class="hljs-comment">// 어떻게 막아야 할까?</span><br>    <span class="hljs-comment">// 컴파일 타임에선 함수가 있고 없고의 문제 보단 제대로 타입이 잘 들어 간건지 타입 체크만 한다.</span><br>    <span class="hljs-comment">// 링킹 타임에서 함수가 실제로 바인딩 될때 기계어가 없는걸 보고 에러를 나게 해야한다.</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        Cursor c;<br>        Cursor c1 = c;<br>        Cursor c2;<br>        c2 = c;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 2. 유일한 객체를 반환하기 위한 정적 인터페이스 도입</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Cursor* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> <span class="hljs-comment">// self in Android</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        static Cursor cursor; // 데이터 영역에 선언하는건 마이어&#x27;s 싱글톤</span><br><span class="hljs-comment">        // 이거보단 고프 싱글톤을 많이 씀. (힙에 선언)</span><br><span class="hljs-comment">        return &amp;cursor;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">// mutex.lock(); // 동적할당에 실패하면 예외 발생</span><br>        <span class="hljs-comment">// -&gt; unlock 호출이 안됨</span><br>        <span class="hljs-comment">// -&gt; Dead Lock 발생</span><br><br>        <span class="hljs-comment">// RAII (Resource Acquisition is Initialization)</span><br>        <span class="hljs-comment">// : 소멸될 때 자원을 획득하자! (?)</span><br>        <span class="hljs-function">AutoLock&lt;Mutex&gt; <span class="hljs-title">l</span><span class="hljs-params">(mutex)</span></span>; <span class="hljs-comment">// 생성자와 파괴자를 통해서 lock/unlock함</span><br>                                                            <span class="hljs-comment">// 예외 발생시 스택을 풀면서 나가는 성질을</span><br>                                                            <span class="hljs-comment">// 이용한 것이다. (Stack Unwinding)</span><br>                                                            <span class="hljs-comment">// 스택이 풀리면서 파괴자가 호출됨.</span><br>                                                            <span class="hljs-comment">// 이를 통해 Exception Safety를 보장</span><br>        <span class="hljs-keyword">if</span> (pInstance == <span class="hljs-number">0</span>)<br>            pInstance = <span class="hljs-keyword">new</span> Cursor;<br>        <span class="hljs-comment">// mutex.unlock();</span><br><br>        <span class="hljs-keyword">return</span> pInstance;<br>    &#125;<br>&#125;;<br>Cursor* Cursor::pInstance = <span class="hljs-number">0</span>; <span class="hljs-comment">// 초기화</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Cursor* c1 = Cursor::getInstance();<br>    Cursor* c2 = Cursor::getInstance();<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; &amp;c1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; &amp;c2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">//Cursor c3(*c1);</span><br>    <span class="hljs-comment">//Cursor c3 = *c1; // 복사 생성자들... 이놈들도 문제다!</span><br><br>    Cursor* c3;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; &amp;c3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="싱글톤을-이용한-NullLog-클래스-구현"><a href="#싱글톤을-이용한-NullLog-클래스-구현" class="headerlink" title="싱글톤을 이용한 NullLog 클래스 구현"></a>싱글톤을 이용한 NullLog 클래스 구현</h4><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ILog</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// Null 객체 확인을 위한 인터페이스를 제공해야 한다.</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">is_null</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NullLog</span> :</span> <span class="hljs-keyword">public</span> ILog<br>&#123;<br>    <span class="hljs-keyword">static</span> NullLog* pInstance;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> NullLog* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(pInstance == <span class="hljs-number">0</span>)<br>             pInstance = <span class="hljs-keyword">new</span> NullLog;<br><br>        <span class="hljs-keyword">return</span> pInstance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_null</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsoleLog</span> :</span> <span class="hljs-keyword">public</span> ILog<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Console: &quot;</span> &lt;&lt; msg &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileLog</span> :</span> <span class="hljs-keyword">public</span> ILog<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-built_in">string</span> msg)</span> </span>&#123; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Console:&quot;</span> &lt;&lt; msg &lt;&lt; <span class="hljs-built_in">endl</span>; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogService</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    ILog* pLog;<br><br>    LogService(ILog* p) &#123; pLog = p; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//...</span><br>        pLog-&gt;write(<span class="hljs-string">&quot;url error&quot;</span>);<br><br>        <span class="hljs-comment">//...</span><br>        pLog-&gt;write(<span class="hljs-string">&quot;File error&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    NullLog nullObj;<br>    <span class="hljs-function">LogService <span class="hljs-title">log</span><span class="hljs-params">(&amp;nullObj)</span></span>;<br>    <span class="hljs-built_in">log</span>.run();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>Null 포인터를 체크할 필요가 없다.</p>
<h2 id="아직-정리중"><a href="#아직-정리중" class="headerlink" title="아직 정리중"></a>아직 정리중</h2><h3 id="참고-추천-서적"><a href="#참고-추천-서적" class="headerlink" title="[참고] 추천 서적"></a>[참고] 추천 서적</h3><h4 id="Effective-C"><a href="#Effective-C" class="headerlink" title="Effective C++"></a>Effective C++</h4><p>C++ Refactoring을 배우고 싶으면 이 책을 봐라. C++에선 포인터가 있어서 할 말이 많지만, Java는 그렇지 않기 때문에 설계적인 측면의 내용을 주로 다룸.</p>
<h4 id="창시자의-책"><a href="#창시자의-책" class="headerlink" title="창시자의 책"></a>창시자의 책</h4><p>엄청 자세히 설명되어 있음. 1000 페이지 정도 된다.</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>refactoring</tag>
      </tags>
  </entry>
  <entry>
    <title>자바로 작성하는 기초 채팅 프로그램(핸들러)</title>
    <url>/2016/06/29/java/java-handler/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChatHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ChatServer cs;<br>    <span class="hljs-keyword">private</span> Socket so;<br>    <span class="hljs-keyword">private</span> BufferedReader br;<br>    <span class="hljs-keyword">private</span> PrintWriter pw;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChatHandler</span><span class="hljs-params">(ChatServer cs, Socket so)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.cs = cs;<br>        <span class="hljs-keyword">this</span>.so = so;<br>        br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(so.getInputStream()));<br>        pw = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(<br>                so.getOutputStream())));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        String name = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            name = br.readLine();<br>            cs.register(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 벡터에 등록</span><br>            cs.broadcast(name + <span class="hljs-string">&quot;님이 입장하셨습니다...&quot;</span>);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                String data = br.readLine();<br>                <span class="hljs-keyword">if</span> (data == <span class="hljs-keyword">null</span> || data.toLowerCase().equals(<span class="hljs-string">&quot;quit&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br><br>                cs.broadcast(<span class="hljs-string">&quot;[&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span> + data);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException io) &#123;<br>            io.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// -------------</span><br><br>        cs.unregister(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 벡테에서 제거</span><br>        cs.broadcast(name + <span class="hljs-string">&quot;님이 퇴장하셨습니다..&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            br.close();<br>            pw.close();<br>            so.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException io) &#123;<br>            io.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title">getPrintWriter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pw;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>자바로 작성하는 기초 채팅 프로그램(클라이언트)</title>
    <url>/2016/06/29/java/java-client/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChatClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span>, <span class="hljs-title">Runnable</span> </span>&#123;<br>    JTextArea output;<br>    JTextField input;<br>    JButton send;<br>    Socket socket;<br>    BufferedReader br;<br>    PrintWriter pw;<br>    Thread t;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        output = <span class="hljs-keyword">new</span> JTextArea();<br>        input = <span class="hljs-keyword">new</span> JTextField();<br>        send = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;보내기&quot;</span>);<br>        JPanel p = <span class="hljs-keyword">new</span> JPanel();<br><br>        JScrollPane pane = <span class="hljs-keyword">new</span> JScrollPane(output);<br>        getContentPane().add(<span class="hljs-string">&quot;Center&quot;</span>, pane);<br>        output.setEditable(<span class="hljs-keyword">false</span>); <span class="hljs-comment">// 편집불가능</span><br><br>        p.setLayout(<span class="hljs-keyword">new</span> BorderLayout());<br>        p.add(<span class="hljs-string">&quot;Center&quot;</span>, input);<br>        p.add(<span class="hljs-string">&quot;East&quot;</span>, send);<br><br>        <span class="hljs-keyword">this</span>.add(<span class="hljs-string">&quot;South&quot;</span>, p);<br><br>        <span class="hljs-comment">// Frame</span><br>        setBounds(<span class="hljs-number">400</span>, <span class="hljs-number">80</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>);<br>        setTitle(<span class="hljs-string">&quot;채팅창&quot;</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><br>        <span class="hljs-keyword">this</span>.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<span class="hljs-comment">// 익명 Inner Class</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<span class="hljs-comment">// Override</span><br>                pw.println(<span class="hljs-string">&quot;quit&quot;</span>); <span class="hljs-comment">// 서버 보내기</span><br>                pw.flush();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    br.close();<br>                    pw.close();<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException io) &#123;<br>                    io.printStackTrace();<br>                &#125;<br><br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 이벤트</span><br>        input.addActionListener(<span class="hljs-keyword">this</span>);<br>        send.addActionListener(<span class="hljs-keyword">this</span>);<br><br>        <span class="hljs-comment">// 소켓(IO)생성</span><br>        String serverIP = JOptionPane.showInputDialog(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;서버의 IP를 입력하세요&quot;</span>,<br>                <span class="hljs-string">&quot;서버IP&quot;</span>, JOptionPane.QUESTION_MESSAGE);<br>        <span class="hljs-keyword">if</span> (serverIP == <span class="hljs-keyword">null</span> || serverIP.equals(<span class="hljs-string">&quot;&quot;</span>))<br>            System.exit(<span class="hljs-number">0</span>);<br>        String name = JOptionPane.showInputDialog(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;대화명을 입력하세요&quot;</span>, <span class="hljs-string">&quot;대화명&quot;</span>,<br>                JOptionPane.QUESTION_MESSAGE);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-keyword">null</span> || name.equals(<span class="hljs-string">&quot;&quot;</span>))<br>            name = <span class="hljs-string">&quot;방문자&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socket = <span class="hljs-keyword">new</span> Socket(serverIP, <span class="hljs-number">9500</span>);<span class="hljs-comment">// 서버IP, 포트번호</span><br><br>            <span class="hljs-comment">// IO</span><br>            br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(<br>                    socket.getInputStream()));<br>            pw = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(<br>                    socket.getOutputStream()));<br><br>            <span class="hljs-comment">// 서버 보내기 - 대화명</span><br>            pw.println(name);<br>            pw.flush();<span class="hljs-comment">// 버퍼 비우기</span><br>            t = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>);<span class="hljs-comment">// 쓰레드 생성</span><br>            t.start();<span class="hljs-comment">// 쓰레드 시작-&gt;쓰레드 실행(run())</span><br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;소캣생성시 error : &quot;</span> + e.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException io) &#123;<br>            System.out.println(<span class="hljs-string">&quot;소캣생성시 IO error : &quot;</span> + io.toString());<br>        &#125;<br>    &#125;<span class="hljs-comment">// init()</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        String data = input.getText();<br>        pw.println(data);<br>        pw.flush();<br>        input.setText(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<span class="hljs-comment">// actionPerformed()</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 쓰레드 구현</span><br>        String data = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                data = br.readLine();<br>                <span class="hljs-keyword">if</span> (data == <span class="hljs-keyword">null</span> || data.toLowerCase().equals(<span class="hljs-string">&quot;quit&quot;</span>)) &#123;<br>                    br.close();<br>                    pw.close();<br>                    socket.close();<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<span class="hljs-comment">// if</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException io) &#123;<br>                io.printStackTrace();<br>            &#125;<br><br>            output.append(data + <span class="hljs-string">&quot;\n&quot;</span>);<br><br>            <span class="hljs-keyword">int</span> position = output.getText().length();<span class="hljs-comment">// 위치값 얻기</span><br>            output.setCaretPosition(position);<br>        &#125;<span class="hljs-comment">// while</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ChatClient().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>자바로 작성하는 기초 채팅 프로그램(서버)</title>
    <url>/2016/06/29/java/java-server/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChatServer</span> </span>&#123;<br>    ServerSocket ss;<br>    Vector&lt;ChatHandler&gt; v = <span class="hljs-keyword">new</span> Vector&lt;ChatHandler&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChatServer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9500</span>);<br>            System.out.println(<span class="hljs-string">&quot;서버준비완료...&quot;</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                Socket so = ss.accept();<span class="hljs-comment">// 클라이어트를 낚아챈다</span><br>                ChatHandler ch = <span class="hljs-keyword">new</span> ChatHandler(<span class="hljs-keyword">this</span>, so);<br>                ch.start();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (java.io.IOException io) &#123;<br>            io.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(ChatHandler ch)</span> </span>&#123;<br>        v.add(ch);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unregister</span><span class="hljs-params">(ChatHandler ch)</span> </span>&#123;<br>        v.remove(ch);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">broadcast</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        Iterator&lt;ChatHandler&gt; it = v.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            <span class="hljs-comment">// ChatHandler ch = (ChatHandler)it.next();</span><br>            ChatHandler ch = it.next();<br>            ch.getPrintWriter().println(msg);<br>            ch.getPrintWriter().flush();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ChatServer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>python-1</title>
    <url>/2016/08/15/pythonbasic/python-1/</url>
    <content><![CDATA[<h2 id="문제-1-1-파이썬을-여러분의-윈도우-환경에-설치해-보시기-바랍니다"><a href="#문제-1-1-파이썬을-여러분의-윈도우-환경에-설치해-보시기-바랍니다" class="headerlink" title="문제 1-1 파이썬을 여러분의 윈도우 환경에 설치해 보시기 바랍니다."></a>문제 1-1 파이썬을 여러분의 윈도우 환경에 설치해 보시기 바랍니다.</h2><h2 id="문제-1-2-파이썬-IDLE를-실행한-후-화면에-‘주식은-대박이다-’라는-글자를-출력해-보세요"><a href="#문제-1-2-파이썬-IDLE를-실행한-후-화면에-‘주식은-대박이다-’라는-글자를-출력해-보세요" class="headerlink" title="문제 1-2 파이썬 IDLE를 실행한 후 화면에 ‘주식은 대박이다.’라는 글자를 출력해 보세요."></a>문제 1-2 파이썬 IDLE를 실행한 후 화면에 ‘주식은 대박이다.’라는 글자를 출력해 보세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;주식은 대박이다&#x27;</span>)<br></code></pre></td></tr></table></figure>

<pre><code>주식은 대박이다</code></pre>
<h2 id="문제-1-3-파이썬에서-콘솔에-어떤-값을-출력할-때-사용하는-키워드-keyword-는-무엇인가요"><a href="#문제-1-3-파이썬에서-콘솔에-어떤-값을-출력할-때-사용하는-키워드-keyword-는-무엇인가요" class="headerlink" title="문제 1-3 파이썬에서 콘솔에 어떤 값을 출력할 때 사용하는 키워드 (keyword) 는 무엇인가요?"></a>문제 1-3 파이썬에서 콘솔에 어떤 값을 출력할 때 사용하는 키워드 (keyword) 는 무엇인가요?</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print()<br></code></pre></td></tr></table></figure>

<h2 id="문제-1-4-다음-네-가지의-파이썬-표현-중-정상적으로-화면에-값이-출력되는-것을-고르시오"><a href="#문제-1-4-다음-네-가지의-파이썬-표현-중-정상적으로-화면에-값이-출력되는-것을-고르시오" class="headerlink" title="문제 1-4 다음 네 가지의 파이썬 표현 중 정상적으로 화면에 값이 출력되는 것을 고르시오."></a>문제 1-4 다음 네 가지의 파이썬 표현 중 정상적으로 화면에 값이 출력되는 것을 고르시오.</h2><pre><code>1. print(&quot;I love &#39;you&#39;&quot;)
2. print(&quot;I like you&#39;)
3. print(&#39;Korea&#39;)
4. print&#123;Hello&#125;
5. print[Hello]</code></pre>
<p>정답 : 1, 3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&quot;I love &#x27;you&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure>

<pre><code>I love &#39;you&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&quot;I like you&#x27;)</span><br></code></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-5-79a4903821e7&gt;&quot;, line 1
    print(&quot;I like you&#39;)
                       ^
SyntaxError: EOL while scanning string literal</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;Korea&#x27;</span>)<br></code></pre></td></tr></table></figure>

<pre><code>Korea</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>&#123;Hello&#125;<br></code></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-8-5872fa8e1998&gt;&quot;, line 1
    print&#123;Hello&#125;
         ^
SyntaxError: invalid syntax</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>[Hello]<br></code></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-9-907276cde8db&gt; in &lt;module&gt;()
----&gt; 1 print[Hello]


NameError: name &#39;Hello&#39; is not defined</code></pre>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-2</title>
    <url>/2016/08/15/pythonbasic/python-2/</url>
    <content><![CDATA[<h2 id="문제-2-1-다음-Daum-의-주가가-89-000원이고-네이버-Naver-의-주가가-751-000-이라고-가정하고-어떤-사람이-다음의-주식-100주와-네이버의-주식-20주를-가지고-있을-때-그-사람이-가지고-있는-주식의-총액을-계산하는-프로그램을-작성하세요"><a href="#문제-2-1-다음-Daum-의-주가가-89-000원이고-네이버-Naver-의-주가가-751-000-이라고-가정하고-어떤-사람이-다음의-주식-100주와-네이버의-주식-20주를-가지고-있을-때-그-사람이-가지고-있는-주식의-총액을-계산하는-프로그램을-작성하세요" class="headerlink" title="문제 2-1 다음 (Daum)의 주가가 89,000원이고 네이버 (Naver)의 주가가 751,000 이라고 가정하고, 어떤 사람이 다음의 주식 100주와 네이버의 주식 20주를 가지고 있을 때 그 사람이 가지고 있는 주식의 총액을 계산하는 프로그램을 작성하세요."></a>문제 2-1 다음 (Daum)의 주가가 89,000원이고 네이버 (Naver)의 주가가 751,000 이라고 가정하고, 어떤 사람이 다음의 주식 100주와 네이버의 주식 20주를 가지고 있을 때 그 사람이 가지고 있는 주식의 총액을 계산하는 프로그램을 작성하세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">daum = <span class="hljs-number">89000</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver = <span class="hljs-number">751000</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(daum * <span class="hljs-number">100</span> + naver * <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure>

<pre><code>23920000</code></pre>
<h2 id="문제-2-2-위의-총액에서-다음과-네이버의-주가가-각각-5-10-하락한-경우에-손실액을-구하는-프로그램을-작성하시기-바랍니다"><a href="#문제-2-2-위의-총액에서-다음과-네이버의-주가가-각각-5-10-하락한-경우에-손실액을-구하는-프로그램을-작성하시기-바랍니다" class="headerlink" title="문제 2-2 위의 총액에서 다음과 네이버의 주가가 각각 5%, 10% 하락한 경우에 손실액을 구하는 프로그램을 작성하시기 바랍니다."></a>문제 2-2 위의 총액에서 다음과 네이버의 주가가 각각 5%, 10% 하락한 경우에 손실액을 구하는 프로그램을 작성하시기 바랍니다.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">daum = daum * <span class="hljs-number">0.05</span> * <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver = naver * <span class="hljs-number">0.1</span> * <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver + daum<br></code></pre></td></tr></table></figure>




<pre><code>1947000.0</code></pre>
<h2 id="문제-2-3-오늘의-날씨를-보면-우리나라는-섭씨-온도를-사용하는-반면-미국와-유럽은-화씨-온도를-주로-사용합니다-화씨-온도-F-를-섭씨-온도-C-간에는-다음과-같은-공식이-있습니다-이-공식을-사용하여-화씨-온도가-50일-때-섭씨-온도를-계산해보시기-바랍니다"><a href="#문제-2-3-오늘의-날씨를-보면-우리나라는-섭씨-온도를-사용하는-반면-미국와-유럽은-화씨-온도를-주로-사용합니다-화씨-온도-F-를-섭씨-온도-C-간에는-다음과-같은-공식이-있습니다-이-공식을-사용하여-화씨-온도가-50일-때-섭씨-온도를-계산해보시기-바랍니다" class="headerlink" title="문제 2-3 오늘의 날씨를 보면 우리나라는 섭씨 온도를 사용하는 반면, 미국와 유럽은 화씨 온도를 주로 사용합니다. 화씨 온도 (F)를 섭씨 온도 (C) 간에는 다음과 같은 공식이 있습니다. 이 공식을 사용하여 화씨 온도가 50일 때 섭씨 온도를 계산해보시기 바랍니다."></a>문제 2-3 오늘의 날씨를 보면 우리나라는 섭씨 온도를 사용하는 반면, 미국와 유럽은 화씨 온도를 주로 사용합니다. 화씨 온도 (F)를 섭씨 온도 (C) 간에는 다음과 같은 공식이 있습니다. 이 공식을 사용하여 화씨 온도가 50일 때 섭씨 온도를 계산해보시기 바랍니다.</h2><p>$$ C = \frac{(F-32)}{1.8} $$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">F = <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">(F-<span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br></code></pre></td></tr></table></figure>




<pre><code>10.0</code></pre>
<h2 id="문제-2-4-화면에-“pizza-“를-10번-출력하는-프로그램을-작성하세요"><a href="#문제-2-4-화면에-“pizza-“를-10번-출력하는-프로그램을-작성하세요" class="headerlink" title="문제 2-4 화면에 “pizza “를 10번 출력하는 프로그램을 작성하세요."></a>문제 2-4 화면에 “pizza “를 10번 출력하는 프로그램을 작성하세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;pizza\n&#x27;</span> * <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure>

<pre><code>pizza
pizza
pizza
pizza
pizza
pizza
pizza
pizza
pizza
pizza</code></pre>
<h2 id="문제-2-5-월요일에-네이버의-주가가-100만원으로-시작하여-3일-연속으로-하한가-30-를-기록했을-때-수요일의-종가를-계산해보세요"><a href="#문제-2-5-월요일에-네이버의-주가가-100만원으로-시작하여-3일-연속으로-하한가-30-를-기록했을-때-수요일의-종가를-계산해보세요" class="headerlink" title="문제 2-5 월요일에 네이버의 주가가 100만원으로 시작하여, 3일 연속으로 하한가 (-30%)를 기록했을 때 수요일의 종가를 계산해보세요."></a>문제 2-5 월요일에 네이버의 주가가 100만원으로 시작하여, 3일 연속으로 하한가 (-30%)를 기록했을 때 수요일의 종가를 계산해보세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver = <span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver = naver * <span class="hljs-number">0.7</span> * <span class="hljs-number">0.7</span> * <span class="hljs-number">0.7</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver<br></code></pre></td></tr></table></figure>




<pre><code>342999.99999999994</code></pre>
<h2 id="문제-2-6-아래의-포맷과-같이-이름-생년월일-주민등록번호를-출력하는-프로그램을-작성해보세요-이름-파이썬-생년월일-2014년-12월-12일-주민등록번호-20141212-1623210"><a href="#문제-2-6-아래의-포맷과-같이-이름-생년월일-주민등록번호를-출력하는-프로그램을-작성해보세요-이름-파이썬-생년월일-2014년-12월-12일-주민등록번호-20141212-1623210" class="headerlink" title="문제 2-6 아래의 포맷과 같이 이름, 생년월일, 주민등록번호를 출력하는 프로그램을 작성해보세요. 이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210"></a>문제 2-6 아래의 포맷과 같이 이름, 생년월일, 주민등록번호를 출력하는 프로그램을 작성해보세요. 이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210&#x27;</span>)<br></code></pre></td></tr></table></figure>

<pre><code>이름: 파이썬 생년월일: 2014년 12월 12일 주민등록번호: 20141212-1623210</code></pre>
<h2 id="문제-2-7-문자열의-슬라이싱-기능-그리고-연결하기를-이용하여-s-‘Daum-KaKao’를-‘KaKao-Daum’으로-변경해-보세요"><a href="#문제-2-7-문자열의-슬라이싱-기능-그리고-연결하기를-이용하여-s-‘Daum-KaKao’를-‘KaKao-Daum’으로-변경해-보세요" class="headerlink" title="문제 2-7 문자열의 슬라이싱 기능 그리고 연결하기를 이용하여 s = ‘Daum KaKao’를 ‘KaKao Daum’으로 변경해 보세요."></a>문제 2-7 문자열의 슬라이싱 기능 그리고 연결하기를 이용하여 s = ‘Daum KaKao’를 ‘KaKao Daum’으로 변경해 보세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;Daum KaKao&#x27;</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(s[<span class="hljs-number">5</span>:] + s[:<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure>

<pre><code>KaKaoDaum</code></pre>
<h2 id="문제-2-8-a-‘hello-world’가-있을-때-이를-‘hi-world’로-변경해-보세요"><a href="#문제-2-8-a-‘hello-world’가-있을-때-이를-‘hi-world’로-변경해-보세요" class="headerlink" title="문제 2-8 a = ‘hello world’가 있을 때 이를 ‘hi world’로 변경해 보세요."></a>문제 2-8 a = ‘hello world’가 있을 때 이를 ‘hi world’로 변경해 보세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;hi &#x27;</span> + s[<span class="hljs-number">6</span>:]<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a<br></code></pre></td></tr></table></figure>




<pre><code>&#39;hi world&#39;</code></pre>
<h2 id="문제-2-9-x-‘abcdef’를-‘bcdefa’로-변경해-보세요"><a href="#문제-2-9-x-‘abcdef’를-‘bcdefa’로-변경해-보세요" class="headerlink" title="문제 2-9 x = ‘abcdef’를 ‘bcdefa’로 변경해 보세요."></a>문제 2-9 x = ‘abcdef’를 ‘bcdefa’로 변경해 보세요.</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">&#x27;abcdef&#x27;</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">x[<span class="hljs-number">1</span>:] + x[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure>




<pre><code>&#39;bcdefa&#39;</code></pre>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-3</title>
    <url>/2016/08/15/pythonbasic/python-3/</url>
    <content><![CDATA[<h2 id="문제-3-1"><a href="#문제-3-1" class="headerlink" title="문제 3-1"></a>문제 3-1</h2><p>2015년 9월 초의 네이버 종가는 표 3.2와 같습니다. 09/07의 종가가 리스트의 처음으로 입력하여 ‘naver_end_price’라는 이름의 리스트를 만들어보세요.</p>
<table>
<thead>
<tr>
<th align="center">날짜</th>
<th align="center">종가</th>
</tr>
</thead>
<tbody><tr>
<td align="center">09/11</td>
<td align="center">488,500</td>
</tr>
<tr>
<td align="center">09/10</td>
<td align="center">500,500</td>
</tr>
<tr>
<td align="center">09/09</td>
<td align="center">501,000</td>
</tr>
<tr>
<td align="center">09/08</td>
<td align="center">461,500</td>
</tr>
<tr>
<td align="center">09/07</td>
<td align="center">474,500</td>
</tr>
<tr>
<td align="center">표 3.2 네이버 종가</td>
<td align="center"></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver_end_price = [<span class="hljs-number">474500</span>, <span class="hljs-number">461500</span>, <span class="hljs-number">501000</span>, <span class="hljs-number">500500</span>, <span class="hljs-number">488500</span>]<br></code></pre></td></tr></table></figure>

<h2 id="문제-3-2"><a href="#문제-3-2" class="headerlink" title="문제 3-2"></a>문제 3-2</h2><p>문제 3-1에서 만든 ‘naver_end_price’를 이용하여 해당 주에 종가를 기준으로 가장 높았던 가격을 화면에 출력하세요. (힌트: 리스트에서 최댓값을 찾는 함수는 max( )이고, 화면 출력은 print( ) 입니다.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-built_in">max</span>(naver_end_price))<br></code></pre></td></tr></table></figure>

<pre><code>501000</code></pre>
<h2 id="문제-3-3"><a href="#문제-3-3" class="headerlink" title="문제 3-3"></a>문제 3-3</h2><p>문제 3-1에서 만든 ‘naver_end_price’를 이용하여 해당 주에 종가를 기준으로 가장 낮았던 가격을 화면에 출력하세요. (힌트: 리스트에서 최솟값을 찾는 함수는 min( )이고, 화면 출력은 print( ) 입니다.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-built_in">min</span>(naver_end_price))<br></code></pre></td></tr></table></figure>

<pre><code>461500</code></pre>
<h2 id="문제-3-4"><a href="#문제-3-4" class="headerlink" title="문제 3-4"></a>문제 3-4</h2><p>문제 3-1에서 만든 ‘naver_end_price’를 이용하여 해당 주에서 가장 종가가 높았던 요일과 가장 종가가 낮았던 요일의 가격 차를 화면에 출력하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-built_in">max</span>(naver_end_price) - <span class="hljs-built_in">min</span>(naver_end_price))<br></code></pre></td></tr></table></figure>

<pre><code>39500</code></pre>
<h2 id="문제-3-5"><a href="#문제-3-5" class="headerlink" title="문제 3-5"></a>문제 3-5</h2><p>문제 3-1에서 만든 ‘naver_end_price’를 이용하여 수요일의 종가를 화면에 출력하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(naver_end_price[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure>

<pre><code>501000</code></pre>
<h2 id="문제-3-6"><a href="#문제-3-6" class="headerlink" title="문제 3-6"></a>문제 3-6</h2><p>문제 3-1의 표 3.2를 이용하여 날짜를 딕셔너리의 key 값으로, 종가를 딕셔너리의 value 값으로 하여 ‘naver_end_price2’ 라는 딕셔너리를 생성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">naver_end_price2 = &#123;<span class="hljs-string">&#x27;09/07&#x27;</span>:<span class="hljs-number">474500</span>, <span class="hljs-string">&#x27;09/08&#x27;</span>:<span class="hljs-number">461500</span>, <span class="hljs-string">&#x27;09/09&#x27;</span>:<span class="hljs-number">501000</span>, <span class="hljs-string">&#x27;09/10&#x27;</span>:<span class="hljs-number">500500</span>, <span class="hljs-string">&#x27;09/11&#x27;</span>:<span class="hljs-number">488500</span> &#125;<br></code></pre></td></tr></table></figure>

<h2 id="문제-3-7"><a href="#문제-3-7" class="headerlink" title="문제 3-7"></a>문제 3-7</h2><p>문제 3-7에서 생성한 ‘naver_end_price2’ 딕셔너리를 이용하여 ‘09/09’일 종가를 출력하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(naver_end_price2[<span class="hljs-string">&#x27;09/09&#x27;</span>])<br></code></pre></td></tr></table></figure>

<pre><code>501000</code></pre>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-4</title>
    <url>/2016/08/15/pythonbasic/python-4/</url>
    <content><![CDATA[<h2 id="문제-4-1"><a href="#문제-4-1" class="headerlink" title="문제 4-1"></a>문제 4-1</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요. 참고로 print(‘’, end=’’)와 같이 print 함수를 사용하면 줄 바뀜이 없이 화면 출력이 가능합니다.<br>    *****</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>

<pre><code>*****</code></pre>
<h2 id="문제-4-2"><a href="#문제-4-2" class="headerlink" title="문제 4-2"></a>문제 4-2</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요. (힌트: 이중 루프 사용)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*****<br>*****<br>*****<br>*****<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>

<pre><code>*****
*****
*****
*****</code></pre>
<h2 id="문제-4-3"><a href="#문제-4-3" class="headerlink" title="문제 4-3"></a>문제 4-3</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*<br>**<br>***<br>****<br>*****<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i+<span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>

<pre><code>*
**
***
****
*****</code></pre>
<h2 id="문제-4-4"><a href="#문제-4-4" class="headerlink" title="문제 4-4"></a>문제 4-4</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*****<br>****<br>***<br>**<br>*<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">5</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>

<pre><code>*****
****
***
**
*</code></pre>
<h2 id="문제-4-5"><a href="#문제-4-5" class="headerlink" title="문제 4-5"></a>문제 4-5</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">    *<br>   **<br>  ***<br> ****<br>*****<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>        print(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i+<span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>

<pre><code>    *
   **
  ***
 ****
*****</code></pre>
<h2 id="문제-4-6"><a href="#문제-4-6" class="headerlink" title="문제 4-6"></a>문제 4-6</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*****<br> ****<br>  ***<br>   **<br>    *<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i):<br>        print(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">5</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>

<pre><code>*****
 ****
  ***
   **
    *</code></pre>
<h2 id="문제-4-7"><a href="#문제-4-7" class="headerlink" title="문제 4-7"></a>문제 4-7</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">    *<br>   ***<br>  *****<br> *******<br>*********<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (i+<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>        print(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>, i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>

<pre><code>    *
   ***
  *****
 *******
*********</code></pre>
<h2 id="문제-4-8"><a href="#문제-4-8" class="headerlink" title="문제 4-8"></a>문제 4-8</h2><p>아래와 같은 패턴의 별(*)을 출력하는 프로그램을 작성해보세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*********<br> *******<br>  *****<br>   ***<br>    *<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i):<br>        print(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, (<span class="hljs-number">5</span>-i)*<span class="hljs-number">2</span>-<span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>

<pre><code>*********
 *******
  *****
   ***
    *</code></pre>
<h2 id="문제-4-9"><a href="#문제-4-9" class="headerlink" title="문제 4-9"></a>문제 4-9</h2><p>예제 4.41을 참조하여 이중 루프를 활용하여 신문 배달을 하는 프로그램을 작성하세요. 단, 아래에서 arrears 리스트는 신문 구독료가 미납된 세대에 대한 정보를 포함하고 있는데, 해당 세대에는 신문을 배달하지 않아야 합니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&gt;&gt;&gt; apart &#x3D; [[101, 102, 103, 104],[201, 202, 203, 204],[301, 302, 303, 304], [401, 402, 403, 404]]<br>&gt;&gt;&gt; arrears &#x3D; [101, 203, 301, 404]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">apart = [[<span class="hljs-number">101</span>, <span class="hljs-number">102</span>, <span class="hljs-number">103</span>, <span class="hljs-number">104</span>],[<span class="hljs-number">201</span>, <span class="hljs-number">202</span>, <span class="hljs-number">203</span>, <span class="hljs-number">204</span>],[<span class="hljs-number">301</span>, <span class="hljs-number">302</span>, <span class="hljs-number">303</span>, <span class="hljs-number">304</span>], [<span class="hljs-number">401</span>, <span class="hljs-number">402</span>, <span class="hljs-number">403</span>, <span class="hljs-number">404</span>]]<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arrears = [<span class="hljs-number">101</span>, <span class="hljs-number">203</span>, <span class="hljs-number">301</span>, <span class="hljs-number">404</span>]<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> apart:<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-keyword">if</span> y <span class="hljs-keyword">in</span> arrears:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&quot;Newspaper delivery: &quot;</span>, y)<br></code></pre></td></tr></table></figure>

<pre><code>Newspaper delivery:  102
Newspaper delivery:  103
Newspaper delivery:  104
Newspaper delivery:  201
Newspaper delivery:  202
Newspaper delivery:  204
Newspaper delivery:  302
Newspaper delivery:  303
Newspaper delivery:  304
Newspaper delivery:  401
Newspaper delivery:  402
Newspaper delivery:  403</code></pre>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-5</title>
    <url>/2016/08/15/pythonbasic/python-5/</url>
    <content><![CDATA[<h2 id="문제-5-1"><a href="#문제-5-1" class="headerlink" title="문제 5-1"></a>문제 5-1</h2><p>두 개의 정수 값을 받아서 두 값의 평균을 구하는 함수를 작성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mysum</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-comment"># 함수 구현</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mysum</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-keyword">return</span> (a+b) / <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">mysum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>




<pre><code>1.5</code></pre>
<h2 id="문제-5-2"><a href="#문제-5-2" class="headerlink" title="문제 5-2"></a>문제 5-2</h2><p>함수의 인자로 리스트를 받은 후 리스트 내에 있는 모든 정수 값에 대한 최댓값과 최솟값을 리턴하는 함수를 작성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_max_min</span>(<span class="hljs-params">data_list</span>):</span><br>    <span class="hljs-comment"># 함수 구현</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_max_min</span>(<span class="hljs-params">data_list</span>):</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">max</span>(data_list), <span class="hljs-built_in">min</span>(data_list))<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">max_v, min_v = get_max_min([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(max_v)<br></code></pre></td></tr></table></figure>

<pre><code>6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(min_v)<br></code></pre></td></tr></table></figure>

<pre><code>1</code></pre>
<h2 id="문제-5-3"><a href="#문제-5-3" class="headerlink" title="문제 5-3"></a>문제 5-3</h2><p>절대 경로를 입력 받은 후 해당 경로에 있는 *.txt 파일의 리스트 리턴하는 함수를 작성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_txt_list</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-comment"># 함수 구현</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_txt_list</span>(<span class="hljs-params">path</span>):</span><br>    osg_list = os.listdir(path)<br>    ret_list = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> osg_list:<br>        <span class="hljs-keyword">if</span> x.endswith(<span class="hljs-string">&#x27;txt&#x27;</span>):<br>            ret_list.append(x)<br>    <span class="hljs-keyword">return</span> ret_list<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">get_txt_list(<span class="hljs-string">&#x27;/root&#x27;</span>)<br></code></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<h2 id="문제-5-4"><a href="#문제-5-4" class="headerlink" title="문제 5-4"></a>문제 5-4</h2><p>체질량 지수 (Body Mass Index, BMI)는 인간의 비만도를 나타내는 지수로 체중과 키의 관계로 아래의 수식에 의해 계산됩니다. 여기서 중요한 점은 체중의 단위는 킬로그램 (kg)이고 신장의 단위는 미터 (m)라는 점입니다.</p>
<p>$BMI=체중(kg) / 신장(m)^2$</p>
<p>일반적으로 BMI 값에 따라서 다음과 같이 체형을 분류하고 있습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">BMI &lt;18.5, 마른체형<br>18.5 &lt;&#x3D; BMI &lt; 25.0, 표준<br>25.0 &lt;&#x3D; BMI &lt; 30.0, 비만<br>BMI &gt;&#x3D; 30.0, 고도 비만<br></code></pre></td></tr></table></figure>
<p>함수의 인자로 체중 (kg)과 신장 (cm)을 받은 후 BMI 값에 따라 ‘마른체형’, ‘표준’, ‘비만’, ‘고도 비만’ 중 하나의 상태를 출력하는 함수를 작성해보세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Cal_BMI</span>(<span class="hljs-params">weight, height</span>):</span><br>    height = height * <span class="hljs-number">0.01</span><br>    bmi = weight / (height * height)<br>    <span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>        print(<span class="hljs-string">&#x27;마른체형&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt; <span class="hljs-number">25.0</span>:<br>        print(<span class="hljs-string">&#x27;표준&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">25.0</span> &lt;= bmi &lt; <span class="hljs-number">30.0</span>:<br>        print(<span class="hljs-string">&#x27;비만&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;고도비만&#x27;</span>)<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Cal_BMI(<span class="hljs-number">63</span>, <span class="hljs-number">170</span>)<br></code></pre></td></tr></table></figure>

<pre><code>표준</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Cal_BMI(<span class="hljs-number">79</span>, <span class="hljs-number">160</span>)<br></code></pre></td></tr></table></figure>

<pre><code>고도비만</code></pre>
<h2 id="문제-5-5"><a href="#문제-5-5" class="headerlink" title="문제 5-5"></a>문제 5-5</h2><p>사용자로부터 키 (cm)와 몸무게 (kg)을 입력 받은 후 BMI 값과 BMI 값에 따른 체형 정보를 화면에 출력하는 프로그램을 작성해보세요. 파이썬에서 사용자로부터의 입력은 input() 함수를 사용하며, 작성된 프로그램은 계속해서 사용자로부터 키와 몸무게를 입력 받은 후 BMI 및 체형 정보를 출력해야 합니다. (무한 루프 구조)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Cal_BMI_2</span>(<span class="hljs-params">weight, height</span>):</span><br>    height = height * <span class="hljs-number">0.01</span><br>    bmi = weight / (height * height)<br>    print(<span class="hljs-string">&quot;BMI : &quot;</span>, bmi)<br>    <span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>        print(<span class="hljs-string">&#x27;마른체형&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt; <span class="hljs-number">25.0</span>:<br>        print(<span class="hljs-string">&#x27;표준&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">25.0</span> &lt;= bmi &lt; <span class="hljs-number">30.0</span>:<br>        print(<span class="hljs-string">&#x27;비만&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;고도비만&#x27;</span>)<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">h = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Height (cm) :&#x27;</span>)<br>w = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Weight (kg) :&#x27;</span>)<br>Cal_BMI_2(<span class="hljs-built_in">float</span>(w), <span class="hljs-built_in">float</span>(h))<br></code></pre></td></tr></table></figure>

<pre><code>Height (cm) :170.0
Weight (kg) :63.0
BMI :  21.79930795847751
표준</code></pre>
<h2 id="문제-5-6"><a href="#문제-5-6" class="headerlink" title="문제 5-6"></a>문제 5-6</h2><p>삼각형의 밑변과 높이를 입력 받은 후 삼각형의 면적을 계산하는 함수를 작성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_triangle_area</span>(<span class="hljs-params">width, height</span>):</span><br>    <span class="hljs-comment"># 함수 구현</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_triangle_area</span>(<span class="hljs-params">width, height</span>):</span><br>    <span class="hljs-keyword">return</span> width * height / <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">get_triangle_area(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure>




<pre><code>25.0</code></pre>
<h2 id="문제-5-7"><a href="#문제-5-7" class="headerlink" title="문제 5-7"></a>문제 5-7</h2><p>함수의 인자로 시작과 끝 숫자가 주어질 때 시작부터 끝까지의 모든 정수값의 합을 리턴하는 함수를 작성하세요. (시작값과 끝값을 포함)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mysum2</span>(<span class="hljs-params">start, end</span>):</span><br>    <span class="hljs-comment"># 함수 구현</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mysum2</span>(<span class="hljs-params">start, end</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(start, end+<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">mysum2(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure>




<pre><code>55</code></pre>
<h2 id="문제-5-8"><a href="#문제-5-8" class="headerlink" title="문제 5-8"></a>문제 5-8</h2><p>함수의 인자로 문자열을 포함하는 리스트가 입력될 때 각 문자열의 첫 세글자로만 구성된 리스트를 리턴하는 함수를 작성하세요. 예를 들어 함수의 입력으로 [‘Seoul’, ‘Daegu’, ‘Kwangju’, ‘Jeju’]가 입력될 때 함수의 리턴 값은 [‘Seo’, ‘Dae’, ‘Kwa’, ‘Jej’] 입니다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_Abbr</span>(<span class="hljs-params">data_list</span>):</span><br>    ret = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data_list:<br>        ret.append(x[:<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">get_Abbr([<span class="hljs-string">&#x27;Seoul&#x27;</span>, <span class="hljs-string">&#x27;Daegu&#x27;</span>, <span class="hljs-string">&#x27;Kwangju&#x27;</span>, <span class="hljs-string">&#x27;Jeju&#x27;</span>])<br></code></pre></td></tr></table></figure>




<pre><code>[&#39;Seo&#39;, &#39;Dae&#39;, &#39;Kwa&#39;, &#39;Jej&#39;]</code></pre>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-6</title>
    <url>/2016/08/16/pythonbasic/python-6/</url>
    <content><![CDATA[<h2 id="문제-6-1"><a href="#문제-6-1" class="headerlink" title="문제 6-1"></a>문제 6-1</h2><p>다음의 조건을 만족하는 Point라는 클래스를 작성하세요.</p>
<ul>
<li>  Point 클래스는 생성자를 통해 (x, y) 좌표를 입력받는다.</li>
<li>  setx(x), sety(y) 메소드를 통해서 x와 y 좌표를 따로 입력받을 수도 있다.</li>
<li>  get() 메소드를 호출하면 튜플로 구성된 (x, y) 좌표를 리턴한다.</li>
<li>  move(dx, dy) 메소드는 현재 좌표를 dx, dy 만큼 이동시킨다.</li>
<li>  모든 메소드는 인스턴스 메소드이다.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x, y</span>):</span><br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setx</span>(<span class="hljs-params">self, x</span>):</span><br>        self.x = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sety</span>(<span class="hljs-params">self, y</span>):</span><br>        self.y = y<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (self.x, self.y)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span>(<span class="hljs-params">self, dx, dy</span>):</span><br>        self.x = self.x + dx<br>        self.y = self.y + dy<br></code></pre></td></tr></table></figure>

<h2 id="문제-6-2"><a href="#문제-6-2" class="headerlink" title="문제 6-2"></a>문제 6-2</h2><p>문제 6-1에서 생성한 Point 클래스에 대한 인스턴스를 생성한 후 네 개의 메소드를 사용하는 코드를 작성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p = Point(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p.get()<br></code></pre></td></tr></table></figure>




<pre><code>(1, 2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p.move(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>p.get()<br></code></pre></td></tr></table></figure>




<pre><code>(3, 4)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p.setx(<span class="hljs-number">5</span>)<br>p.get()<br></code></pre></td></tr></table></figure>




<pre><code>(5, 4)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p.sety(<span class="hljs-number">0</span>)<br>p.get()<br></code></pre></td></tr></table></figure>




<pre><code>(5, 0)</code></pre>
<h2 id="문제-6-3"><a href="#문제-6-3" class="headerlink" title="문제 6-3"></a>문제 6-3</h2><p>아래의 Stock 클래스에 대해 두 개의 인스턴스를 생성했을 때 클래스와 a와 b 인스턴스의 네임 스페이스를 그려보세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stock</span>:</span><br>        market = <span class="hljs-string">&quot;kospi&quot;</span><br><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = Stock()<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = Stock()<br></code></pre></td></tr></table></figure>

<p><img src="https://wikidocs.net/images/page/3466/6.15.png"></p>
<h2 id="문제-6-4"><a href="#문제-6-4" class="headerlink" title="문제 6-4"></a>문제 6-4</h2><p>문제 6-3의 코드에서 추가로 아래와 같은 코드를 수행했을 때 ‘???’로 표시된 부분의 결괏값을 적어보세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a.market<br>???<br><span class="hljs-meta">&gt;&gt;&gt; </span>b.market<br>???<br><span class="hljs-meta">&gt;&gt;&gt; </span>Stock.market<br>???<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.market = <span class="hljs-string">&quot;kosdak&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.market = <span class="hljs-string">&quot;nasdak&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.market<br>???<br><span class="hljs-meta">&gt;&gt;&gt; </span>b.market<br>???<br><span class="hljs-meta">&gt;&gt;&gt; </span>Stock.market<br>???<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stock</span>:</span><br>        market = <span class="hljs-string">&quot;kospi&quot;</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = Stock()<br>a.market<br></code></pre></td></tr></table></figure>




<pre><code>&#39;kospi&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">b = Stock()<br>b.market<br></code></pre></td></tr></table></figure>




<pre><code>&#39;kospi&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Stock.market<br></code></pre></td></tr></table></figure>




<pre><code>&#39;kospi&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a.market = <span class="hljs-string">&quot;kosdak&quot;</span><br>b.market = <span class="hljs-string">&quot;nasdak&quot;</span><br></code></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a.market<br></code></pre></td></tr></table></figure>




<pre><code>&#39;kosdak&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">b.market<br></code></pre></td></tr></table></figure>




<pre><code>&#39;nasdak&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Stock.market<br></code></pre></td></tr></table></figure>




<pre><code>&#39;kospi&#39;</code></pre>
<h2 id="문제-6-5"><a href="#문제-6-5" class="headerlink" title="문제 6-5"></a>문제 6-5</h2><p>문제 6-3, 문제 6-4의 코드가 모두 수행된 후의 Stock 클래스, a와 b 인스턴스의 네임 스페이스를 그려보세요.</p>
<p><img src="https://wikidocs.net/images/page/3466/6.16.png"></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-7</title>
    <url>/2016/08/16/pythonbasic/python-7/</url>
    <content><![CDATA[<h2 id="문제-7-1"><a href="#문제-7-1" class="headerlink" title="문제 7-1"></a>문제 7-1</h2><p>1부터 10까지의 숫자를 각 라인 단위로 파일 출력하는 프로그램을 작성하세요. * 생성되는 파일의 이름은 number.txt 이다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./number.txt&#x27;</span>, <span class="hljs-string">&#x27;wt&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    f.write(<span class="hljs-string">&#x27;%d\n&#x27;</span> % i)<br>f.close()<br></code></pre></td></tr></table></figure>

<h2 id="문제-7-2"><a href="#문제-7-2" class="headerlink" title="문제 7-2"></a>문제 7-2</h2><p>사용자로부터 경로를 입력 받은 후 해당 경로에 있는 디렉터리와 파일 목록을 flist.txt라는 파일로 출력하는 함수를 작성하세요.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_fileList</span>(<span class="hljs-params">path</span>):</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flist.txt&#x27;</span>, <span class="hljs-string">&#x27;wt&#x27;</span>)<br>    flist = os.listdir(path)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flist:<br>        f.write(<span class="hljs-string">&#x27;%s\n&#x27;</span> % x)<br>    f.close()<br><br>print_fileList(<span class="hljs-string">&#x27;.&#x27;</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 참고 자료</title>
    <url>/2017/01/05/pythonbasic/python-ref/</url>
    <content><![CDATA[<h2 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h2><ul>
<li><a href="https://www.python.org/about/gettingstarted/">파이썬 시작</a></li>
<li><a href="https://docs.python.org/3/tutorial/index.html">파이썬 튜토리얼</a></li>
<li><a href="https://docs.python.org/3/library/index.html">파이썬 표준 라이브러리</a></li>
<li><a href="http://www.learnpython.org/">대화형 튜토리얼</a></li>
<li><a href="https://www.codecademy.com/learn/python">Codecademy Python Course</a></li>
<li><a href="https://docs.python.org/3/reference/index.html">언어 참고</a></li>
<li><a href="http://www.infinitybooks.co.kr/book/all_bookview.php?idx=125&part_idx=26&goods_data=aWR4PTEyNSZzdGFydFBhZ2U9MCZwYXJ0X2lkeD0yNiZzZWFyY2g9cHl0aG9u%7C%7C">Python Cookbook 3/e</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava</title>
    <url>/2018/05/01/rxJava/rxjava-1/</url>
    <content><![CDATA[<h1 id="RxJava-데이터-형태와-가공자"><a href="#RxJava-데이터-형태와-가공자" class="headerlink" title="RxJava 데이터 형태와 가공자"></a>RxJava 데이터 형태와 가공자</h1><hr>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">Completable</th>
<th align="center">Single</th>
<th align="center">Maybe</th>
<th align="center">Observable</th>
<th align="center">Subject</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Nothing</td>
<td align="center">O</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">One</td>
<td align="center"></td>
<td align="center">O</td>
<td align="center">O</td>
<td align="center">O</td>
<td align="center">O</td>
</tr>
<tr>
<td align="center">More</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">O</td>
<td align="center">O</td>
</tr>
<tr>
<td align="center">Unlimited</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">O</td>
<td align="center">O</td>
</tr>
</tbody></table>
<ul>
<li>RxJava에서 데이터 형태는 4가지 형태로 Nothing, One, More, Unlimted가 있습니다.</li>
<li>데이터 형태에 따라서 4가지로 처리 할 수 있습니다.(RxJava1 기준, RxJava2 Maybe 추가)<ul>
<li>Maybe는 Optional Type을 깔끔하게 처리 할 수가 있습니다.</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>작업이 종료됨과 동시에 1개의 Item 만을 전파하는 Single.</li>
<li>발행하는 Item은 없이 작업의 종료만을 전파하는 Completable</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Single.fromCallable(dao::findAll)<br>  .subscribeOn(Schedulers.io())<br>  .subscribe(<br>    books -&gt; &#123;<br>    <span class="hljs-comment">// Next Step</span><br>    &#125;,<br>    throwable -&gt; &#123;<br>    <span class="hljs-comment">// Error handling</span><br>    &#125;<br>);<br></code></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Completable.fromAction(heavyJob::run)<br>  .subscribeOn(Schedulers.io())<br>  .subscribe(<br>    () -&gt; &#123;<br>    <span class="hljs-comment">// Next Step</span><br>    &#125;, <br>    throwable -&gt; &#123;<br>    <span class="hljs-comment">// Error handling</span><br>    &#125;<br>);<br></code></pre></td></tr></table></figure>

<hr>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">Maybe.just(<span class="hljs-string">&quot;Maybe&quot;</span>)<br>    .subscribe(<br>        ::println, <span class="hljs-comment">// onSuccess</span><br>        &#123; it.printStackTrace() &#125;, <span class="hljs-comment">// onError</span><br>        &#123; println(<span class="hljs-string">&quot;onComplete&quot;</span>) &#125; <span class="hljs-comment">// onComplete</span><br>    )<br><span class="hljs-comment">// Output &gt; Maybe</span><br><br>Maybe.fromCallable &#123;<br>    <span class="hljs-keyword">val</span> nullableStr: String? = <span class="hljs-literal">null</span> <span class="hljs-comment">// nullableStr</span><br>&#125;.subscribe(<br>    ::println, <span class="hljs-comment">// onSuccess</span><br>    &#123; it.printStackTrace() &#125;, <span class="hljs-comment">// onError</span><br>    &#123; println(<span class="hljs-string">&quot;onComplete&quot;</span>) &#125; <span class="hljs-comment">// onComplete</span><br>)<br><span class="hljs-comment">// Output &gt; onComplete</span><br></code></pre></td></tr></table></figure>

<hr>
<h1 id="마블-다이어그램"><a href="#마블-다이어그램" class="headerlink" title="마블 다이어그램"></a>마블 다이어그램</h1><p><img src="http://reactivex.io/assets/operators/legend.png"></p>
<hr>
<p><img src="http://reactivex.io/documentation/operators/images/S.AsyncSubject.png"></p>
<hr>
<p><img src="http://reactivex.io/documentation/operators/images/S.AsyncSubject.e.png"></p>
<hr>
<ul>
<li><p>순차적이고 반복적으로 각각의 element에 접근이 가능한 형태 Observable</p>
</li>
<li><p>Observable 처럼 행동하는 형태와 Observer 둘 다 될수 있는 형태의 Subject</p>
<ul>
<li>Observable : 데이터의 스트림</li>
<li>Observer : Observable이 보낸 데이터의 스트림을 받음</li>
</ul>
</li>
<li><p>Cold Observable, Hot Observable</p>
</li>
</ul>
<hr>
<h1 id="일반적인-RxJava-구조"><a href="#일반적인-RxJava-구조" class="headerlink" title="일반적인 RxJava 구조"></a>일반적인 RxJava 구조</h1><hr>
<p><img src="https://camo.githubusercontent.com/a7350fe2e9a50ec381f63a63bd475d818a940fea/687474703a2f2f7265616374697665782e696f2f646f63756d656e746174696f6e2f6f70657261746f72732f696d616765732f6d61702e706e67"></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Observable.just(filename)<br>    .map(<span class="hljs-keyword">new</span> Func&lt;String, String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            File file;<br>            <span class="hljs-keyword">try</span> &#123;<br>                file = File.createTempFile(filename, <span class="hljs-keyword">null</span>, getCacheDir());<br>                storedCacheName = file.getName();<br>            &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> storedCacheName;<br>            &#125;<br>    &#125;)<br>    .subscribeOn(Schedulers.io()) <span class="hljs-comment">// 워커 쓰레드 지정</span><br>    .observeOn(AndroidSchedulers.mainThread()) <span class="hljs-comment">// Observable가 보내준 데이터 결과를 어디서 사용 하는가?</span><br>    .subscrbe(<span class="hljs-keyword">new</span> Observer&lt;String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNext</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            mResulteText.setText(s);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;<br>            Lod.e(TAG, e.getMessage());<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompleted</span><span class="hljs-params">()</span> </span>&#123;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title>APM설치</title>
    <url>/2016/06/29/server/apmsetup/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install apache2<br>ip addr show eth0 | grep inet | awk <span class="hljs-string">&#x27;&#123; print $2; &#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/\/.*$//&#x27;</span><br><span class="hljs-comment"># IP 확인</span><br>curl http://icanhazip.com<br><span class="hljs-comment"># IP 확인</span><br>nmap localhost<br><span class="hljs-comment"># 포트확인</span><br><br>sudo apt-get install mysql-server php5-mysql<br><br>apt-get install php5 libapache2-mod-php5 php5-mcrypt<br><br>sudo service apache2 restart<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP 설치</title>
    <url>/2016/06/29/server/ftp/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install vsftpd<br>sudo nano /etc/vsftpd.conf<br></code></pre></td></tr></table></figure>

<p>anonymous_enable=NO<br>local_enable=YES<br>write_enable=YES</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /etc/ftpusers<br></code></pre></td></tr></table></figure>

<p>root를 삭제한다</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo service vsftpd restart<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>기초적인 Scraping 제작</title>
    <url>/2017/01/10/web-scrapging/1-scraping/</url>
    <content><![CDATA[<p>원격에 있는 파일의 내용을 읽는 방법</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br><br>html = urlopen(<span class="hljs-string">&quot;http://pythonscraping.com/pages/page1.html&quot;</span>)<br>print(html.read())<br></code></pre></td></tr></table></figure>

<h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">b&#39;&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;A Useful Page&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1&gt;An Interesting Title&lt;&#x2F;h1&gt;\n&lt;div&gt;\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#39;<br></code></pre></td></tr></table></figure>

<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://docs.python.org/3/library/urllib.html">urllib 문서</a></p>
]]></content>
      <categories>
        <category>book</category>
        <category>Web Scraping with Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>libcurl 설치</title>
    <url>/2016/06/29/server/libcurl/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install libssl-dev libreadline-dev zlib1g-dev<br>apt-get install libcurl4-opensll-dev<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>BeautifulSoup 기초</title>
    <url>/2017/01/10/web-scrapging/2-beautifulsoup/</url>
    <content><![CDATA[<p>앞으로 모든 것은 python3를 기준으로!</p>
<h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>BeautifulSoup는 HTML을 XML 형식의 파이썬 객체로 변환합니다<br>쉽게 웹에서 필요한 내용만 가져올 수 있습니다</p>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$pip3</span> install beautifulsoup4<br></code></pre></td></tr></table></figure>

<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>html = urlopen(<span class="hljs-string">&quot;http://pythonscraping.com/pages/page1.html&quot;</span>)<br>bsObj = BeautifulSoup(html.read(), <span class="hljs-string">&quot;html.parser&quot;</span>)<br>print(bsObj.h1)<br></code></pre></td></tr></table></figure>

<h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;h1&gt;An Interesting Title&lt;&#x2F;h1&gt;<br></code></pre></td></tr></table></figure>

<h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></p>
<h2 id="Title얻기"><a href="#Title얻기" class="headerlink" title="Title얻기"></a>Title얻기</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> HTTPError<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTitle</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        html = urlopen(url)<br>    <span class="hljs-keyword">except</span> HTTPError <span class="hljs-keyword">as</span> e:<br>        print(e)<br><br>    <span class="hljs-keyword">try</span>:<br>        bsObj = BeautifulSoup(html.read(), <span class="hljs-string">&quot;html.parser&quot;</span>)<br>        title = bsObj.head.title<br>    <span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:<br>        print(e)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> title<br><br><br>title = getTitle(<span class="hljs-string">&quot;http://pythonscraping.com/pages/page1.html&quot;</span>)<br><span class="hljs-keyword">if</span> title == <span class="hljs-literal">None</span>:<br>    print(<span class="hljs-string">&quot;Title could not be found&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    print(title)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>book</category>
        <category>Web Scraping with Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>파이썬 flask와 BeautifulSoup를 이용한 네이버 인기 검색어 파싱(수정)</title>
    <url>/2017/03/28/web-scrapging/naver-hot/</url>
    <content><![CDATA[<h2 id="네이버-개편으로-인한-내용-변경"><a href="#네이버-개편으로-인한-내용-변경" class="headerlink" title="네이버 개편으로 인한 내용 변경"></a>네이버 개편으로 인한 내용 변경</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<br><span class="hljs-keyword">from</span> urllib3 <span class="hljs-keyword">import</span> request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">as_json</span>(<span class="hljs-params">f</span>):</span><br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        res = f(*args, **kwargs)<br>        res = json.dumps(res, ensure_ascii=<span class="hljs-literal">False</span>).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> Response(res, content_type=<span class="hljs-string">&#x27;application/json; charset=utf-8&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> decorated_function<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hotkeyword&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@as_json</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keyword_json</span>():</span><br>    url = <span class="hljs-string">&#x27;http://www.naver.com&#x27;</span><br>    source_code = requests.get(url)<br>    plain_text = source_code.text<br><br>    soup = BeautifulSoup(plain_text, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    rank = soup.find_all(<span class="hljs-string">&quot;div&quot;</span>, &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;PM_CL_realtimeKeyword_rolling&quot;</span>&#125;)<br><br>    retSet = rank[<span class="hljs-number">0</span>].find_all(<span class="hljs-string">&quot;span&quot;</span>, &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;ah_k&quot;</span>&#125;)<br><br>    ret = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(retSet)):<br>        t = retSet[i].string<br>        ret.append(&#123;<span class="hljs-string">&quot;rank_id&quot;</span>: i + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;rank_text&quot;</span>: t&#125;)<br><br>    <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br><br></code></pre></td></tr></table></figure>

<h3 id="이전-코드"><a href="#이전-코드" class="headerlink" title="이전 코드"></a>이전 코드</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<br><span class="hljs-keyword">from</span> urllib3 <span class="hljs-keyword">import</span> request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">as_json</span>(<span class="hljs-params">f</span>):</span><br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        res = f(*args, **kwargs)<br>        res = json.dumps(res, ensure_ascii=<span class="hljs-literal">False</span>).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> Response(res, content_type=<span class="hljs-string">&#x27;application/json; charset=utf-8&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> decorated_function<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hotkeyword&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-meta">@as_json</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keyword_json</span>():</span><br>    url = <span class="hljs-string">&#x27;http://www.naver.com&#x27;</span><br>    source_code = requests.get(url)<br>    plain_text = source_code.text<br><br>    soup = BeautifulSoup(plain_text, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    rank = soup.find(<span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;realrank&quot;</span>).find_all(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>    ret = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = rank[i].attrs[<span class="hljs-string">&#x27;title&#x27;</span>]<br>        ret.append(&#123;<span class="hljs-string">&quot;rank_id&quot;</span>: i + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;rank_text&quot;</span>: t&#125;)<br><br>    <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>1. Create Project Sunshine</title>
    <url>/2017/02/01/adnroid-developing/Developing-Android-Apps-01/</url>
    <content><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android ?"></a>Android ?</h1><p><img src="https://www.google.co.kr/intl/ko/mobile/android/images/android.jpg"></p>
<hr>
<a id="more"></a>

<h2 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h2><blockquote>
<p>안드로이드(영어: Android)는 휴대 전화를 비롯한 휴대용 장치를 위한 운영 체제와 미들웨어, 사용자 인터페이스 그리고 표준 응용 프로그램(웹 브라우저, 이메일 클라이언트, 단문 메시지 서비스(SMS), 멀티미디어 메시지 서비스(MMS)등)을 포함하고 있는 소프트웨어 스택이자 모바일 운영 체제이다. 안드로이드는 개발자들이 자바 언어로 응용 프로그램을 작성할 수 있게 하였으며, 컴파일된 바이트코드를 구동할 수 있는 런타임 라이브러리를 제공한다. 또한 안드로이드 소프트웨어 개발 키트(SDK)를 통해 응용 프로그램을 개발하기 위해 필요한 각종 도구들과 API를 제공한다.</p>
</blockquote>
<blockquote>
<p>안드로이드는 리눅스 커널 위에서 동작하며, 다양한 안드로이드 시스템 구성 요소에서 사용되는 C/C++ 라이브러리들을 포함하고 있다. 안드로이드는 기존의 자바 가상 머신과는 다른 가상 머신인 달빅 가상 머신을 통해 자바로 작성된 응용 프로그램을 별도의 프로세스에서 실행하는 구조로 되어 있다.</p>
</blockquote>
<blockquote>
<p>2005년에 안드로이드 사를 구글에서 인수한 후 2007년 11월에 안드로이드 플랫폼을 휴대용 장치 운영 체제로서 무료 공개한다고 발표한 후 48개의 하드웨어, 소프트웨어, 통신 회사가 모여 만든 오픈 핸드셋 얼라이언스(Open Handset Aliance, OHA)에서 공개 표준을 위해 개발하고 있다. 구글은 안드로이드의 모든 소스 코드를 오픈 소스 라이선스인 아파치 v2 라이선스로 배포하고 있어 기업이나 사용자는 각자 안드로이드 프로그램을 독자적으로 개발을 해서 탑재할 수 있다. 또한 응용 프로그램을 사고 팔 수 있는 구글 플레이를 제공하고 있으며, 이와 동시에 각 제조사 혹은 통신사별 응용 프로그램 마켓이 함께 운영되고 있다. 구글 플레이에서는 유료 및 무료 응용 프로그램이 제공되고 있다.<br>– Wikipedia</p>
</blockquote>
<hr>
<p><img src="/img/adnroid-developing/1/app.png"></p>
<h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>우리는 이런 앱을 만들어 보자!!<br>어렵지만 하나하나 시작해 봅시다</p>
<hr>
<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><ol>
<li>JAVA<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>OS에 맞게 JAVA를 설치 하고 환경 변수를 세팅 한다<br></li>
<li>Android Studio<br><a href="https://developer.android.com/sdk/index.html">https://developer.android.com/sdk/index.html</a><br>다운로드 받고 설치를 하고 실행을 합니다</li>
</ol>
<hr>
<p>설치가 완료 되었으면 이제 프로젝트를 만들고 본격적으로 Android App 만들기 시작합니다</p>
<p><strong>Start a new Android Studio Project</strong> 버튼을 클릭합니다</p>
<hr>
<p><img src="/img/adnroid-developing/1/androidstudio.png"></p>
<hr>
<p><img src="/img/adnroid-developing/1/newProject.png"></p>
<hr>
<h2 id="Android-Version"><a href="#Android-Version" class="headerlink" title="Android Version"></a>Android Version</h2><hr>
<p><img src="/img/adnroid-developing/1/android_version.png"></p>
<hr>
<p><img src="/img/adnroid-developing/1/android_version_2.png"></p>
<hr>
<p>Android 전체 기기의 버전을 확인해 봅니다<br>아직 대다수의 기기에서는 Jelly Bean(API 16) 이상을 많이 사용하고 있습니다</p>
<ul>
<li>Min SDK Version : 우리가 지원할 최소 버전입니다. 최소 버전이 많이 내려가면 좋지만, 사용자에게 UI/UX 적으로 제공하기 힘듭니다. 개인적인 생각으로는 Min SDK Version은 API16을 추천해 드립니다</li>
<li>Target SDK Version : 우리가 중점적으로 생각해야 할 버전입니다. Android Application 개발자라면 최신 버전을 이용해서 최대한 지원하는 걸 추천합니다. 항상 최신 버전에서 실행이 가능하도록 준비해 주세요</li>
</ul>
<hr>
<p><img src="/img/adnroid-developing/1/version_select.png"></p>
<hr>
<h2 id="Android-Page"><a href="#Android-Page" class="headerlink" title="Android Page"></a>Android Page</h2><hr>
<p><img src="/img/adnroid-developing/1/page_select.png"></p>
<hr>
<p>여러 가지 다양한 화면 선택이 존재합니다. 우리는 여기서 다양한 서비스 형태에 따라서 선택을 하고 진행을 하면 됩니다.</p>
<p>우선 <strong>Basic Activity</strong>를 선택하고 진행합니다</p>
<p>나중에 Android Page Layout에 관해서 이야기 하겠습니다</p>
<hr>
<h2 id="Android-Page-Name"><a href="#Android-Page-Name" class="headerlink" title="Android Page Name"></a>Android Page Name</h2><hr>
<p><img src="/img/adnroid-developing/1/page_name.png"></p>
<hr>
<ul>
<li>Activity Name : 기본적으로 앱을 키고 활동을 할 수 있는 페이지를 MainActivity라고 합니다. 처음 Android App을 만든다면 그냥 진행합니다</li>
<li>Layout Name : Activity에서도 화면을 구성하지만 생각보다 어렵습니다. 그러므로 XML을 이용해서 쉽게 화면을 구성합니다. Activity 이름과 같이 진행합니다</li>
<li>Title : 현재 Activity에서 표시할 이름을 정합니다</li>
<li>Menu Resource Name : Activity마다 Menu를 추가할 수 있습니다. Menu마다 이름을 정하여서 구분하도록 합니다.</li>
<li>Use a Fragment : Fragment를 사용하도록 합니다</li>
</ul>
<p>각 항목에 알맞은 내용을 넣고 Finish를 누르고 진행을 합니다.</p>
<hr>
<h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>기본적으로 다 처리하고 나면 안드로이드 스튜디오 상에서 Gradle를 이용해서 빌드 하기 때문에 대기를 해야 합니다</p>
<hr>
<p><img src="/img/adnroid-developing/1/folder.png"></p>
<h3 id="Android-Studio-1"><a href="#Android-Studio-1" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>각 폴더에 관해서 설명하겠습니다</p>
<ul>
<li>App : 앱에 관련된 모든 것들이 있습니다<ul>
<li>mainfests : Android 설정에 관한 파일인 manifest.xml 이 있습니다. 나올 때 마다 설명하겠습니다</li>
<li>java : 각 Activity에 대한 소스 파일들이 있습니다. 그러므로 이름을 잘 정해야 합니다. 이상하게 정하면 힘들어요</li>
<li>res : 각종 리소스 파일들이 있습니다. 리소스라고 하면 화면구성(layout), 이미지(drawable), 메뉴(menu), 특정값들(values), 정해진 이미지(mipmap)로 구성되어있습니다. 주의할 점은 모든 파일 이름은 소문자이고 공백이 없어야 합니다</li>
</ul>
</li>
<li>Gradle Scripts : Gradle은 빌드 툴 입니다. 빌드 과정을 자동으로 처리 하기 위해서 해주는 거이기 때문에 건드리지 않도록 합니다. (필요한 상황이 생길 때는 지금 없어요…)<ul>
<li>build.gradle(Project: ProjectName) : 라이브러리등을 추가 하기 위해서는 여기를 수정합니다</li>
<li>build.gradle(Module: App) : Android Version등과 같이 안드로이드 App을 빌드하기 위해서 하는 설정값들</li>
</ul>
</li>
</ul>
<hr>
<p>한번 빌드를 시킨 후 실행합니다</p>
<p>Hello World가 보이면 성공입니다</p>
<hr>
<h2 id="Android-Layout"><a href="#Android-Layout" class="headerlink" title="Android Layout"></a>Android Layout</h2><hr>
<p><img src="/img/adnroid-developing/1/layout.png"></p>
<p>이번 강의에서 우리가 할 모습입니다</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;application<br>    android:allowBackup=&quot;true&quot;<br>    android:icon=&quot;@mipmap/ic_launcher&quot;<br>    android:label=&quot;@string/app_name&quot;<br>    android:theme=&quot;@style/AppTheme&quot; &gt;<br>    &lt;activity<br>        android:name=&quot;.MainActivity&quot;<br>        android:label=&quot;@string/app_name&quot; &gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>App이 시작되면 제일 먼저 MainActivity를 찾게 됩니다</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivityFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainActivityFragment</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                             Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> inflater.inflate(R.layout.fragment_main, container, <span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>MainActivityFragment는 프로젝트를 만들 때 사용하는 템플릿에 의해 생성됩니다</p>
<p>Fragment라는 것은 Activity 안의 모듈형 컨테이너입니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">inflater.inflate(R.layout.fragment_main, container, <span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure>
<p>fragment_main을 이용해서 Fragment의 Layout을 구성합니다</p>
<hr>
<p>이제부터 화면을 구성해 봅시다<br>UI를 수정하기 위해서는 fragment_main.xml을 수정해야 합니다<br>Ctrl 키를 누르고 R.layout.fragment_main에서 fragment_main을 클릭하여도 되고<br>아니면 app - res - layout - fragment_main.xml파일을 클릭하여서 열면 됩니다</p>
<hr>
<p><img src="/img/adnroid-developing/1/1.png"></p>
<hr>
<p>기본적으로 파일을 열면 xml 형식으로 수정할 수 있습니다<br>xml이 익숙하지 않으신 분한테는 어렵습니다<br>밑에 잘 보면 Design 있습니다<br>우리한테는 <strong>마우스</strong>가 있습니다!!!<br>조금 더 쉽게 할 수 있습니다</p>
<hr>
<p><img src="/img/adnroid-developing/1/2.png"></p>
<hr>
<p>쉽게 할 수 있도록 GUI 도구로 잘 되어있습니다</p>
<p>한번 마우스 클릭을 이용해서 여러 가지를 해보세요</p>
<p>도구에 익숙해져야지 우리가 하고 싶은 걸 할 수 있습니다!!</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingLeft</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingRight</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivityFragment&quot;</span>&gt;</span><br><br>    &lt;TextView<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:text=&quot;@string/hello_world&quot; /&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>fragment_main.xml의 소스입니다<br>RelativeLayout을 적용하고 padding을 적용했네요<br>뷰젯으로는 TextView를 이용하였네요</p>
<hr>
<p><img src="/img/adnroid-developing/1/layout.png" alt="ListView"></p>
<p>우리는 이런 모습을 만들어야 합니다<br>이런 뷰젯은 존재하지 않습니다<br>내가 만들어야 합니다</p>
<p>그림처럼 하는 것을 ListView라고 합니다</p>
<p>우리 천천히 해봅시다</p>
<hr>
<p>Design에서 <strong>비교적</strong> 정교한 레이아웃을 만들 수는 있습니다</p>
<p><img src="/img/adnroid-developing/1/3.png"></p>
<p>이 정도는 다들 만들 수 있잖아요??</p>
<p>우리한테는 마우스가 있잖아요!!</p>
<hr>
<h2 id="우리는-이제-ListView에-대해서-작업을-할게요"><a href="#우리는-이제-ListView에-대해서-작업을-할게요" class="headerlink" title="우리는 이제 ListView에 대해서 작업을 할게요"></a>우리는 이제 ListView에 대해서 작업을 할게요</h2><h3 id="천천히-따라오세요"><a href="#천천히-따라오세요" class="headerlink" title="천천히 따라오세요"></a>천천히 따라오세요</h3><hr>
<p><img src="/img/adnroid-developing/1/4.png"></p>
<hr>
<p><img src="/img/adnroid-developing/1/5.png"></p>
<hr>
<p>list_item_forecast.xml 파일을 만들었나요?</p>
<p><img src="/img/adnroid-developing/1/6.png"></p>
<p>list_item_forecast.xml 파일에 사진과 동일한 레이아웃을 만들어 봅시다</p>
<p>손가락으로 터치했을 때 어느 정도 여유도 있어야 하고<br>글자도 이쁘게 가운데 정렬했으면 좋겠고<br>여기 보이는 TextView에 이름도 정했으면 좋겠고<br>하나하나씩 해봅시다</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">android:id  		-&gt; 이름을 정합니다.<br>android:minHeight 	-&gt; 최소 높이를 정합니다.<br>android:gravity 	-&gt; 정렬을 합니다<br></code></pre></td></tr></table></figure>

<p>이렇게 하면 각 항목에 대해서 만들수가 있습니다</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/list_item_forecast_textview&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:minHeight</span>=<span class="hljs-string">&quot;?android:attr/listPreferredItemHeight&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<hr>
<h2 id="Android-Layout-Design"><a href="#Android-Layout-Design" class="headerlink" title="Android Layout Design"></a>Android Layout Design</h2><hr>
<p>안드로이드는 다양한 화면 다양한 기기에서 제공합니다<br>어떤 기기든 어떤 화면이든 같은 앱을 보여주는 것은 중요합니다<br>이것을 <strong>Responsive Design</strong>이라 합니다<br>한국어로 쉽게 설명하면 반응형 디자인으로 불립니다<br>우리 네이버를 컴퓨터에서 들어가나 핸드폰으로 들어가나 태블릿으로 들어가나 똑같은 네이버잖아요??<br>그걸 의미합니다!!</p>
<hr>
<p>안드로이드는 많은 Layout을 제공합니다</p>
<ul>
<li>FrameLayout</li>
<li>LinearLayout</li>
<li>TableLayout</li>
<li>GridLayout</li>
<li>RelativeLayout</li>
</ul>
<p>대표적으로 사용되는 것들입니다.<br>최근 버전에는 ConstraintLayout 도 있습니다.</p>
<hr>
<h1 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h1><p><img src="/img/adnroid-developing/1/framelayout.png" alt="FrameLayout"></p>
<p>FrameLayout은 언제 사용할까요?</p>
<blockquote>
<p>우리가 보려는 항목이 하나만 있으면 사용하는 가장 단순한 레이아웃입니다<br>전체 영역을 채우는 ListView와 같은 경우 해당합니다</p>
</blockquote>
<hr>
<h1 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h1><p><img src="/img/adnroid-developing/1/LinearLayout.png" alt="LinearLayout"></p>
<p>LinearLayout은 언제 사용할까요?</p>
<blockquote>
<p>View들을 수평 또는 수직으로 차례로 쌓을 때 적합합니다<br>또한, 화면을 비율로 나누는 방법이다</p>
</blockquote>
<hr>
<h1 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h1><p><img src="/img/adnroid-developing/1/RelativeLayout.png" alt="RelativeLayout"></p>
<p>RelativeLayout은 언제 사용할까요?</p>
<blockquote>
<p>앞에 설명한 2개보다 복잡합니다. 하지만 효과적입니다<br>정말 많은 View를 각각의 상위 항목을 정하고 상대적 레이아웃 또는 수많은 형제의 View를 잡고 위치를 정할 수 있습니다<br>정말 복잡하고 어려운 Layout 구성을 할 때 유용합니다</p>
</blockquote>
<hr>
<h1 id="해상도"><a href="#해상도" class="headerlink" title="해상도"></a>해상도</h1><ul>
<li>dpi (Dot Per Inch)<ul>
<li>1인치당 픽셀 수. 물리적 단위인 1 inch (=2.54cm)에 몇 픽셀이 들어가는가를 나타내는 단위다<ul>
<li>Low density (120dpi) : ldpi</li>
<li>Medium density (160dpi) : mdpi</li>
<li>High density (240dpi) : hdpi</li>
<li>Extra High density (320dpi) : xdpi</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>px<ul>
<li>스크린의 실제 픽셀 단위를 사용하며, 실제 크기나 밀도와 상관이 없다. mdpi(160dip)에서 1dp = 1px 이다<ul>
<li>ldpi : 1dp = 0.75px</li>
<li>mdpi : 1dp = 1px</li>
<li>hdpi : 1dp = 1.5px</li>
<li>xdpi : 1dp = 2px;</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>dp 와 dip (Density Independent Pixel)<ul>
<li>말 그대로 실제 픽셀에 독립적인 단위로 안드로이드 폰의 다양한 해상도를 지원하기 위해 만든 단위이다. 큰 화면이든 작은 화면이든 같은 크기로 나타나게 되어있다</li>
<li>즉, 화면이 작은 핸드폰에서 10원짜리만 하게 나타난다면 화면이 큰 핸드폰에서도 10원짜리 만하게 나타나게 되어있다. dp(dip)와 px간의 변환을 하는 방법은 아래와 같다 <a href="https://pixplicity.com/dp-px-converter/">참고</a></li>
</ul>
</li>
</ul>
<ul>
<li>dp(dip)와 px간의 변환<ul>
<li>px = dp * (160 / dpi) = dp * density</li>
<li>dp = px / (160 / dpi) = px / density</li>
<li>여기서 density는 density = dpi / 160 계산 한다<ul>
<li>ldpi : density = 0.75</li>
<li>mdpi : density = 1</li>
<li>hdpi : density = 1.5</li>
<li>xdpi : density = 2</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>sp<ul>
<li>dp와 비슷하지만, 사용자가 선택한 글꼴 크기에 의해 크기가 조절된다</li>
</ul>
</li>
</ul>
<hr>
<p><img src="/img/adnroid-developing/1/scroll.png"></p>
<hr>
<p>Q. 만약 우리한테 총 데이터가 50개가 있다고 가정했을 때<br>화면에 10개를 보여줄 수 있다고 하면<br>우리는 몇 개의 View를 만들어서 보여줘야 할까요?</p>
<p>A. <strong>12</strong>개입니다. 10개를 보여줄 수 있다고 했을 때 앞뒤로 한 개씩 추가로 예비로 보여줄 준비를 하고 있어야 끊김이 없고 메모리 낭비도 없습니다</p>
<hr>
<p>![](/img/adnroid-developing/1/listview recycle.png)</p>
<hr>
<p>그림과 같이 우리는 View 를 재사용하면서 List 항목을 보여줘야 메모리 사용도 적고 부드럽게 동작할 수 있습니다.</p>
<p>이런 재활용 작업은 AdapterView의 하위 클래스인 ListView, GridView에서도 같습니다.</p>
<hr>
<p>ListView를 적용해보도록 하겠습니다</p>
<p>어떤 파일을 열어야 할까요?</p>
<p><strong>fragment_main.xml</strong> 입니다</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingLeft</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingRight</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivityFragment&quot;</span>&gt;</span><br><br>    &lt;TextView<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:text=&quot;@string/hello_world&quot; /&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>기존의 소스입니다. 불필요한 내용이 너무 많아요<br>우리는 수정해서 우리가 원하는 형태로 바꾸겠습니다</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingLeft</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingRight</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivityFragment&quot;</span>&gt;</span><br><br>    &lt;ListView<br>        android:id=&quot;@+id/listview_forecast&quot;<br>        android:layout_width=&quot;match_parent&quot;<br>        android:layout_height=&quot;match_parent&quot; /&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>이 정도면 우리가 이번 강의에서 하려는 UI는 어느 정도 완성되었습니다</p>
<h2 id="그러나"><a href="#그러나" class="headerlink" title="그러나!!!!!"></a>그러나!!!!!</h2><h2 id="데이터는"><a href="#데이터는" class="headerlink" title="데이터는??"></a>데이터는??</h2><hr>
<p>layout에서  ListView와 같은 AdapterView를 사용할 때 데이터가 없으면 아무것도 표시가 안됩니다<br>이제부터 보여주기 위한 데이터 Fake Data를 넣겠습니다<br>이거는 그냥 보여주기 위한 용입니다!!!! 실제 데이터 아닙니다</p>
<p>MainActivityFragment.java 파일을 열어보세요</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivityFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainActivityFragment</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                             Bundle savedInstanceState)</span> </span>&#123;<br>        String[] data = &#123;<br>                <span class="hljs-string">&quot;Mon 6/23 - Sunny - 31/17&quot;</span>,<br>                <span class="hljs-string">&quot;Tue 6/24 - Foggy - 21/8&quot;</span>,<br>                <span class="hljs-string">&quot;Wed 6/25 - Cloudy - 22/17&quot;</span>,<br>                <span class="hljs-string">&quot;Thurs 6/26 - Rainy - 18/11&quot;</span>,<br>                <span class="hljs-string">&quot;Fri 6/27 - Foggy - 21/10&quot;</span>,<br>                <span class="hljs-string">&quot;Sat 6/28 - TRAPPED IN WEATHERSTATION - 23/18&quot;</span>,<br>                <span class="hljs-string">&quot;Sun 6/29 - Sunny - 20/7&quot;</span><br>        &#125;;<br>        List&lt;String&gt; weekForecast = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(data));<br><br>        <span class="hljs-keyword">return</span> inflater.inflate(R.layout.fragment_main, container, <span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>다음과 같이 코드를 추가하였나요?<br>이제 실제로 돌아가기 위해서 코드를 추가하겠습니다</p>
<hr>
<h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><hr>
<p> 우리가 앞으로 많이 접하게 되는 Adapters에 대해서 이야기해 봅시다</p>
<p>우리한테 다음 그림과 같은 데이터가 있다고 해봅시다</p>
<p><img src="/img/adnroid-developing/1/adapter_1.png"></p>
<p>이 데이터를 Adapter로 만들어지는 과정을 볼게요</p>
<hr>
<p><img src="/img/adnroid-developing/1/adapter_2.png"></p>
<p>Raw Data는 우리가 실제로 표현할 데이터를 의미합니다<br>Raw Data를 실제 코드에서 저장을 해야 합니다<br>그리고 각각의 데이터를 표현해야 합니다<br>여러 개의 Layout 파일들이 필요하겠네요</p>
<hr>
<p>만약 데이터가 100000000개이면….?<br>이것들에 대해서 Layout파일들을 하나하나 다 만들면…….</p>
<p>정말 힘든 일이 생깁니다.</p>
<hr>
<p><img src="/img/adnroid-developing/1/adapter_3.png"></p>
<hr>
<p>그래서 우리는 Adapter를 이용해서 표현합니다<br>이것을 AdapterView라고 합니다</p>
<p>AdapaterView는 실제 동작을 볼게요</p>
<hr>
<p><img src="/img/adnroid-developing/1/adapter_4.png"></p>
<p>처음에 개수를 물어봅니다.<br><strong>이건 총 몇 개의 데이터야?</strong><br>위에서는 3개의 데이터를 가지고만 합니다</p>
<p>그러면 자동으로 다음을 진행합니다</p>
<hr>
<p><img src="/img/adnroid-developing/1/adapter_5.png"><br><img src="/img/adnroid-developing/1/adapter_6.png"></p>
<hr>
<p>그러면 최종적으로</p>
<p><img src="/img/adnroid-developing/1/adapter_7.png"></p>
<hr>
<p>우리는 이것을 실제 코드로 표현합니다<br>기본적으로 AdapterView에 표현하기 위해서 Adapter에 표현합니다</p>
<p>우리는 ArrayAdapter로 표현하겠습니다</p>
<p>4개의 매개변수를 갖고 시작을 합니다 (생성자)</p>
<ul>
<li>context : App 환경에 대한 총체적 정보를 포함합니다 -&gt; getActivity()</li>
<li>ID of list item layout : 우리가 데이터를 표현할 Layout -&gt; R.layout.list_item_forecast</li>
<li>ID of textView : 데이터를 표현할 곳의 이름 -&gt; R.id.list_item_forecast_textview</li>
<li>list of data : 보여줄 데이터를 의미 -&gt; weekForecast</li>
</ul>
<hr>
<p>다음 코드를 추가 합시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                         Bundle savedInstanceState)</span> </span>&#123;<br><br><span class="hljs-comment">// 생략</span><br><br>    ArrayAdapter&lt;String&gt; mForecastAdapter = <span class="hljs-keyword">new</span> ArrayAdapter&lt;String&gt;(<br>                    getActivity(),<br>                    R.layout.list_item_forecast,<br>                    R.id.list_item_forecast_textview,<br>                    weekForecast<br>    );<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>이렇게 하면 Adapter로 데이터를 표현할 준비를 한 것입니다</p>
<p>Layout에 있는 ListView에 우리의 데이터를 보여 달라고 요청만 하면 됩니다</p>
<p>ListView는 어떻게 찾을까요??</p>
<hr>
<p><img src="/img/adnroid-developing/1/FindItem.png"></p>
<p><a href="http://developer.android.com/reference/android/view/View.html#IDs">http://developer.android.com/reference/android/view/View.html#IDs</a></p>
<p>여기에서 추가 적으로 공부해보세요</p>
<p>이제 ListView를 찾고 ListView에 ArrayAdapter(mForecastAdapter)를 붙이세요</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                         Bundle savedInstanceState)</span> </span>&#123;<br><span class="hljs-comment">// 생략</span><br>    View rootView = inflater.inflate(R.layout.fragment_main, container, <span class="hljs-keyword">false</span>);<br>    ListView listView = (ListView)rootView.findViewById(R.id.listview_forecast);<br>    listView.setAdapter(mForecastAdapter);<br><br>    <span class="hljs-keyword">return</span> rootView;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>rootView를 통해서 찾을 기점을 잡고<br>그 기점을 통해서 ListView를 찾고<br>찾은 ListView를 통해서 Adapter를 설정합니다</p>
<p>이제 빌드를 하고 실행을 해보세요</p>
<hr>
<p><img src="/img/adnroid-developing/1/7.png"></p>
<hr>
<h1 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h1><ul>
<li>Android Studio</li>
<li>SDK - Target and Minimum</li>
<li>Emulators vs. Real Devices</li>
<li>Gradle</li>
<li>Application</li>
<li>Activity</li>
<li>Fragment</li>
<li>Views and ViewGroups</li>
<li>Views and XML layouts</li>
<li>ListView</li>
<li>Adapter</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>2. Connect Sunshine to the Cloud</title>
    <url>/2017/02/04/adnroid-developing/Developing-Android-Apps-02/</url>
    <content><![CDATA[<h2 id="날씨-얻어-오기"><a href="#날씨-얻어-오기" class="headerlink" title="날씨 얻어 오기"></a>날씨 얻어 오기</h2><hr>
<p>우리는 실제 데이터를 얻어 올 것입니다<br>openweathermap 싸이트에 API를 이용합니다</p>
<p><a href="http://openweathermap.org/">http://openweathermap.org/</a></p>
<p>전세계 날씨 정보를 얻어 올 수 있는 곳입니다<br>싸이트에 접속해서 회원가입 후 API키를 받습니다</p>
<p><a href="http://openweathermap.org/api">http://openweathermap.org/api</a><br>많은 데이터를 얻을 수 있습니다<br>현재 날씨 / 앞으로 5일간 3시간 간격 / 16일 동안 매일매일 등등<br>정말 많은 데이터를 얻어 올 수 있습니다</p>
<p><a href="http://openweathermap.org/weather-conditions">http://openweathermap.org/weather-conditions</a> 에 접속하면 날씨 정보에 대한 아이콘을 볼 수 있습니다</p>
<p>차후에 이 아이콘을 사용할 예정 입니다</p>
<hr>
<p><a href="http://openweathermap.org/city/1835848">http://openweathermap.org/city/1835848</a><br>서울에 대한 날씨에 대한 페이지입니다</p>
<hr>
<p>앞으로 Application에서 보여줄 데이터를 얻어와야 합니다<br>openweathermap을 통해서요<br>복잡한 주소로 이루어져 있지만 사실 규칙이 있고 규칙에만 맞으면 데이터를 가져올 수 있습니다</p>
<h2 id="연습-서울의-1주일-날씨를-JSON-데이터-형태로-온도는-metric하게-필요하다"><a href="#연습-서울의-1주일-날씨를-JSON-데이터-형태로-온도는-metric하게-필요하다" class="headerlink" title="연습 : 서울의 1주일 날씨를 JSON 데이터 형태로 온도는 metric하게 필요하다"></a>연습 : 서울의 1주일 날씨를 JSON 데이터 형태로 온도는 metric하게 필요하다</h2><blockquote>
<p>정리 : 1 Week, city (seoul), JSON, metric(˚C ⟷ ˚F)</p>
</blockquote>
<p><a href="http://api.openweathermap.org/data/2.5/forecast/daily?q=seoul,kr&mode=json&units=metric&cnt=7&appid=API_KEY">http://api.openweathermap.org/data/2.5/forecast/daily?q=seoul,kr&amp;mode=json&amp;units=metric&amp;cnt=7&amp;appid={API_KEY}</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">http:&#x2F;&#x2F;api.openweathermap.org&#x2F;data&#x2F;2.5&#x2F;forecast&#x2F;daily?<br>q&#x3D;seoul,kr<br>&amp;mode&#x3D;json<br>&amp;units&#x3D;metric<br>&amp;cnt&#x3D;7<br>&amp;appid&#x3D;&#123;API_KEY&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>처음에는 어렵습니다</p>
<p>각 웹싸이트들은 API를 제공하고 있습니다<br>개발자들을 위해서 편하게 제공하는 것입니다</p>
<p>많이 사용하면 적응이 되고 쉽게 사용할 수 있습니다.</p>
<p>서울 말고도 여러 도시를 연습해 보세요</p>
<hr>
<p>HTTP REQUEST FOR WEATHER</p>
<ol>
<li>Make HTTP Request</li>
<li>Read response from input stream</li>
<li>Clean up and log any errors</li>
</ol>
<hr>
<p>Android에서 HTTP를 요청하는 방법은 2가지가 있습니다</p>
<ol>
<li>HttpURLConnection</li>
<li>HttpClient</li>
</ol>
<h4 id="두가지-방법-모두-Https-스트리밍-업로드-다운로드-시간제한-IPv6-폴링-지원합니다"><a href="#두가지-방법-모두-Https-스트리밍-업로드-다운로드-시간제한-IPv6-폴링-지원합니다" class="headerlink" title="두가지 방법 모두 Https, 스트리밍 업로드, 다운로드, 시간제한, IPv6, 폴링 지원합니다"></a>두가지 방법 모두 Https, 스트리밍 업로드, 다운로드, 시간제한, IPv6, 폴링 지원합니다</h4><h4 id="용어를-잘-모르겠다면-한번-검색하세요-HTTP-통신에-대한-기본적인-내용입니다"><a href="#용어를-잘-모르겠다면-한번-검색하세요-HTTP-통신에-대한-기본적인-내용입니다" class="headerlink" title="용어를 잘 모르겠다면 한번 검색하세요 HTTP 통신에 대한 기본적인 내용입니다"></a>용어를 잘 모르겠다면 한번 검색하세요 HTTP 통신에 대한 기본적인 내용입니다</h4><p>Android에서 주로 추천하는 HttpURLConnection 입니다<br>오픈 소스를 사용하면 okhttp 도 있습니다</p>
<hr>
<p>Android HTTP에 대해서 더 알고 싶다면<br><a href="http://android-developers.blogspot.kr/2011/09/androids-http-clients.html">http://android-developers.blogspot.kr/2011/09/androids-http-clients.html</a><br><a href="http://developer.android.com/training/basics/network-ops/connecting.html">http://developer.android.com/training/basics/network-ops/connecting.html</a><br>여기를 참고하세요</p>
<p>okhttp에 대해서 알고 싶으면<br><a href="http://square.github.io/okhttp/">http://square.github.io/okhttp/</a><br>여기를 참고하세요</p>
<hr>
<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><hr>
<p>Android 작업을 하다 보면 우리는 예상 못 한 많은 결과를 보게 됩니다<br>이를 해결할 방법이 Log입니다</p>
<p>VS로 작업을 할 때는 Debug를 모드를 이용해서 많이 진행하였지만 Android에서 같은 방법으로 진행하면 상당히 힘듭니다</p>
<p>Log는 Android Studio에 있는 Logcat을 이용해서 볼 수 있습니다</p>
<hr>
<p><img src="/img/adnroid-developing/2/1.png"></p>
<h2 id="여기에서-Android-Monitor-클릭하면-됩니다"><a href="#여기에서-Android-Monitor-클릭하면-됩니다" class="headerlink" title="여기에서 Android Monitor 클릭하면 됩니다"></a>여기에서 Android Monitor 클릭하면 됩니다</h2><p><img src="/img/adnroid-developing/2/2.png"></p>
<hr>
<p>Log는 총 5가지의 종류가 있습니다</p>
<ol>
<li>ERROR : 에러 상황을 표시합니다</li>
<li>WARN : 경고 상황을 표시합니다</li>
<li>INFO : INFO 현재 각 단계에 맞는 상황을 표시합니다</li>
<li>DEBUG : 개발 할 때는 보이지만 배포 때는 제외됩니다</li>
<li>VERBOSE : 개발 할 때는 포함되지만 배포 할때는 컴파일이 되어서는 안 됩니다</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Log.e(String tag, String msg)<br></code></pre></td></tr></table></figure>

<p>Log를 작성하고 볼 때 중요한 것이 있습니다<br>LogSpam을 조심해야 합니다</p>
<h2 id="너무-많은-Log가-존재하면-중요한-Log가-숨겨지거나-표시가-안-될-수-있습니다"><a href="#너무-많은-Log가-존재하면-중요한-Log가-숨겨지거나-표시가-안-될-수-있습니다" class="headerlink" title="너무 많은 Log가 존재하면 중요한 Log가 숨겨지거나 표시가 안 될 수 있습니다"></a>너무 많은 Log가 존재하면 중요한 Log가 숨겨지거나 표시가 안 될 수 있습니다</h2><p>이런 사항을 조심해야 합니다<br>Log 버퍼에 용량은 한정되어 있기 때문입니다</p>
<hr>
<p>우리는 앞으로 많은 코드를 실제로 작성도 하기는 하지만 잘 작성하신 선배님들의 코드를 Copy &amp; Paste를 합니다<br>그럴 때 설정해야 하는 것이 있습니다<br>Import를 자동으로 처리하게 해주는 것 입니다</p>
<hr>
<p><img src="/img/adnroid-developing/2/3.png" alt="auto import"></p>
<hr>
<p>이제 실제로 코드를 작성해 봅시다</p>
<p>생각보다 많은 양이라서 미리 준비했습니다</p>
<p>다음 링크에서 코드를 복사해서 붙여넣어 봅시다</p>
<p>MainActivityFragment.java 파일에서 작업하면 됩니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">listView.setAdapter(mForecastAdapter);<br><span class="hljs-comment">// 여기에 붙여넣기</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HttpURLConnection urlConnection = <span class="hljs-keyword">null</span>;<br>BufferedReader reader = <span class="hljs-keyword">null</span>;<br><br>String forecastJsonStr = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>    URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://api.openweathermap.org/data/2.5/forecast/daily?q=seoul,kr&amp;mode=json&amp;units=metric&amp;cnt=7&amp;APPID=&#123;API_KEY&#125;&quot;</span>);<br><br>    urlConnection = (HttpURLConnection) url.openConnection();<br>    urlConnection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>    urlConnection.connect();<br><br>    InputStream inputStream = urlConnection.getInputStream();<br>    StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br>    <span class="hljs-keyword">if</span> (inputStream == <span class="hljs-keyword">null</span>) &#123;<br>        forecastJsonStr = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(inputStream));<br><br>    String line;<br>    <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>        buffer.append(line + <span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (buffer.length() == <span class="hljs-number">0</span>) &#123;<br>        forecastJsonStr = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    forecastJsonStr = buffer.toString();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    Log.e(<span class="hljs-string">&quot;MainActivityFragment&quot;</span>, <span class="hljs-string">&quot;Error &quot;</span>, e);<br>    forecastJsonStr = <span class="hljs-keyword">null</span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (urlConnection != <span class="hljs-keyword">null</span>) &#123;<br>        urlConnection.disconnect();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (reader != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> IOException e) &#123;<br>            Log.e(<span class="hljs-string">&quot;MainActivityFragment&quot;</span>, <span class="hljs-string">&quot;Error closing stream&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> rootView;<br></code></pre></td></tr></table></figure>

<hr>
<p>이제 openweathermap에서 정보를 가져올 수 있습니다</p>
<p>코드를 실행을 시켜서 데이터를 가져오는지 확인하기 위해 실행을 합니다</p>
<h2 id="Error가-발생하면서-안됩니다-Why"><a href="#Error가-발생하면서-안됩니다-Why" class="headerlink" title="Error가 발생하면서 안됩니다, Why?"></a>Error가 발생하면서 안됩니다, Why?</h2><h2 id="Log를-확인해서-무슨-ERROR인지-확인해-봅시다"><a href="#Log를-확인해서-무슨-ERROR인지-확인해-봅시다" class="headerlink" title="Log를 확인해서 무슨 ERROR인지 확인해 봅시다"></a>Log를 확인해서 무슨 ERROR인지 확인해 봅시다</h2><hr>
<h2 id="NetworkOnMainThreadException"><a href="#NetworkOnMainThreadException" class="headerlink" title="NetworkOnMainThreadException"></a>NetworkOnMainThreadException</h2><hr>
<p><img src="/img/adnroid-developing/2/4.png" alt="Error Message"></p>
<hr>
<h2 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h2><hr>
<p>Android에서는 크게 2가지의 Thread로 구분합니다</p>
<h3 id="Main-Thread-aka-UI-Thread-All-user-input-output"><a href="#Main-Thread-aka-UI-Thread-All-user-input-output" class="headerlink" title="Main Thread (aka UI Thread) - All user input + output"></a>Main Thread (aka UI Thread) - All user input + output</h3><p>Main Thread 에서는 긴 작업은 피해야 합니다</p>
<h3 id="Background-Thread-for-long-running-work"><a href="#Background-Thread-for-long-running-work" class="headerlink" title="Background Thread - for long-running work"></a>Background Thread - for long-running work</h3><p>Background Thread에서는 네트워크 호출, DB 읽기 쓰기, 비트맵 압축 등 긴 작업을 주로 처리합니다</p>
<hr>
<p>지금 Http Request 같은 작업을 진행할 때는 오래 걸리기 때문에 Main Thread에서 제거 해야 합니다</p>
<p>이것을 Background Thread에서 동작하기 위해서는 몇 가지 선택이 있습니다<br>그중에서 우리는 대표적인 것을 가지고 작업을 하겠습니다</p>
<p><a href="https://developer.android.com/guide/components/processes-and-threads.html?hl=ko">processes-and-threads Document</a></p>
<hr>
<h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><hr>
<p>Android는 Java를 기반으로 하므로 Runnable interface나 Thread Class를 이용해도 됩니다<br>그러나 생각보다 손이 많이 갑니다</p>
<p>Android에서 제공하는 걸 사용합시다</p>
<hr>
<h3 id="버튼을-누르면-웹에서-이미지를-다운받고-다운받은-이미지를-보여주는-코드"><a href="#버튼을-누르면-웹에서-이미지를-다운받고-다운받은-이미지를-보여주는-코드" class="headerlink" title="버튼을 누르면 웹에서 이미지를 다운받고 다운받은 이미지를 보여주는 코드"></a>버튼을 누르면 웹에서 이미지를 다운받고 다운받은 이미지를 보여주는 코드</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">final</span> Bitmap bitmap =<br>                    loadImageFromNetwork(<span class="hljs-string">&quot;http://example.com/image.png&quot;</span>);<br>            mImageView.post(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    mImageView.setImageBitmap(bitmap);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>어렵다…..</p>
<h3 id="Android에서-제공하는-AsyncTask로-표현한-코드"><a href="#Android에서-제공하는-AsyncTask로-표현한-코드" class="headerlink" title="Android에서 제공하는 AsyncTask로 표현한 코드"></a>Android에서 제공하는 AsyncTask로 표현한 코드</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> DownloadImageTask().execute(<span class="hljs-string">&quot;http://example.com/image.png&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadImageTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Bitmap</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/** The system calls this to perform work in a worker thread and</span><br><span class="hljs-comment">      * delivers it the parameters given to AsyncTask.execute() */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Bitmap <span class="hljs-title">doInBackground</span><span class="hljs-params">(String... urls)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> loadImageFromNetwork(urls[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">/** The system calls this to perform work in the UI thread and delivers</span><br><span class="hljs-comment">      * the result from doInBackground() */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPostExecute</span><span class="hljs-params">(Bitmap result)</span> </span>&#123;<br>        mImageView.setImageBitmap(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>아직 내용은 잘 모르겠지만, 더 짧고 쉬워 보인다</p>
<hr>
<p>AsyncTask는 사실 간단합니다</p>
<p>Main Thread에서 할 일과 Background Thread에서 할 일만 정하면 됩니다</p>
<p>Android Developer 싸이트에서 AsyncTask를 찾고 어떤 작업이 MainThread인지 Background Thread인지 찾아봅시다</p>
<ol>
<li>onPreExecute() / M</li>
<li>doInBackground() / B</li>
<li>onProgressUpdate() / M</li>
<li>onPostExecute() / M</li>
</ol>
<p>doInBackground를 진행하면서 publishProgress()를 이용하면 현재 작업이 얼마나 진행되었는지 알 수 있습니다<br>쉽게 생각하면 우리가 다운로드 몇% 되었는지 보는 거랑 같아요</p>
<hr>
<ol>
<li>FetchWeatherTask class를 MainActivityFragment class 안에 생성</li>
<li>FetchWeatherTask class는 AsyncTask 상속</li>
<li>FetchWeatherTask class 완성</li>
<li>FetchWeatherTask class안에 doInBackground method 안에 완성</li>
</ol>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FetchWeatherTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String LOG_TAG = FetchWeatherTask.class.getSimpleName();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Void <span class="hljs-title">doInBackground</span><span class="hljs-params">(Void... params)</span> </span>&#123;<br><br>        HttpURLConnection urlConnection = <span class="hljs-keyword">null</span>;<br>        BufferedReader reader = <span class="hljs-keyword">null</span>;<br><br>        String forecastJsonStr = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://api.openweathermap.org/data/2.5/forecast/daily?q=seoul,kr&amp;mode=json&amp;units=metric&amp;cnt=7&amp;appid=&#123;API_KEY&#125;&quot;</span>);<br><br>            urlConnection = (HttpURLConnection) url.openConnection();<br>            urlConnection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>            urlConnection.connect();<br><br>            InputStream inputStream = urlConnection.getInputStream();<br>            StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br>            <span class="hljs-keyword">if</span> (inputStream == <span class="hljs-keyword">null</span>) &#123;<br>                forecastJsonStr = <span class="hljs-keyword">null</span>;<br>            &#125;<br><br>            reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(inputStream));<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                buffer.append(line + <span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (buffer.length() == <span class="hljs-number">0</span>) &#123;<br>                forecastJsonStr = <span class="hljs-keyword">null</span>;<br>            &#125;<br>            forecastJsonStr = buffer.toString();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            Log.e(LOG_TAG, <span class="hljs-string">&quot;Error &quot;</span>, e);<br>            forecastJsonStr = <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (urlConnection != <span class="hljs-keyword">null</span>) &#123;<br>                urlConnection.disconnect();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (reader != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    reader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> IOException e) &#123;<br>                    Log.e(LOG_TAG, <span class="hljs-string">&quot;Error closing stream&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>코드를 잘 넣었으면 동작하는데 아까처럼 Error가 발생하지는 않습니다</p>
<p>우리는 앞으로 개발을 위해서 Refresh Button를 추가합니다<br>하지만 Refresh Button은 실제 Application에서는 제외 해야 합니다</p>
<p>사용자가 Refresh를 원하기 전에 자동으로 해주는 것이 좋은 것 입니다<br>Save Button도 필요 없습니다</p>
<p>다 구시대적 UI/UX입니다</p>
<p>우리 최신에 맞게 합시다</p>
<hr>
<p>우리가 열심히 AsyncTask 로 변화도 시켰고 했지만 사실 여기에는 약점이 있습니다</p>
<p>안드로이드 자체에 있는 LifeCycle 에 치명적입니다</p>
<p>그래서 우리는 다른 방법을 찾아야 합니다</p>
<hr>
<p><img src="/img/adnroid-developing/2/5.png"></p>
<hr>
<p>일단 우리는 Background Thread에 집중하겠습니다</p>
<p>너무 많은 걸 한꺼번에 하면 어려워요</p>
<p>천천히 단계를 밟아가면서 진행을 하도록 합시다</p>
<hr>
<p>Menu에 대해서 알아봅시다</p>
<p><img src="/img/adnroid-developing/2/6.png"></p>
<p><a href="https://developer.android.com/guide/topics/ui/menus.html">메뉴</a> <a href="https://developer.android.com/guide/topics/resources/string-resource.html#String">문자열</a></p>
<hr>
<p>app - resources - menu - menu_main.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>    &lt;item<br>        android:id=&quot;@+id/action_settings&quot;<br>        android:orderInCategory=&quot;100&quot;<br>        android:title=&quot;@string/action_settings&quot;<br>        app:showAsAction=&quot;never&quot; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>우리가 만들 메뉴는 임시로 처리하는 거닌깐<br>파일을 하나 만들어서 처리해 봅시다</p>
<p>forecast_fragment_menu.xml 파일을 하나 만들어 봅시다</p>
<hr>
<p><img src="/img/adnroid-developing/2/7.png" alt="메뉴 만들기"></p>
<hr>
<p>우리가 만들 메뉴의 ID는 action_refresh이고<br>메뉴에 label은 Refresh 입니다<br>그리고 이것을 실제로 메뉴로 나타나게 해야 합니다</p>
<hr>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br>    &lt;item<br>        android:id=&quot;@+id/action_refresh&quot;<br>        android:title=&quot;@string/action_refresh&quot;<br>        app:showAsAction=&quot;never&quot; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>우리가 Refresh라고 쓴 글자는<br>app - resources - value - string.xml 에 저장이 됩니다</p>
<p>string.xml에 저장된 글자들은 번역을 하게 됩니다<br>value-ko 폴더를 만들고 string.xml 만들어서 각 내용을 번역한다면 한국어도 지원이 됩니다<br>value-es 스페인어 value-fr 불어 등등 이렇게 처리하면 됩니다<br>만약 번역이 필요 없는 경우가 있습니다</p>
<p>그럴 때는</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action_refresh&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Refresh<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>적으면 됩니다</p>
<hr>
<p>메뉴를 사용할 건지 선언을 하기 위해서는 LifeCycle을 이해할 필요가 있습니다</p>
<p><img src="/img/adnroid-developing/2/8.png"></p>
<hr>
<p>Override를 할 때 쉽게 하는 방법이 있습니다</p>
<p>위에 메뉴에서 Code - Override Method를 클릭하고 내가 필요한 Override Method를 선택하면 됩니다<br>단축키 : Ctrl + O(Win), ⌘ + O(Mac)</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    setHasOptionsMenu(<span class="hljs-keyword">true</span>); <span class="hljs-comment">// 메뉴가 있다</span><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu, MenuInflater inflater)</span> </span>&#123;<br>    inflater.inflate(R.menu.forecast_fragment_menu, menu);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>일단 메뉴를 사용한다는 사실을 알려줍니다<br>그리고 사용할 메뉴에 대해서 알려줍니다</p>
<hr>
<p>Refresh Button 을 눌렀을 때 동작도 추가해야 합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br>    <span class="hljs-keyword">if</span>(id == R.id.action_refresh) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Refresh Button을 클릭했을 때 다시 정보를 얻어와야 합니다<br>다음과 같이 수정합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br>    <span class="hljs-keyword">if</span>(id == R.id.action_refresh) &#123;<br>        FetchWeatherTask fetchWeatherTask = <span class="hljs-keyword">new</span> FetchWeatherTask();<br>        fetchWeatherTask.execute();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="이제-실제로-빌드를-하고-Refresh-버튼을-클릭해-봅시다"><a href="#이제-실제로-빌드를-하고-Refresh-버튼을-클릭해-봅시다" class="headerlink" title="이제 실제로 빌드를 하고 Refresh 버튼을 클릭해 봅시다"></a>이제 실제로 빌드를 하고 Refresh 버튼을 클릭해 봅시다</h2><h2 id="또-안됩니다"><a href="#또-안됩니다" class="headerlink" title="또 안됩니다"></a>또 안됩니다</h2><p>Logcat을 이용해서 Error를 찾아봅시다</p>
<ol>
<li>OutOfMemoryException</li>
<li>SecurityException</li>
<li>NetworkOnMainThreadException</li>
<li>IOException</li>
</ol>
<h3 id="SecurityException"><a href="#SecurityException" class="headerlink" title="SecurityException"></a>SecurityException</h3><hr>
<h2 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h2><hr>
<p>안드로이드 앱을 만들다 보면 Permissions이 필요하게 됩니다<br>잘 모르겠다고요?</p>
<p><img src="/img/adnroid-developing/2/facebook_permissions.jpg"></p>
<hr>
<p>좀 더 자세하게 설명하겠습니다</p>
<h2 id="Android-is-middleware"><a href="#Android-is-middleware" class="headerlink" title="Android is middleware"></a>Android is middleware</h2><p>리눅스 기반에 Kernel에서 돌아갑니다<br>리눅스에서 각각에 Android Application 은 고유 ID를 부여받습니다<br>서로 서로 침범을 못 하도록 SandBox에 보관하게 됩니다</p>
<p>민감한 데이터나 인터넷 접속같이 기기의 중요사항들을 차단합니다<br>이것을 해결하기 위해서 Permissions이 필요합니다</p>
<p><a href="http://developer.android.com/guide/topics/security/permissions.html">http://developer.android.com/guide/topics/security/permissions.html</a></p>
<p>Android Permissions에 대해서 정리되어있는 개발문서입니다</p>
<p>단순한 생각으로 ‘여기 있는 모든 Permissions을 추가하면 되겠다’는 생각을 가지면 안됩니다<br>정말 나쁜 생각입니다 그러면 안 됩니다!!!!<br>우리가 정말 필요한 최소한의 Permissions만 요청하도록 합시다</p>
<h2 id="Application에서-직접-해결하는-방법보다는-기존-것을-사용하는-방법을-더-추천-드립니다"><a href="#Application에서-직접-해결하는-방법보다는-기존-것을-사용하는-방법을-더-추천-드립니다" class="headerlink" title="Application에서 직접 해결하는 방법보다는 기존 것을 사용하는 방법을 더 추천 드립니다"></a>Application에서 직접 해결하는 방법보다는 기존 것을 사용하는 방법을 더 추천 드립니다</h2><blockquote>
<p>사진을 찍기 위해서 카메라 권한을 요청 하는 것보다 카메라 앱을 이용해서 사진을 찍는 것</p>
</blockquote>
<hr>
<p>Android 6.0 (Marshmallow)부터 Permissions에 대한 내용이 상당히 많이 변경되었습니다</p>
<p>Permissions에 대해서 모든 권한을 한 번에 승인을 하는 방식이 아닌 필요할 때 요청하는 방식으로 변경되었습니다</p>
<p>Marshmallow 기반으로 Application을 제작할 때는 Permissions에 대한 생각을 많이 하셔야 합니다</p>
<p>추천하는 라이브러리는 <a href="https://github.com/ParkSangGwon/TedPermission">TedPermission</a>입니다.</p>
<hr>
<p>manifest.xml 파일에 Permission을 추가합시다</p>
<p>어떤 Permission이 필요할까요?</p>
<hr>
<h2 id="android-permission-INTERNET"><a href="#android-permission-INTERNET" class="headerlink" title="android.permission.INTERNET"></a>android.permission.INTERNET</h2><p>실제 코드를 적어 봅시다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br><br>&lt;application<br>    <span class="hljs-comment">&lt;!--생략--&gt;</span><br>    &gt;<br><br></code></pre></td></tr></table></figure>

<p>실제로 데이터가 들어오는지 확인도 해야 합니다</p>
<p>MainActivityFragment.java - FetchWeatherTask - doInBackground()에서 작성합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">    forecastJsonStr = buffer.toString();<br><br>    Log.v(LOG_TAG, <span class="hljs-string">&quot;Forecast JSON String : &quot;</span> + forecastJsonStr);<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>이러고 실행을 합시다</p>
<p>Logcat을 이용해서 보면 데이터가 잘 들어온 것을 확인할 수 있습니다</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">02-05 20:08:05.002 11691-12680&#x2F;com.study.sunshine V&#x2F;FetchWeatherTask: Forecast JSON String : &quot;내용&quot;<br></code></pre></td></tr></table></figure>

<hr>
<p>생각해보니깐 지금 도시가 Uri에서 고정되어 있습니다 이것을 입력을 통해서 도시를 수정하도록 합시다</p>
<p>추가로 소스가 너무 더러운 부분이 많아요 고쳐봐요<br>(이걸 Refactoring이라고 부릅니다)</p>
<p>URL을 고정하게 하지 말고 Class를 사용해서 만들 수 있습니다</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br>    <span class="hljs-keyword">if</span>(id == R.id.action_refresh) &#123;<br>        FetchWeatherTask fetchWeatherTask = <span class="hljs-keyword">new</span> FetchWeatherTask();<br>        fetchWeatherTask.execute(<span class="hljs-string">&#x27;사용자입력&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이렇게 수정합니다</p>
<hr>
<p>하나하나씩 수정해 봅시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FetchWeatherTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>AsyncTask&lt; Params, Progress, Result&gt; 의 구조입니다<br>우리는 실행을 할 때 도시 이름을 넣어서 전달하기 때문에 Params을 수정해야합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FetchWeatherTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String LOG_TAG = FetchWeatherTask.class.getSimpleName();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Void <span class="hljs-title">doInBackground</span><span class="hljs-params">(String... params)</span> </span>&#123;<br>        <span class="hljs-comment">// 생략</span><br>    &#125;<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>다음으로 URL을 만들어야 합니다<br>Uri를 만들고 그것을 URL로 변경하면 됩니다</p>
<p>Uri 클래스를 찾아보고 어떻게 진행을 해야 하는지 생각해 보세요</p>
<p><a href="https://developer.android.com/reference/android/net/Uri.html">Uri Class</a></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String forecastJsonStr = <span class="hljs-keyword">null</span>;<br><br>String format = <span class="hljs-string">&quot;JSON&quot;</span>;<br>String units = <span class="hljs-string">&quot;metric&quot;</span>;<br><span class="hljs-keyword">int</span> numDays = <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">final</span> String FORECAST_BASE_URL = <span class="hljs-string">&quot;http://api.openweathermap.org/data/2.5/forecast/daily?&quot;</span>;<br>    <span class="hljs-keyword">final</span> String QUERY_PARAM = <span class="hljs-string">&quot;q&quot;</span>;<br>    <span class="hljs-keyword">final</span> String FORMAT_PARAM = <span class="hljs-string">&quot;mode&quot;</span>;<br>    <span class="hljs-keyword">final</span> String UNITS_PARAM = <span class="hljs-string">&quot;units&quot;</span>;<br>    <span class="hljs-keyword">final</span> String DAYS_PARAM = <span class="hljs-string">&quot;cnt&quot;</span>;<br>    <span class="hljs-keyword">final</span> String APPID_PARAM = <span class="hljs-string">&quot;APPID&quot;</span>;<br><br>    Uri uri = Uri.parse(FORECAST_BASE_URL).buildUpon()<br>                 .appendQueryParameter(QUERY_PARAM, params[<span class="hljs-number">0</span>])<br>                 .appendQueryParameter(FORMAT_PARAM, format)<br>                 .appendQueryParameter(UNITS_PARAM, units)<br>                 .appendQueryParameter(DAYS_PARAM, Integer.toString(numDays))<br>                 .appendQueryParameter(APPID_PARAM, BuildConfig.OPEN_WEATHER_MAP_API_KEY)<br>                 .build();<br><br>    URL url = <span class="hljs-keyword">new</span> URL(uri.toString());<br><br>    Log.v(LOG_TAG, <span class="hljs-string">&quot;URI : &quot;</span> + uri.toString());<br><br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>BuildConfig.OPEN_WEATHER_MAP_API_KEY 값은 build.gradle(Module: app) 파일에</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">buildTypes.<span class="hljs-keyword">each</span> &#123;<br>    it.buildConfigField <span class="hljs-string">&#x27;String&#x27;</span>, <span class="hljs-string">&#x27;OPEN_WEATHER_MAP_API_KEY&#x27;</span>, <span class="hljs-string">&#x27;&quot;API_KEY&quot;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>추가하면 됩니다</p>
<h2 id="주의-‘-‘-작은따옴표-를-사용해야-합니다"><a href="#주의-‘-‘-작은따옴표-를-사용해야-합니다" class="headerlink" title="주의 : ‘ ‘(작은따옴표)를 사용해야 합니다"></a>주의 : ‘ ‘(작은따옴표)를 사용해야 합니다</h2><hr>
<h2 id="JSON-Parser"><a href="#JSON-Parser" class="headerlink" title="JSON Parser"></a>JSON Parser</h2><p>이제 데이터도 잘 가지고 오고 내가 원하는 곳으로 이동도 잘 됩니다<br>그러면 가지고 온 데이터를 이용하겠습니다<br><a href="https://jsonformatter.curiousconcept.com/">https://jsonformatter.curiousconcept.com/</a><br>위 싸이트를 접속해서 우리가 받아온 데이터를 한번 넣어 봅시다</p>
<hr>
<p><img src="/img/adnroid-developing/2/9.png"></p>
<p><img src="/img/adnroid-developing/2/10.png"></p>
<hr>
<p>알 수 없던 정체불명의 데이터를 이쁘게 볼 수 있네요<br>한번 연습을 해야 합니다<br>어려울 수 있으나 JSON에 대해서 분석하고 파악해야 합니다</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getMaxTemperatureForDay</span><span class="hljs-params">(String weatherJsonStr, <span class="hljs-keyword">int</span> dayIndex)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> JSONException </span>&#123;<br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>그날의 최고기온을 뽑아 봅시다</p>
<p>dayIndex는 우리가 받아 온 데이터에서 +며칠인지를 의미합니다<br>String weatherJsonStr 은 아마 JSON 데이터를 그냥 넘겨 받은 거 같으니 JSON 데이터로 변환하여서 처리합시다</p>
<p>JSON을 처리하기 위해서는 2가지만 알면 됩니다</p>
<p><strong>JSONObject, JSONArray</strong></p>
<p>직접 찾아서 한번 만들어 보세요</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getMaxTemperatureForDay</span><span class="hljs-params">(String weatherJsonStr, <span class="hljs-keyword">int</span> dayIndex)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> JSONException </span>&#123;<br>    JSONObject weather = <span class="hljs-keyword">new</span> JSONObject(weatherJsonStr);<br>    JSONArray days = weather.getJSONArray(<span class="hljs-string">&quot;list&quot;</span>);<br>    JSONObject dayInfo = days.getJSONObject(dayIndex);<br>    JSONObject temperatureInfo = dayInfo.getJSONObject(<span class="hljs-string">&quot;temp&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> temperatureInfo.getDouble(<span class="hljs-string">&quot;max&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><a href="http://developer.android.com/reference/org/json/JSONObject.html">http://developer.android.com/reference/org/json/JSONObject.html</a></p>
<hr>
<p>우리 Application에서 실제로 적용합시다</p>
<p><img src="/img/adnroid-developing/2/11.png"></p>
<p>다음과 같이 FetchWeatherTask에서 결과 값이 나오도록 해야 합니다</p>
<p>조금 전 우리는 JSON 데이터 타입을 분석해서 가져오는 법을 했습니다<br>그것을 JSON 데이터를 분석하고 우리가 표시하고 싶은 형태로 바꾸도록 합시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FetchWeatherTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String LOG_TAG = FetchWeatherTask.class.getSimpleName();<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getReadableDateString</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time)</span></span>&#123;<br>        SimpleDateFormat shortenedDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;EEE MMM dd&quot;</span>);<br>        <span class="hljs-keyword">return</span> shortenedDateFormat.format(time);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">formatHighLows</span><span class="hljs-params">(<span class="hljs-keyword">double</span> high, <span class="hljs-keyword">double</span> low)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> roundedHigh = Math.round(high);<br>        <span class="hljs-keyword">long</span> roundedLow = Math.round(low);<br><br>        String highLowStr = roundedHigh + <span class="hljs-string">&quot;/&quot;</span> + roundedLow;<br>        <span class="hljs-keyword">return</span> highLowStr;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String[] getWeatherDataFromJson(String forecastJsonStr, <span class="hljs-keyword">int</span> numDays)<br>        <span class="hljs-keyword">throws</span> JSONException &#123;<br><br>        <span class="hljs-keyword">final</span> String OWM_LIST = <span class="hljs-string">&quot;list&quot;</span>;<br>        <span class="hljs-keyword">final</span> String OWM_WEATHER = <span class="hljs-string">&quot;weather&quot;</span>;<br>        <span class="hljs-keyword">final</span> String OWM_TEMPERATURE = <span class="hljs-string">&quot;temp&quot;</span>;<br>        <span class="hljs-keyword">final</span> String OWM_MAX = <span class="hljs-string">&quot;max&quot;</span>;<br>        <span class="hljs-keyword">final</span> String OWM_MIN = <span class="hljs-string">&quot;min&quot;</span>;<br>        <span class="hljs-keyword">final</span> String OWM_DESCRIPTION = <span class="hljs-string">&quot;main&quot;</span>;<br><br>        JSONObject forecastJson = <span class="hljs-keyword">new</span> JSONObject(forecastJsonStr);<br>        JSONArray weatherArray = forecastJson.getJSONArray(OWM_LIST);<br><br><br>        Time dayTime = <span class="hljs-keyword">new</span> Time();<br>        dayTime.setToNow();<br><br>        <span class="hljs-keyword">int</span> julianStartDay = Time.getJulianDay(System.currentTimeMillis(), dayTime.gmtoff);<br><br>        dayTime = <span class="hljs-keyword">new</span> Time();<br><br>        String[] resultStrs = <span class="hljs-keyword">new</span> String[numDays];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; weatherArray.length(); i++) &#123;<br>            String day;<br>            String description;<br>            String highAndLow;<br><br>            JSONObject dayForecast = weatherArray.getJSONObject(i);<br><br>            <span class="hljs-keyword">long</span> dateTime;<br><br>            dateTime = dayTime.setJulianDay(julianStartDay+i);<br>            day = getReadableDateString(dateTime);<br><br>            JSONObject weatherObject = dayForecast.getJSONArray(OWM_WEATHER).getJSONObject(<span class="hljs-number">0</span>);<br>            description = weatherObject.getString(OWM_DESCRIPTION);<br><br>            JSONObject temperatureObject = dayForecast.getJSONObject(OWM_TEMPERATURE);<br>            <span class="hljs-keyword">double</span> high = temperatureObject.getDouble(OWM_MAX);<br>            <span class="hljs-keyword">double</span> low = temperatureObject.getDouble(OWM_MIN);<br><br>            highAndLow = formatHighLows(high, low);<br>            resultStrs[i] = day + <span class="hljs-string">&quot; - &quot;</span> + description + <span class="hljs-string">&quot; - &quot;</span> + highAndLow;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (String s : resultStrs) &#123;<br>            Log.v(LOG_TAG, <span class="hljs-string">&quot;Forecast entry: &quot;</span> + s);<br>        &#125;<br>        <span class="hljs-keyword">return</span> resultStrs;<br>    &#125;<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>doInBackground의 맨 밑으로 이동합시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> getWeatherDataFromJson(forecastJsonStr, numDays);<br>&#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>    Log.e(LOG_TAG, e.getMessage(), e);<br>    e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure>

<hr>
<p>실행하고 Logcat을 확인하면 Log에 날씨 정보들이 다 표시되는걸 볼 수 있습니다<br>이제 이 데이터를 UI Thread(Main Thread)에 전달하는지 AsyncTask를 봅시다<br>AsyncTask 에서 모든 작업이 완료된 후에 우리는 UI Thread에 전달하면 됩니다<br>바로 onPostExecute을 이용하면 됩니다<br>일단 mForecastAdapter를 전역 변수화 시킵시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForecastFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ArrayAdapter&lt;String&gt; mForecastAdapter;<br>    <span class="hljs-comment">// 생략</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                              Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-comment">// ArrayAdapter&lt;String&gt; mForecastAdapter;</span><br>        mForecastAdapter =<br>                <span class="hljs-keyword">new</span> ArrayAdapter&lt;String&gt;(<br>                        getActivity(),<br>                        R.layout.list_item_forecast,<br>                        R.id.list_item_forecast_textview,<br>                        weekForecast);<br>        <span class="hljs-comment">// 생략</span><br>        <span class="hljs-keyword">return</span> rootView;<br>    &#125;<br><span class="hljs-comment">//생략</span><br>&#125;<br></code></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPostExecute</span><span class="hljs-params">(String[] strings)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(strings != <span class="hljs-keyword">null</span>) &#123;<br>        mForecastAdapter.clear();<br>        <span class="hljs-keyword">for</span>(String daysForecastStr : strings) &#123;<br>            mForecastAdapter.add(daysForecastStr);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이러면 끝입니다</p>
<p>빌드를 하고 실행을 하면 우리가 설정한 도시의 날씨 예보를 볼 수 있습니다</p>
<p>제대로 되었다면 Log.v로 선언한 verbose Log를 다 지웁시다</p>
<p>마지막으로 하나만 더 하면 됩니다</p>
<hr>
<p><img src="/img/adnroid-developing/2/12.png"></p>
<p><img src="/img/adnroid-developing/2/13.png"></p>
<p>ForecastFragment로 바꿔 주세요</p>
<hr>
<h2 id="자동으로-데이터가-수정되는데-어떻게-동작하는-걸까요"><a href="#자동으로-데이터가-수정되는데-어떻게-동작하는-걸까요" class="headerlink" title="자동으로 데이터가 수정되는데 어떻게 동작하는 걸까요?"></a>자동으로 데이터가 수정되는데 어떻게 동작하는 걸까요?</h2><hr>
<p><img src="/img/adnroid-developing/2/14.png"></p>
<p><img src="/img/adnroid-developing/2/15.png"></p>
<p><img src="/img/adnroid-developing/2/16.png"></p>
<p><img src="/img/adnroid-developing/2/17.png"></p>
<hr>
<p><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/widget/ArrayAdapter.java#192">https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/widget/ArrayAdapter.java#192</a></p>
<p>정답은 여기 있습니다</p>
<p>Add를 할 때마다 자동으로 호출이 됩니다<br>우리가 앞으로 진행될 때마다 궁금한 사항이 있으면 직접 확인해 보세요!!<br>Android는 Open Source입니다!</p>
<hr>
<h1 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수 !!"></a>복습은 필수 !!</h1><ul>
<li>HttpURLConnection</li>
<li>Logcat</li>
<li>MainThread vs. Background Thread</li>
<li>AsyncTask</li>
<li>Adding Menu Buttons</li>
<li>values/strings.xml</li>
<li>Permissions</li>
<li>JSON Parsing</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>4. Activity Lifecycle and Data</title>
    <url>/2017/02/09/adnroid-developing/Developing-Android-Apps-04/</url>
    <content><![CDATA[<h1 id="Activity-Lifecycle"><a href="#Activity-Lifecycle" class="headerlink" title="Activity Lifecycle"></a>Activity Lifecycle</h1><p>우리는 기본적으로 Intent를 더 살펴 봅시다<br>MainActivity에서 항목을 클릭하면 DetailActivity가 나옵니다<br>back button을 클릭하면 다시 MainActivity로 돌아갑니다<br>계속 같은 앱에서 동작을 하는 것 입니다</p>
<p>또, 지도를 보거나 메세지를 전송하는 창에서도 동일하게 작동합니다<br>홈 버튼을 눌러서 홈 화면으로 갈 수도 있습니다</p>
<p>이런식으로 Android에서는 여러개의 작업들이 뒤에서 돌아가고 있습니다<br>그러나 리소스는 제한적이기 때문에 백그라운드에 깔아놓으면 안됩니다</p>
<p>이것을 TaskKiller Application을 사용하면 안됩니다 자동으로 해줍니다</p>
<p>우리는 이것을 방지하기 위해서 Application에서 Lifetime에서 어디쯤 위치하는지 알려주는 <strong>Framework 신호들</strong>과 <strong>Activity의 Lifecycle</strong>을 이해해야 합니다</p>
<p><img src="/img/adnroid-developing/4/0.png"></p>
<p>active life cycle은 activity가 foreground에 있고 focus가 잡혀 있을 때를 뜻합니다</p>
<p><img src="/img/adnroid-developing/4/1.png"></p>
<hr>
<h1 id="Android-화면을-회전-했을-때-Lifecycle의-순서를-생각해보세요"><a href="#Android-화면을-회전-했을-때-Lifecycle의-순서를-생각해보세요" class="headerlink" title="Android 화면을 회전 했을 때 Lifecycle의 순서를 생각해보세요"></a>Android 화면을 회전 했을 때 Lifecycle의 순서를 생각해보세요</h1><ol>
<li>onPause</li>
<li>onStop</li>
<li>onCreate</li>
<li>onResume</li>
<li>onStart</li>
<li>onDestroy</li>
</ol>
<h2 id="onPause-gt-onStop-gt-onDestroy-gt-onCreate-gt-onStart-gt-onResume"><a href="#onPause-gt-onStop-gt-onDestroy-gt-onCreate-gt-onStart-gt-onResume" class="headerlink" title="onPause -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onStart -&gt; onResume"></a>onPause -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onStart -&gt; onResume</h2><hr>
<p>허니콤부터는 Android Application이 종료 위기에 몰리기 전에 Stopped가 호출이 됩니다.<br>하지만, 허니콤 이전 기기를 지원하려면 Paused때 부터 준비해야합니다</p>
<p>앱이 생각지도 못하게 종료되는 경우에 대해서 미리 준비하고 예방해야 합니다</p>
<p>App 사용자 입장에서는 신경 쓸 것이 없습니다<br>메모리가 부족하닌깐 Background에 있는 Application이 종료됩니다 하는 메세지가 나오지 않거든여</p>
<p>Foreground의 Application이 중요합니다 그렇기 때문에 Background의 Application은 종료됩니다<br>그렇다고 해서 완전 종료는 아닙니다 다시 살아날 준비를 하고 있습니다</p>
<p><strong>onStop</strong>과 <strong>onPause</strong>는 언제든지 우리의 Application이 종료 될 수 있는다는 것을 의미합니다</p>
<h3 id="onPause-or-onStop에서-중지-연결해제가-되어야-하는-몇가지-예들"><a href="#onPause-or-onStop에서-중지-연결해제가-되어야-하는-몇가지-예들" class="headerlink" title="onPause or onStop에서 중지/연결해제가 되어야 하는 몇가지 예들"></a>onPause or onStop에서 중지/연결해제가 되어야 하는 몇가지 예들</h3><ul>
<li>Sensor Listeners</li>
<li>Location Updates</li>
<li>Dynamic Broadcast Receivers</li>
<li>Game Physics Engine</li>
</ul>
<h3 id="모든-Application은-Background에서-다시-실행-되기를-기다리고-있습니다"><a href="#모든-Application은-Background에서-다시-실행-되기를-기다리고-있습니다" class="headerlink" title="모든 Application은 Background에서 다시 실행 되기를 기다리고 있습니다"></a>모든 Application은 Background에서 다시 실행 되기를 기다리고 있습니다</h3><p>우리는 이러한 환상을 지켜줘야 합니다!<br>다시 Application이 불려졌을 때 예전에 보았던 UI 그대로가 나타나야합니다</p>
<p><img src="/img/adnroid-developing/4/2.png"></p>
<hr>
<p><strong>라이프 사이클에 영향을 받지 않도록 Application을 작성해야합니다</strong></p>
<p>우리는 한번 생각해봅시다<br>인터넷 연결을 할 수 없다면?<br>어플리케이션이 Battery를 너무 많이 사용한다면?<br>데이터 통신을 하는데 많은 비용을 내기 싫다면?</p>
<p>이 모든 상황을 준비하기 위해서는 <strong>날씨를 미리 저장</strong>해 두면 됩니다</p>
<p>중요한건은 UX입니다<br>Application을 실행 했을 때 바로 날씨를 보여줘야 하는것이죠</p>
<p><strong>인터넷을 계속 사용한다면 Battery소모가 심합니다!</strong><br>이것은 우리가 만든 Application 유저를 버리는 행동입니다</p>
<p>우리는 데이터를 저장해서 보여주도록 합시다</p>
<h3 id="다시한번-정리-합시다"><a href="#다시한번-정리-합시다" class="headerlink" title="다시한번 정리 합시다"></a>다시한번 정리 합시다</h3><ol>
<li>인터넷 접속이 많으면 배터리 소모가 심하다</li>
<li>인터넷 접속은 많은 요금을 발생 시킨다</li>
<li>인터넷 접속 환경은 생각보다 좋지 않다</li>
<li>온라인, 오프라인을 구분하면 안된다 다 사용 가능해야한다</li>
<li>어떤 환경에서도 Application은 구동 가능해야한다</li>
</ol>
<hr>
<h2 id="DataBase"><a href="#DataBase" class="headerlink" title="DataBase"></a>DataBase</h2><p>Android 내에서 File들은 수없이 많습니다</p>
<p>이것을 개발자에게 필요한 정보들로 구조화 시킨 스토리지가 다수 있습니다<br>우리도 이중에 한가지를 배웠습니다</p>
<p>많이 사용하는 것중에 우리는 2가지를 사용하겠습니다<br>SharedPreferences와 SQLite Database를 사용하겠습니다</p>
<p>SharedPreferences는 key-value 형태 이기 때문에 유연성이 많이 떨어집니다<br>제한된 정보만 저장하기도 하고여</p>
<p>SQLite를 이용합시다<br>경량의 관계형 데이터베이스를 구현하고 있습니다<br>SQL문을 사용해서 편하게 할 수 있습니다!!</p>
<p><img src="/img/adnroid-developing/4/3.png"></p>
<p><img src="/img/adnroid-developing/4/4.png"></p>
<p>우리는 이러한 테이블을 이용하고 많은 Schma를 사용합니다<br>기본적인 Database에 대한 지식이 필요합니다</p>
<p>Database수업이 아니닌깐 <a href="http://www.sqlite.org/">sqlite</a>에서 배우도록 합시다</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> weather <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">max</span> <span class="hljs-keyword">DESC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p>이정도 sql문의 결과를 예측 가능하면 충분히 따라 올 수 있습니다</p>
<p>대부분의 Android Application에서는 sqlite3를 사용하고 있습니다<br>Android 내부에서도 많이 도움을 주고 있습니다</p>
<p><a href="http://developer.android.com/intl/ko/guide/topics/data/index.html">http://developer.android.com/intl/ko/guide/topics/data/index.html</a></p>
<p>싸이트에서 한번 읽어보고 필요한것을 찾아 쓰도록 하세여</p>
<p><img src="/img/adnroid-developing/4/5.png"></p>
<p>위 그림은 Sunshine Application의 예상되는 Database Struct 입니다<br>많은 내용이 있고 생각보다 어려울 것입니다</p>
<p>천천히 해봐여 항상 그래왔듯이 앞으로도 그렇게 하면 됩니다<br><strong>모르면 하나하나 천천히!!</strong></p>
<p><img src="/img/adnroid-developing/4/6.png"></p>
<hr>
<h2 id="Contract-계약"><a href="#Contract-계약" class="headerlink" title="Contract(계약)"></a>Contract(계약)</h2><p>Database를 설계 할 때는 Contract를 먼저해야합니다<br>필요한 정보는 무엇이고 어떤것을 표현하고 해야하는지를 알아야 합니다<br><a href="http://developer.android.com/intl/ko/reference/android/provider/ContactsContract.html">ContactsContract</a></p>
<p><img src="/img/adnroid-developing/4/7.png"></p>
<p><img src="/img/adnroid-developing/4/8.png"></p>
<p><img src="/img/adnroid-developing/4/9.png"></p>
<p>우리는 날씨정보와 위치 정보를 따로 분리해서 각각의 테이블로 저장 할 것입니다</p>
<p>왜 그렇게 하는지는 Database를 공부하고 배우도록 합시다</p>
<p><img src="/img/adnroid-developing/4/10.png"></p>
<p><img src="/img/adnroid-developing/4/11.png"></p>
<p><img src="/img/adnroid-developing/4/12.png"></p>
<p>이것을 실제로 코드로 옮겨봅시다</p>
<p>data package를 만들어서 WeatherContract 클래스를 만들어 봅시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.provider.BaseColumns;<br><span class="hljs-keyword">import</span> android.text.format.Time;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherContract</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">normalizeDate</span><span class="hljs-params">(<span class="hljs-keyword">long</span> startDate)</span> </span>&#123;<br>        Time time = <span class="hljs-keyword">new</span> Time();<br>        time.set(startDate);<br>        <span class="hljs-keyword">int</span> julianDay = Time.getJulianDay(startDate, time.gmtoff);<br>        <span class="hljs-keyword">return</span> time.setJulianDay(julianDay);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocationEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BaseColumns</span> </span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TABLE_NAME = <span class="hljs-string">&quot;location&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_LOCATION_SETTING = <span class="hljs-string">&quot;location_setting&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_CITY_NAME = <span class="hljs-string">&quot;city_name&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_COORD_LAT = <span class="hljs-string">&quot;coord_lat&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_COORD_LONG = <span class="hljs-string">&quot;coord_long&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BaseColumns</span> </span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TABLE_NAME = <span class="hljs-string">&quot;weather&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_LOC_KEY = <span class="hljs-string">&quot;location_id&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_DATE = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_WEATHER_ID = <span class="hljs-string">&quot;weather_id&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_SHORT_DESC = <span class="hljs-string">&quot;short_desc&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_MIN_TEMP = <span class="hljs-string">&quot;min&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_MAX_TEMP = <span class="hljs-string">&quot;max&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_HUMIDITY = <span class="hljs-string">&quot;humidity&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_PRESSURE = <span class="hljs-string">&quot;pressure&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_WIND_SPEED = <span class="hljs-string">&quot;wind&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COLUMN_DEGREES = <span class="hljs-string">&quot;degrees&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>아직 Database를 만든것이 아닙니다<br><strong>단지, Contract를 했을 뿐이져</strong></p>
<p>실제로 Database와 작업을 하는 것은 DB Helper입니다</p>
<hr>
<h2 id="SQLiteOpenHelper"><a href="#SQLiteOpenHelper" class="headerlink" title="SQLiteOpenHelper"></a>SQLiteOpenHelper</h2><p>DB Helper를 이용해서 데이터베이스를 생성하고 테이블을 만들고 데이터를 수정합니다<br>DB Helper 중에서 SQLiteOpenHelper를 사용해 봅시다<br>data package에서 WeatherDbHelper를 만들어 보세여</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherDbHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SQLiteOpenHelper</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DATABASE_VERSION = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 데이터 베이스의 버전을 의미합니다</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DATABASE_NAME = <span class="hljs-string">&quot;weather.db&quot;</span>;<br>    <span class="hljs-comment">// 데이터 베이스 파일의 이름을 정합니다</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherDbHelper</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(context, DATABASE_NAME, <span class="hljs-keyword">null</span>, DATABASE_VERSION);<br>        <span class="hljs-comment">// 생성자를 이용해서 데이터 베이스 이름, 버전을 정하게 됩니다</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> String SQL_CREATE_WEATHER_TABLE = <span class="hljs-string">&quot;CREATE TABLE &quot;</span> + WeatherEntry.TABLE_NAME + <span class="hljs-string">&quot; (&quot;</span> +<br>                WeatherEntry._ID + <span class="hljs-string">&quot; INTEGER PRIMARY KEY AUTOINCREMENT,&quot;</span> +<br><br>                WeatherEntry.COLUMN_LOC_KEY + <span class="hljs-string">&quot; INTEGER NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot; INTEGER NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_SHORT_DESC + <span class="hljs-string">&quot; TEXT NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_WEATHER_ID + <span class="hljs-string">&quot; INTEGER NOT NULL,&quot;</span> +<br><br>                WeatherEntry.COLUMN_MIN_TEMP + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_MAX_TEMP + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br><br>                WeatherEntry.COLUMN_HUMIDITY + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_PRESSURE + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_WIND_SPEED + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br>                WeatherEntry.COLUMN_DEGREES + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br><br>                <span class="hljs-string">&quot; FOREIGN KEY (&quot;</span> + WeatherEntry.COLUMN_LOC_KEY + <span class="hljs-string">&quot;) REFERENCES &quot;</span> +<br>                LocationEntry.TABLE_NAME + <span class="hljs-string">&quot; (&quot;</span> + LocationEntry._ID + <span class="hljs-string">&quot;), &quot;</span> +<br><br>                <span class="hljs-string">&quot; UNIQUE (&quot;</span> + WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot;, &quot;</span> +<br>                WeatherEntry.COLUMN_LOC_KEY + <span class="hljs-string">&quot;) ON CONFLICT REPLACE);&quot;</span>;<br><br>        sqLiteDatabase.execSQL(SQL_CREATE_WEATHER_TABLE);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-keyword">int</span> oldVersion, <span class="hljs-keyword">int</span> newVersion)</span> </span>&#123;<br>        sqLiteDatabase.execSQL(<span class="hljs-string">&quot;DROP TABLE IF EXISTS &quot;</span> + LocationEntry.TABLE_NAME);<br>        sqLiteDatabase.execSQL(<span class="hljs-string">&quot;DROP TABLE IF EXISTS &quot;</span> + WeatherEntry.TABLE_NAME);<br>        onCreate(sqLiteDatabase);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>우리는 이제까지 작업을 진행하면서 될지 안될지 테스트를 항상 에뮬레이터나 폰으로 직접 테스트를 해봤습니다<br>과연 이게 좋은것일까요??</p>
<p>Android Studio라는 좋은 IDE에 이런거 하나 없을까여??<br>그래서 준비 되어있습니다</p>
<p>JUnit testing 과 Android testing 기능입니다<br>사실 너무 어려운 내용이라서 이것을 수업을 할까 말까 고민했습니다<br>안해도 되거든여 그냥 폰으로 한다고 해서 문제 생길일은 없습니다만!<br>제대로된 개발을 하자고여 제대로된!!!</p>
<hr>
<h2 id="Android-Test"><a href="#Android-Test" class="headerlink" title="Android Test"></a>Android Test</h2><p>다음 파일들이 준비되어있습니다<br>파일을 다 만들고 자세한 설명을 하겠습니다</p>
<p><img src="/img/adnroid-developing/4/13.png"></p>
<figure class="highlight java"><figcaption><span>FullTestSuite.java</span><a href="/downloads/code/4/FullTestSuite.java">view raw</a></figcaption><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.sunshine;<br><br><span class="hljs-keyword">import</span> android.test.suitebuilder.TestSuiteBuilder;<br><br><span class="hljs-keyword">import</span> junit.framework.Test;<br><span class="hljs-keyword">import</span> junit.framework.TestSuite;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FullTestSuite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestSuite</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test <span class="hljs-title">suite</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestSuiteBuilder(FullTestSuite.class)<br>                .includeAllPackagesUnderHere().build();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FullTestSuite</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">super</span>();<br>    }<br>}<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>TestDb.java</span><a href="/downloads/code/4/TestDb.java">view raw</a></figcaption><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.test.AndroidTestCase;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDb</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AndroidTestCase</span> </span>{<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOG_TAG = TestDb.class.getSimpleName();<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteTheDatabase</span><span class="hljs-params">()</span> </span>{<br>        mContext.deleteDatabase(WeatherDbHelper.DATABASE_NAME);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>{<br>        deleteTheDatabase();<br>    }<br><br><span class="hljs-comment">//    public void testCreateDb() throws Throwable {</span><br><span class="hljs-comment">//        final HashSet&lt;String&gt; tableNameHashSet = new HashSet&lt;String&gt;();</span><br><span class="hljs-comment">//        tableNameHashSet.add(WeatherContract.LocationEntry.TABLE_NAME);</span><br><span class="hljs-comment">//        tableNameHashSet.add(WeatherContract.WeatherEntry.TABLE_NAME);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        mContext.deleteDatabase(WeatherDbHelper.DATABASE_NAME);</span><br><span class="hljs-comment">//        SQLiteDatabase db = new WeatherDbHelper(</span><br><span class="hljs-comment">//                this.mContext).getWritableDatabase();</span><br><span class="hljs-comment">//        assertEquals(true, db.isOpen());</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Cursor c = db.rawQuery(&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27;&quot;, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        assertTrue(&quot;Error: This means that the database has not been created correctly&quot;,</span><br><span class="hljs-comment">//                c.moveToFirst());</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        do {</span><br><span class="hljs-comment">//            tableNameHashSet.remove(c.getString(0));</span><br><span class="hljs-comment">//        } while( c.moveToNext() );</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        assertTrue(&quot;Error: Your database was created without both the location entry and weather entry tables&quot;,</span><br><span class="hljs-comment">//                tableNameHashSet.isEmpty());</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        c = db.rawQuery(&quot;PRAGMA table_info(&quot; + WeatherContract.LocationEntry.TABLE_NAME + &quot;)&quot;,</span><br><span class="hljs-comment">//                null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        assertTrue(&quot;Error: This means that we were unable to query the database for table information.&quot;,</span><br><span class="hljs-comment">//                c.moveToFirst());</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        final HashSet&lt;String&gt; locationColumnHashSet = new HashSet&lt;String&gt;();</span><br><span class="hljs-comment">//        locationColumnHashSet.add(WeatherContract.LocationEntry._ID);</span><br><span class="hljs-comment">//        locationColumnHashSet.add(WeatherContract.LocationEntry.COLUMN_CITY_NAME);</span><br><span class="hljs-comment">//        locationColumnHashSet.add(WeatherContract.LocationEntry.COLUMN_COORD_LAT);</span><br><span class="hljs-comment">//        locationColumnHashSet.add(WeatherContract.LocationEntry.COLUMN_COORD_LONG);</span><br><span class="hljs-comment">//        locationColumnHashSet.add(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        int columnNameIndex = c.getColumnIndex(&quot;name&quot;);</span><br><span class="hljs-comment">//        do {</span><br><span class="hljs-comment">//            String columnName = c.getString(columnNameIndex);</span><br><span class="hljs-comment">//            locationColumnHashSet.remove(columnName);</span><br><span class="hljs-comment">//        } while(c.moveToNext());</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        assertTrue(&quot;Error: The database doesn&#x27;t contain all of the required location entry columns&quot;,</span><br><span class="hljs-comment">//                locationColumnHashSet.isEmpty());</span><br><span class="hljs-comment">//        db.close();</span><br><span class="hljs-comment">//    }</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLocationTable</span><span class="hljs-params">()</span> </span>{<br><br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testWeatherTable</span><span class="hljs-params">()</span> </span>{<br>    }<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">insertLocation</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1L</span>;<br>    }<br>}<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>TestPractice.java</span><a href="/downloads/code/4/TestPractice.java">view raw</a></figcaption><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.test.AndroidTestCase;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPractice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AndroidTestCase</span> </span>{<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        This gets run before every test.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>        <span class="hljs-keyword">super</span>.setUp();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testThatDemonstratesAssertions</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>{<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span> d = <span class="hljs-number">10</span>;<br><br>        assertEquals(<span class="hljs-string">&quot;X should be equal&quot;</span>, a, c);<br>        assertTrue(<span class="hljs-string">&quot;Y should be true&quot;</span>, d &gt; a);<br>        assertFalse(<span class="hljs-string">&quot;Z should be false&quot;</span>, a == b);<br><br>        <span class="hljs-keyword">if</span> (b &gt; d) {<br>            fail(<span class="hljs-string">&quot;XX should never happen&quot;</span>);<br>        }<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{<br>        <span class="hljs-keyword">super</span>.tearDown();<br>    }<br>}<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>TestUtilities.java</span><a href="/downloads/code/4/TestUtilities.java">view raw</a></figcaption><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.ContentValues;<br><span class="hljs-keyword">import</span> android.database.ContentObserver;<br><span class="hljs-keyword">import</span> android.database.Cursor;<br><span class="hljs-keyword">import</span> android.net.Uri;<br><span class="hljs-keyword">import</span> android.os.Handler;<br><span class="hljs-keyword">import</span> android.os.HandlerThread;<br><span class="hljs-keyword">import</span> android.test.AndroidTestCase;<br><br><span class="hljs-keyword">import</span> com.study.sunshine.utils.PollingCheck;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUtilities</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AndroidTestCase</span> </span>{<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TEST_LOCATION = <span class="hljs-string">&quot;Seoul,kr&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> TEST_DATE = <span class="hljs-number">1485700000L</span>; <span class="hljs-comment">// 2017 - 01 - 29;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateCursor</span><span class="hljs-params">(String error, Cursor valueCursor, ContentValues expectedValues)</span> </span>{<br>        assertTrue(<span class="hljs-string">&quot;Empty cursor returned. &quot;</span> + error, valueCursor.moveToFirst());<br>        validateCurrentRecord(error, valueCursor, expectedValues);<br>        valueCursor.close();<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateCurrentRecord</span><span class="hljs-params">(String error, Cursor valueCursor, ContentValues expectedValues)</span> </span>{<br>        Set&lt;Map.Entry&lt;String, Object&gt;&gt; valueSet = expectedValues.valueSet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : valueSet) {<br>            String columnName = entry.getKey();<br>            <span class="hljs-keyword">int</span> idx = valueCursor.getColumnIndex(columnName);<br>            assertFalse(<span class="hljs-string">&quot;Column &#x27;&quot;</span> + columnName + <span class="hljs-string">&quot;&#x27; not found. &quot;</span> + error, idx == -<span class="hljs-number">1</span>);<br>            String expectedValue = entry.getValue().toString();<br>            assertEquals(<span class="hljs-string">&quot;Value &#x27;&quot;</span> + entry.getValue().toString() +<br>                    <span class="hljs-string">&quot;&#x27; did not match the expected value &#x27;&quot;</span> +<br>                    expectedValue + <span class="hljs-string">&quot;&#x27;. &quot;</span> + error, expectedValue, valueCursor.getString(idx));<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> ContentValues <span class="hljs-title">createWeatherValues</span><span class="hljs-params">(<span class="hljs-keyword">long</span> locationRowId)</span> </span>{<br>        ContentValues weatherValues = <span class="hljs-keyword">new</span> ContentValues();<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_LOC_KEY, locationRowId);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_DATE, TEST_DATE);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_DEGREES, <span class="hljs-number">1.1</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_HUMIDITY, <span class="hljs-number">1.2</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_PRESSURE, <span class="hljs-number">1.3</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_MAX_TEMP, <span class="hljs-number">75</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_MIN_TEMP, <span class="hljs-number">65</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_SHORT_DESC, <span class="hljs-string">&quot;Asteroids&quot;</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_WIND_SPEED, <span class="hljs-number">5.5</span>);<br>        weatherValues.put(WeatherContract.WeatherEntry.COLUMN_WEATHER_ID, <span class="hljs-number">321</span>);<br><br>        <span class="hljs-keyword">return</span> weatherValues;<br>    }<br>  <br><span class="hljs-comment">//    static ContentValues createNorthPoleLocationValues() {</span><br><span class="hljs-comment">//        ContentValues testValues = new ContentValues();</span><br><span class="hljs-comment">//        testValues.put(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING, TEST_LOCATION);</span><br><span class="hljs-comment">//        testValues.put(WeatherContract.LocationEntry.COLUMN_CITY_NAME, &quot;North Pole&quot;);</span><br><span class="hljs-comment">//        testValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LAT, 64.7488);</span><br><span class="hljs-comment">//        testValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LONG, -147.353);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return testValues;</span><br><span class="hljs-comment">//    }</span><br><br><span class="hljs-comment">//    static long insertNorthPoleLocationValues(Context context) {</span><br><span class="hljs-comment">//        WeatherDbHelper dbHelper = new WeatherDbHelper(context);</span><br><span class="hljs-comment">//        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="hljs-comment">//        ContentValues testValues = TestUtilities.createNorthPoleLocationValues();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        long locationRowId;</span><br><span class="hljs-comment">//        locationRowId = db.insert(WeatherContract.LocationEntry.TABLE_NAME, null, testValues);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        // Verify we got a row back.</span><br><span class="hljs-comment">//        assertTrue(&quot;Error: Failure to insert North Pole Location Values&quot;, locationRowId != -1);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        return locationRowId;</span><br><span class="hljs-comment">//    }</span><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestContentObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ContentObserver</span> </span>{<br>        <span class="hljs-keyword">final</span> HandlerThread mHT;<br>        <span class="hljs-keyword">boolean</span> mContentChanged;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> TestContentObserver <span class="hljs-title">getTestContentObserver</span><span class="hljs-params">()</span> </span>{<br>            HandlerThread ht = <span class="hljs-keyword">new</span> HandlerThread(<span class="hljs-string">&quot;ContentObserverThread&quot;</span>);<br>            ht.start();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TestContentObserver(ht);<br>        }<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">TestContentObserver</span><span class="hljs-params">(HandlerThread ht)</span> </span>{<br>            <span class="hljs-keyword">super</span>(<span class="hljs-keyword">new</span> Handler(ht.getLooper()));<br>            mHT = ht;<br>        }<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onChange</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> selfChange)</span> </span>{<br>            onChange(selfChange, <span class="hljs-keyword">null</span>);<br>        }<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onChange</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> selfChange, Uri uri)</span> </span>{<br>            mContentChanged = <span class="hljs-keyword">true</span>;<br>        }<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">waitForNotificationOrFail</span><span class="hljs-params">()</span> </span>{<br>            <span class="hljs-keyword">new</span> PollingCheck(<span class="hljs-number">5000</span>) {<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>{<br>                    <span class="hljs-keyword">return</span> mContentChanged;<br>                }<br>            }.run();<br>            mHT.quit();<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> TestContentObserver <span class="hljs-title">getTestContentObserver</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> TestContentObserver.getTestContentObserver();<br>    }<br>}<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>PollingCheck.java</span><a href="/downloads/code/4/PollingCheck.java">view raw</a></figcaption><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> junit.framework.Assert;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PollingCheck</span> </span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> TIME_SLICE = <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> mTimeout = <span class="hljs-number">3000</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PollingCheck</span><span class="hljs-params">()</span> </span>{<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PollingCheck</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout)</span> </span>{<br>        mTimeout = timeout;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (check()) {<br>            <span class="hljs-keyword">return</span>;<br>        }<br><br>        <span class="hljs-keyword">long</span> timeout = mTimeout;<br>        <span class="hljs-keyword">while</span> (timeout &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">try</span> {<br>                Thread.sleep(TIME_SLICE);<br>            } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>                Assert.fail(<span class="hljs-string">&quot;unexpected InterruptedException&quot;</span>);<br>            }<br><br>            <span class="hljs-keyword">if</span> (check()) {<br>                <span class="hljs-keyword">return</span>;<br>            }<br><br>            timeout -= TIME_SLICE;<br>        }<br><br>        Assert.fail(<span class="hljs-string">&quot;unexpected timeout&quot;</span>);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(CharSequence message, <span class="hljs-keyword">long</span> timeout, Callable&lt;Boolean&gt; condition)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>{<br>        <span class="hljs-keyword">while</span> (timeout &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">if</span> (condition.call()) {<br>                <span class="hljs-keyword">return</span>;<br>            }<br><br>            Thread.sleep(TIME_SLICE);<br>            timeout -= TIME_SLICE;<br>        }<br><br>        Assert.fail(message.toString());<br>    }<br>}<br></code></pre></td></tr></table></figure>

<p><img src="/img/adnroid-developing/4/14.png"></p>
<hr>
<p>다음과 같이 실행을 하면 실패할 것입니다<br>기본적으로 가상머신이나 실제 폰으로 돌린다면 아무 화면의 결과는 표시되지 않습니다</p>
<p><img src="/img/adnroid-developing/4/15.png"></p>
<p><img src="/img/adnroid-developing/4/16.png"></p>
<p>다음과 같이 실행을 하면 테스트가 잘 끝나고 정상적으로 성공했다는 메시지가 나옵니다<br>왼쪽에는 성공하면 초록색으로 실패하면 빨강색으로 표시됩니다.<br>오른쪽에는 메시지가 출력됩니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">assertEquals(<span class="hljs-string">&quot;X should be equal&quot;</span>, a, c);<br>assertTrue(<span class="hljs-string">&quot;Y should be true&quot;</span>, d &gt; a);<br>assertFalse(<span class="hljs-string">&quot;Z should be false&quot;</span>, a == b);<br></code></pre></td></tr></table></figure>

<p>3가지 종류의 테스트 방법을 이용해서 하면 됩니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (b &gt; d) &#123;<br>    fail(<span class="hljs-string">&quot;XX should never happen&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>IF문을 통해서 검사하고 fail 문구를 표시할 수도 있습니다</p>
<p>TestDb 클래스에서 <strong>testCreateDb()</strong> 주석을 해제합니다<br>TestUtilities 클래스에서 <strong>createNorthPoleLocationValues()</strong>, <strong>insertNorthPoleLocationValues()</strong> 도 주석을 제거해봅시다</p>
<p>그리고 TestDb 클래스를 테스트를 시작해 봅시다</p>
<p><img src="/img/adnroid-developing/4/17.png"></p>
<p>다음과 같은 애러를 볼 수 있습니다<br><strong>이제 해결해 봅시다</strong></p>
<p>Location 테이블 없이 생성하려고 했기 때문에 애러가 발생했습니다.<br>Location 테이블부터 생성해 봅시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> String SQL_CREATE_LOCATION_TABLE = <span class="hljs-string">&quot;CREATE TABLE &quot;</span> + LocationEntry.TABLE_NAME + <span class="hljs-string">&quot; (&quot;</span> +<br>                    LocationEntry._ID + <span class="hljs-string">&quot; INTEGER PRIMARY KEY,&quot;</span> +<br>                    LocationEntry.COLUMN_LOCATION_SETTING + <span class="hljs-string">&quot; TEXT UNIQUE NOT NULL, &quot;</span> +<br>                    LocationEntry.COLUMN_CITY_NAME + <span class="hljs-string">&quot; TEXT NOT NULL, &quot;</span> +<br>                    LocationEntry.COLUMN_COORD_LAT + <span class="hljs-string">&quot; REAL NOT NULL, &quot;</span> +<br>                    LocationEntry.COLUMN_COORD_LONG + <span class="hljs-string">&quot; REAL NOT NULL &quot;</span> +<br>                    <span class="hljs-string">&quot; );&quot;</span>;<br><br>    <span class="hljs-comment">// 생략</span><br><br>    sqLiteDatabase.execSQL(SQL_CREATE_LOCATION_TABLE);<br>    sqLiteDatabase.execSQL(SQL_CREATE_WEATHER_TABLE);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>확인을 위해서 테스트를 돌려 봅시다</p>
<p><img src="/img/adnroid-developing/4/18.png"></p>
<hr>
<p>데이터베이스를 사용하다 보면 업그레이드할 일이 생깁니다.<br>Column이 변경(추가/삭제)이 되는 경우도 있고 테이블이 추가되어서 관계를 맺는 경우도 있습니다</p>
<p>이런 상황을 대비 해 뒀습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DATABASE_VERSION = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 데이터 베이스의 버전을 의미합니다</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DATABASE_NAME = <span class="hljs-string">&quot;weather.db&quot;</span>;<br><br><span class="hljs-comment">// 데이터 베이스 파일의 이름을 정합니다</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherDbHelper</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(context, DATABASE_NAME, <span class="hljs-keyword">null</span>, DATABASE_VERSION);<br>    <span class="hljs-comment">// 생성자를 이용해서 데이터 베이스 이름, 버전을 정하게 됩니다</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>만약 버전이 변경되어서 DATABASE_VERSION 값이 3이 되면</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-keyword">int</span> oldVersion, <span class="hljs-keyword">int</span> newVersion)</span> </span>&#123;<br>    sqLiteDatabase.execSQL(<span class="hljs-string">&quot;DROP TABLE IF EXISTS &quot;</span> + LocationEntry.TABLE_NAME);<br>    sqLiteDatabase.execSQL(<span class="hljs-string">&quot;DROP TABLE IF EXISTS &quot;</span> + WeatherEntry.TABLE_NAME);<br>    onCreate(sqLiteDatabase);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>onUpgrade() 메서드가 실행됩니다<br>우리는 현재 버전이 변경되면 테이블이 DROP합니다<br>다른 형태로 변경하고 싶다면 SQLite를 참고하시기 바랍니다</p>
<p><img src="/img/adnroid-developing/4/5.png"></p>
<p>다음과 같은 구조에서 Data Contract, DB Helper, SQLiteDatabase 을 구축하였습니다</p>
<p>데이터베이스를 읽기/쓰기/검사 하기 위해서 여러 가지를 사용합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SQLiteDatabase db = <span class="hljs-keyword">new</span> WeatherDbHelper(<span class="hljs-keyword">this</span>.mContext).getWritableDatabase();<br></code></pre></td></tr></table></figure>
<p>데이터베이스 쓰기 용으로 준비합니다</p>
<p>데이터를 삽입하기 위해서는 contentvalues가 필요합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> ContentValues <span class="hljs-title">createNorthPoleLocationValues</span><span class="hljs-params">()</span> </span>&#123;<br>        ContentValues testValues = <span class="hljs-keyword">new</span> ContentValues();<br>        testValues.put(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING, TEST_LOCATION);<br>        testValues.put(WeatherContract.LocationEntry.COLUMN_CITY_NAME, <span class="hljs-string">&quot;North Pole&quot;</span>);<br>        testValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LAT, <span class="hljs-number">64.7488</span>);<br>        testValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LONG, -<span class="hljs-number">147.353</span>);<br><br>        <span class="hljs-keyword">return</span> testValues;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>ContentValues는 key-value 형으로 되어있습니다</p>
<p>ContentValues형태로 삽입할 데이터가 준비를 끝냈으면 insert하면 됩니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> ret = db.insert(WeatherContract.LocationEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, testValues);<br></code></pre></td></tr></table></figure>

<p>삽입할 데이터가 너무 길므로 자동으로 _id 포함 되어있습니다<br>_id 값을 통해서 정상적으로 들어갔는지 확인할 수 있습니다<br>만약 비정상이라면 _id 값은 -1이 됩니다</p>
<p>Android에서는 Query를 통해서 얻은 결과를 Cursor 라는 것을 통해서 접근하게 됩니다</p>
<p><img src="/img/adnroid-developing/4/19.png"></p>
<p><img src="/img/adnroid-developing/4/20.png"></p>
<p>Cursor는 어려운 개념이 아닙니다<br>결과값으로 데이터의 그냥 한줄 한줄이라고 생각하면 됩니다<br>한 줄의 정보를 다 읽었다면 cursor.move를 통해서 다음 줄로 이동하면 됩니다<br>Cursor의 사용이 끝나면 close 해주면 됩니다</p>
<h2 id="연습-testDb-testLocationTable-완성해-보세요"><a href="#연습-testDb-testLocationTable-완성해-보세요" class="headerlink" title="연습 testDb.testLocationTable() 완성해 보세요"></a>연습 testDb.testLocationTable() 완성해 보세요</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLocationTable</span><span class="hljs-params">()</span> </span>&#123;<br>    WeatherDbHelper dbHelper = <span class="hljs-keyword">new</span> WeatherDbHelper(mContext);<br>    SQLiteDatabase db = dbHelper.getWritableDatabase();<br><br>    ContentValues testValues = TestUtilities.createNorthPoleLocationValues();<br><br>    <span class="hljs-keyword">long</span> locationRowId = db.insert(WeatherContract.LocationEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, testValues);<br><br>    assertTrue(<span class="hljs-string">&quot;Error : No Insert Data &quot;</span>, locationRowId != -<span class="hljs-number">1</span>);<br><br>    Cursor cursor = db.query(WeatherContract.LocationEntry.TABLE_NAME, <span class="hljs-comment">// Table to Query</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// leaving &quot;columns&quot; null just returns all the columns.</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// cols for &quot;where&quot; clause</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// values for &quot;where&quot; clause</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// columns to group by</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// columns to filter by row groups</span><br>            <span class="hljs-keyword">null</span>  <span class="hljs-comment">// sort order</span><br>    );<br><br>    assertTrue(<span class="hljs-string">&quot;Error : No Records retuned from location query&quot;</span>, cursor.moveToFirst());<br><br>    TestUtilities.validateCurrentRecord(<span class="hljs-string">&quot;Error : Location Query Validation Failed&quot;</span>, cursor, testValues);<br><br>    assertFalse(<span class="hljs-string">&quot;Error: More than one record returned from location query&quot;</span>, cursor.moveToNext());<br><br>    cursor.close();<br>    db.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/img/adnroid-developing/4/21.png"></p>
<hr>
<h2 id="연습-testDb-testWeatherTable-testDb-insertLocation-완성해-보세요"><a href="#연습-testDb-testWeatherTable-testDb-insertLocation-완성해-보세요" class="headerlink" title="연습 testDb.testWeatherTable(), testDb.insertLocation() 완성해 보세요"></a>연습 testDb.testWeatherTable(), testDb.insertLocation() 완성해 보세요</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testWeatherTable</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> locationRowId = insertLocation();<br><br>    assertFalse(<span class="hljs-string">&quot;Error: Location Not Inserted Correctly&quot;</span>, locationRowId == -<span class="hljs-number">1L</span>);<br><br>    ContentValues weatherValues = TestUtilities.createWeatherValues(locationRowId);<br><br>    WeatherDbHelper dbHelper = <span class="hljs-keyword">new</span> WeatherDbHelper(mContext);<br>    SQLiteDatabase db = dbHelper.getWritableDatabase();<br><br>    <span class="hljs-keyword">long</span> weatherRowId = db.insert(WeatherContract.WeatherEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, weatherValues);<br>    assertTrue(weatherRowId != -<span class="hljs-number">1</span>);<br><br>    Cursor weatherCursor = db.query(<br>            WeatherContract.WeatherEntry.TABLE_NAME,  <span class="hljs-comment">// Table to Query</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// leaving &quot;columns&quot; null just returns all the columns.</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// cols for &quot;where&quot; clause</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// values for &quot;where&quot; clause</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// columns to group by</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// columns to filter by row groups</span><br>            <span class="hljs-keyword">null</span>  <span class="hljs-comment">// sort order</span><br>    );<br><br>    assertTrue(<span class="hljs-string">&quot;Error: No Records returned from location query&quot;</span>, weatherCursor.moveToFirst());<br><br>    TestUtilities.validateCurrentRecord(<span class="hljs-string">&quot;testInsertReadDb weatherEntry failed to validate&quot;</span>,<br>            weatherCursor, weatherValues);<br><br>    assertFalse(<span class="hljs-string">&quot;Error: More than one record returned from weather query&quot;</span>,<br>            weatherCursor.moveToNext());<br><br>    weatherCursor.close();<br>    dbHelper.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">insertLocation</span><span class="hljs-params">()</span> </span>&#123;<br>    WeatherDbHelper dbHelper = <span class="hljs-keyword">new</span> WeatherDbHelper(mContext);<br>    SQLiteDatabase db = dbHelper.getWritableDatabase();<br><br>    ContentValues testValues = TestUtilities.createNorthPoleLocationValues();<br><br>    <span class="hljs-keyword">long</span> locationRowId;<br>    locationRowId = db.insert(WeatherContract.LocationEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, testValues);<br><br>    assertTrue(locationRowId != -<span class="hljs-number">1</span>);<br><br><br>    Cursor cursor = db.query(<br>            WeatherContract.LocationEntry.TABLE_NAME,  <span class="hljs-comment">// Table to Query</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// all columns</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// Columns for the &quot;where&quot; clause</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// Values for the &quot;where&quot; clause</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// columns to group by</span><br>            <span class="hljs-keyword">null</span>, <span class="hljs-comment">// columns to filter by row groups</span><br>            <span class="hljs-keyword">null</span> <span class="hljs-comment">// sort order</span><br>    );<br><br>    assertTrue( <span class="hljs-string">&quot;Error: No Records returned from location query&quot;</span>, cursor.moveToFirst() );<br><br>    TestUtilities.validateCurrentRecord(<span class="hljs-string">&quot;Error: Location Query Validation Failed&quot;</span>,<br>            cursor, testValues);<br><br>    assertFalse( <span class="hljs-string">&quot;Error: More than one record returned from location query&quot;</span>,<br>            cursor.moveToNext() );<br><br>    cursor.close();<br>    db.close();<br>    <span class="hljs-keyword">return</span> locationRowId;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h2><ul>
<li>Activity Lifecycle</li>
<li>SQLite</li>
<li>Database Contract</li>
<li>SQLiteOpenHelper</li>
<li>Android test</li>
<li>ContentValues</li>
<li>Cursor</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>3. Create New Activities and Navigate Apps with Intents</title>
    <url>/2017/02/06/adnroid-developing/Developing-Android-Apps-03/</url>
    <content><![CDATA[<h1 id="ListView-Item-Select"><a href="#ListView-Item-Select" class="headerlink" title="ListView Item Select"></a>ListView Item Select</h1><hr>
<p><img src="/img/adnroid-developing/3/1.png"></p>
<p>우리는 목록 중에 하나를 선택해서 자세하게 보고 싶습니다</p>
<p>어떤 method를 이용해야 할까요?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> setOnTouchListener(View.OnTouchListener l)<br><br><span class="hljs-number">2.</span> setOnClickListener<br>    (AdapterView.OnClickListener l)<br><br><span class="hljs-number">3.</span> setOnItemSelectedListener<br>    (AdapterView.OnItemSelectedListener l)<br><br><span class="hljs-number">4.</span> setOnItemClickListener<br>    (AdapterView.OnItemClickListener l)<br></code></pre></td></tr></table></figure>

<p><a href="http://developer.android.com/intl/ko/reference/android/widget/ListView.html">ListView</a></p>
<h2 id="정답-setOnItemClickListener"><a href="#정답-setOnItemClickListener" class="headerlink" title="정답 : setOnItemClickListener"></a>정답 : setOnItemClickListener</h2><hr>
<h1 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h1><hr>
<p>Android에서 Toast Message는 몇 초간 표시하는 간단한 메시지 입니다<br>간단한 메시지를 표시하기 위해서 유용합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">listView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>    <span class="hljs-comment">//Toast 삽입</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><a href="http://developer.android.com/intl/ko/reference/android/widget/Toast.html">Toast Document</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">listView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>        String forecast = mForecastAdapter.getItem(position);<br>        Toast.makeText(getActivity(), forecast, Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>Adapter에서 항목을 가져오기 위해서는 getItem을 사용합니다<br>Toast를 만들기만 하고 보여주고 만드는 거까지 진행을 합니다<br>한번 테스트를 통해서 보면 Toast Message가 잘 나오는 걸 확인 할 수 있습니다</p>
<hr>
<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><hr>
<p><img src="/img/adnroid-developing/3/2.png"></p>
<p>왼쪽 화면과 같은 Activity를 만들어 봅시다<br>화면을 잘 살펴보세요 &lt; 버튼이 있습니다<br>&lt; 버튼은 항상 부모로 이동을 해야 합니다<br>우리가 만든 Application의 Activity를 트리로 표현하면 MainActivity가 현재 만드는 Activity의 부모 Activity가 됩니다<br>천천히 따라서 해봅시다</p>
<p><img src="/img/adnroid-developing/3/3.png"></p>
<p><img src="/img/adnroid-developing/3/4.png"></p>
<hr>
<h2 id="일단-파일을-정리-합시다-여기서-없는-파일은-넘어가시면-됩니다"><a href="#일단-파일을-정리-합시다-여기서-없는-파일은-넘어가시면-됩니다" class="headerlink" title="일단 파일을 정리 합시다 (여기서 없는 파일은 넘어가시면 됩니다)"></a>일단 파일을 정리 합시다 (여기서 없는 파일은 넘어가시면 됩니다)</h2><ul>
<li>DetailActivityFragment.java 파일을 삭제합니다</li>
<li> Content_detail.xml 삭제합니다</li>
<li> activity_detail.xml 수정합니다</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/container&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.DetailActivity&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>fragment_detail.xml 수정합니다</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingLeft</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingRight</span>=<span class="hljs-string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.DetailActivity$PlaceholderFragment&quot;</span>&gt;</span><br><br>    &lt;TextView<br>        android:id=&quot;@+id/detail_text&quot;<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot; /&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>DetailActivity.java 수정합니다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.support.v4.app.Fragment;<br><span class="hljs-keyword">import</span> android.support.v7.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetailActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_detail);<br>        <span class="hljs-keyword">if</span> (savedInstanceState == <span class="hljs-keyword">null</span>) &#123;<br>            getSupportFragmentManager().beginTransaction()<br>                    .add(R.id.container, <span class="hljs-keyword">new</span> PlaceholderFragment())<br>                    .commit();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span> </span>&#123;<br>        getMenuInflater().inflate(R.menu.menu_detail, menu);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> id = item.getItemId();<br><br>        <span class="hljs-keyword">if</span> (id == R.id.action_settings) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaceholderFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PlaceholderFragment</span><span class="hljs-params">()</span> </span>&#123;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                                 Bundle savedInstanceState)</span> </span>&#123;<br><br>            View rootView = inflater.inflate(R.layout.fragment_detail, container, <span class="hljs-keyword">false</span>);<br>            <span class="hljs-keyword">return</span> rootView;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>mainfests.xml 수정합시다</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;activity<br>    android:name=&quot;.DetailActivity&quot;<br>    android:label=&quot;@string/title_activity_detail&quot;<br>    android:parentActivityName=&quot;.MainActivity&quot;<br>    android:theme=&quot;@style/AppTheme&quot;&gt;<br>    &lt;meta-data<br>        android:name=&quot;android.support.PARENT_ACTIVITY&quot;<br>        android:value=&quot;com.study.sunshine.MainActivity&quot; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<p><img src="/img/adnroid-developing/3/5.png"></p>
<p>화면을 전환해서 하는 경우를 StartActivity를 이용해서 진행합니다<br>Intent를 이용해서 포장을 해서 진행을 합니다<br>우리가 서로 Activity간의 통신이나 시스템과 통신을 위해서는 Intent를 이용해서 진행이 되는 것입니다</p>
<p>클래스 이름을 이용하여서 대상을 명백히 나타내는 Intent를 Explicit Intent라고 합니다<br>반대 개념으로 Implicit Intent가 있습니다</p>
<p>Intent를 쉽게 예시를 통해서 설명을 하겠습니다</p>
<p>Intent는 편지와 같다고 생각하면 됩니다<br>내가 전달하고자 하는 구성요소를 포함하고 있는 편지입니다<br>작은 공간이 있어서 내가 전달하고 싶은 데이터를 넣을 수 있습니다<br>그래서 확실한 수취인의 이름을 지정합니다<br><strong>지금까지 설명한 내용은 Explicit Intent입니다</strong></p>
<p><strong>또 다른 Intent가 존재합니다 Implicit Intent입니다</strong><br>아까와 마찬가지로 편지에 모든 구성요소가 포함 되어있고, 약간의 데이터도 포함이 되어있습니다<br>하진만 수취인이 적혀있지 않습니다<br>그러나 데이터에서 내가 지정한 액션을 수행할 능력이 있는 액티비티를 찾아서 진행이 됩니다<br>웹사이트를 본다던지, 전화를 건다던지, SMS를 보낸다던지 하는 역활을 하게 됩니다<br>참고 링크를 통해서 Native Application의 Implicit Intent를 확인하세요</p>
<p><a href="http://developer.android.com/intl/ko/guide/components/intents-common.html">참고</a></p>
<hr>
<p>아까전에 했던 Toast Message를 대신해서 Intent를 이용해서 데이터를 전달해서 표시해 봅시다</p>
<p><a href="http://developer.android.com/intl/ko/guide/components/intents-filters.html#ExampleExplicit">explicit intent</a>를 참고하여서 진행을 하겠습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">listView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>        String forecast = mForecastAdapter.getItem(position);<br>        Intent intent = <span class="hljs-keyword">new</span> Intent(getActivity(), DetailActivity.class);<br>        intent.putExtra(Intent.EXTRA_TEXT, forecast);<br>        startActivity(intent);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>Intent에 Data를 전달하기 위해서는 putExtra를 사용하면 됩니다<br>key, value 구조로 이루어져있습니다</p>
<p>코드를 잘 작성하고 실행을 했다면 화면이 바뀌는걸 볼 수 있습니다</p>
<p>화면에 Hello World만 표시됩니다<br>우리는 간단한 코드 작성으로 방금 전에 전달받은 Data를 읽을 수 있습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaceholderFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                                 Bundle savedInstanceState)</span> </span>&#123;<br><br>        View rootView = inflater.inflate(R.layout.fragment_detail, container, <span class="hljs-keyword">false</span>);<br>        Intent intent = getActivity().getIntent();<br>        <span class="hljs-keyword">if</span> (intent != <span class="hljs-keyword">null</span> &amp;&amp; intent.hasExtra(Intent.EXTRA_TEXT)) &#123;<br>            String forecast = intent.getStringExtra(Intent.EXTRA_TEXT);<br>            ((TextView)rootView.findViewById(R.id.detail_text)).setText(forecast);<br>        &#125;<br>        <span class="hljs-keyword">return</span> rootView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h1 id="UX-User-Experience-Setting"><a href="#UX-User-Experience-Setting" class="headerlink" title="UX(User Experience) - Setting"></a>UX(User Experience) - Setting</h1><p><img src="/img/adnroid-developing/3/6.png"></p>
<p><img src="/img/adnroid-developing/3/7.png"></p>
<p><img src="/img/adnroid-developing/3/8.png"></p>
<p><img src="/img/adnroid-developing/3/9.png"></p>
<p>Setting 을 구성하는 방법은 여러가지가 있습니다<br>같이 Application을 만든 사람과 토론을 통해서 진행을 하세요</p>
<h2 id="토론을-통해서-결정이-나는것은-아니지만-그래도-모든것을-Setting에-넣는-것은-하지-마세요"><a href="#토론을-통해서-결정이-나는것은-아니지만-그래도-모든것을-Setting에-넣는-것은-하지-마세요" class="headerlink" title="토론을 통해서 결정이 나는것은 아니지만 그래도 모든것을 Setting에 넣는 것은 하지 마세요!!!!"></a>토론을 통해서 결정이 나는것은 아니지만 그래도 모든것을 Setting에 넣는 것은 하지 마세요!!!!</h2><p><a href="https://www.google.com/design/spec/patterns/settings.html">Design Setting</a></p>
<p>Setting에 무엇을 넣고 무엇을 표시하고 UI/UX 선택이 끝났으면 만들어봅시다</p>
<p><a href="http://developer.android.com/intl/ko/guide/topics/ui/settings.html">Setting GudeLine</a>을 참고해 보세요</p>
<p><img src="http://developer.android.com/images/ui/settings/settings.png"></p>
<p>다음과 같은 화면 구성은 자동으로 할 수 있습니다</p>
<hr>
<p>모든 설정 값은 <a href="http://developer.android.com/intl/ko/reference/android/content/SharedPreferences.html">Preferences</a>로 저장됩니다<br>Preferences는 같은 구글 계정을 쓰는 Android Device와 공유 됩니다<br>그래서 Device를 바꿔도 유지가 되는 것입니다 당연히 Application이 삭제 되기 전까지 입니다</p>
<p>최근에는 자동으로 Preference값이 Google Cloud안에 데이터가 저장이 됩니다.<br>만약 저장을 하기 싫다면 AndroidMainfests.xml 파일에 android:allowBackup=”false” 을 추가하면 됩니다</p>
<p>SettingsActivity를 만들기 위해서 New Empty Activity를 클릭해서 SettingsActivity라고 만듭니다 Layout은 제외하고여</p>
<p><img src="/img/adnroid-developing/3/10.png"></p>
<p><img src="/img/adnroid-developing/3/10_1.png"></p>
<p>이제 코드로 SettingsActivity를 완성합시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SettingsActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PreferenceActivity</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">Preference</span>.<span class="hljs-title">OnPreferenceChangeListener</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bindPreferenceSummaryToValue</span><span class="hljs-params">(Preference preference)</span> </span>&#123;<br>        preference.setOnPreferenceChangeListener(<span class="hljs-keyword">this</span>);<br><br>        onPreferenceChange(preference,<br>                PreferenceManager<br>                        .getDefaultSharedPreferences(preference.getContext())<br>                        .getString(preference.getKey(), <span class="hljs-string">&quot;&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onPreferenceChange</span><span class="hljs-params">(Preference preference, Object value)</span> </span>&#123;<br>        String stringValue = value.toString();<br><br>        <span class="hljs-keyword">if</span> (preference <span class="hljs-keyword">instanceof</span> ListPreference) &#123;<br>            ListPreference listPreference = (ListPreference) preference;<br>            <span class="hljs-keyword">int</span> prefIndex = listPreference.findIndexOfValue(stringValue);<br>            <span class="hljs-keyword">if</span> (prefIndex &gt;= <span class="hljs-number">0</span>) &#123;<br>                preference.setSummary(listPreference.getEntries()[prefIndex]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            preference.setSummary(stringValue);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;activity<br>    android:name=&quot;.SettingsActivity&quot;<br>    android:label=&quot;@string/title_activity_settings&quot;<br>    android:parentActivityName=&quot;.MainActivity&quot;&gt;<br>    &lt;meta-data<br>        android:name=&quot;android.support.PARENT_ACTIVITY&quot;<br>        android:value=&quot;com.study.sunshine.MainActivity&quot; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>기본적인 Setting Activity에 대한 구성은 끝났습니다<br>그러나 우리가 원하는 내용의 Setting은 아닙니다<br>또 각 Activity에서 Menu에 있는 Settings를 눌러도 아무 작동을 안합니다<br>코드에 추가를 해서 작동하게 합시다</p>
<p>MainActivity, DetailActivity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br><br>    <span class="hljs-keyword">if</span> (id == R.id.action_settings) &#123;<br>        startActivity(<span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, SettingsActivity.class));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>아직 Setting Activity 화면을 설정을 안했습니다<br>일단 res 폴더에 xml 폴더를 만들고 진행합시다<br>pref_general.xml 를 만듭니다</p>
<p><img src="/img/adnroid-developing/3/13.png"></p>
<p><img src="/img/adnroid-developing/3/14.png"></p>
<p><img src="/img/adnroid-developing/3/15.png"></p>
<p><img src="/img/adnroid-developing/3/16.png"></p>
<p><strong>pref_general.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PreferenceScreen</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    &lt;EditTextPreference<br>        android:defaultValue=&quot;@string/pref_location_default&quot;<br>        android:inputType=&quot;text&quot;<br>        android:key=&quot;@string/pref_location_key&quot;<br>        android:singleLine=&quot;true&quot;<br>        android:title=&quot;@string/pref_location_label&quot; /&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">PreferenceScreen</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>strings.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Preference Data--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_location_default&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Seoul<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_location_key&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Location<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_location_label&quot;</span>&gt;</span>Location<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>우리가 방금 만든 perf_general.xml을 SettingsActivity에 연결합시다</p>
<p><strong>SettingActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    addPreferencesFromResource(R.xml.pref_general);<br>    bindPreferenceSummaryToValue(<br>        findPreference(getString(R.string.pref_location_key)));<br>&#125;<br></code></pre></td></tr></table></figure>

<p>실제로 Setting을 이용해서 Data를 바꾸면 앱을 다시 실행해도 남아있습니다.<br>이제 바뀐 Data를 가지고 날씨를 가져오도록 합시다</p>
<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br>    <span class="hljs-keyword">if</span> (id == R.id.action_refresh) &#123;<br>        FetchWeatherTask fetchWeatherTask = <span class="hljs-keyword">new</span> FetchWeatherTask();<br>        SharedPreferences sharedPreferences =<br>            PreferenceManager.getDefaultSharedPreferences(getActivity());<br>        String location = sharedPreferences.getString(<br>            getString(R.string.pref_location_key),<br>            getString(R.string.pref_location_default));<br>        fetchWeatherTask.execute(location);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>바뀐 위치에 맞게 데이터를 가져옵니다<br>잘못된 데이터를 넣으면 잘못된 데이터를 가져오겠지요</p>
<p>이제 매번 Refresh 버튼 클릭하기 귀찮습니다<br>이걸 바꿔 봅시다. 그리고 약간의 Refactoring 합시다</p>
<p>방금전 코드를 메서드를 만들어 봅시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    FetchWeatherTask fetchWeatherTask = <span class="hljs-keyword">new</span> FetchWeatherTask();<br>    SharedPreferences sharedPreferences =<br>        PreferenceManager.getDefaultSharedPreferences(getActivity());<br>    String location = sharedPreferences.getString(<br>        getString(R.string.pref_location_key),<br>        getString(R.string.pref_location_default));<br>    fetchWeatherTask.execute(location);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>그리고 onStart method를 Override 합시다<br>onOptionsItemSelected method는 Refactoring 합시다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onStart();<br>    updateWeather();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br>    <span class="hljs-keyword">if</span> (id == R.id.action_refresh) &#123;<br>        updateWeather();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 MainActivity가 보여질때마다 날씨를 직접 가져오기때문에<br>Fake Data를 지워도 되겠네요</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">	Bundle savedInstanceState)</span> </span>&#123;<br>    mForecastAdapter = <span class="hljs-keyword">new</span> ArrayAdapter&lt;String&gt;(<br>            getActivity(),<br>            R.layout.list_item_forecast,<br>            R.id.list_item_forecast_textview,<br>            <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;()<br>    );<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 쓸만한 Application이 되었습니다<br>아직 Setting이 끝난것이 아닙니다!!</p>
<p>아직 하나더 Setting 할 것이 남았습니다<br>temperature units를 설정해야합니다</p>
<p><strong>strings.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Preference UNITS Data--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_label&quot;</span>&gt;</span>Temperature Units<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_label_metric&quot;</span>&gt;</span>Metric<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_label_imperial&quot;</span>&gt;</span>Imperial<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_key&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>units<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_metric&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>metric<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_imperial&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>imperial<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>value 폴더 안에 arrays.xml 을 만드세요</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string-array</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_options&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>@string/pref_units_label_metric<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>@string/pref_units_label_imperial<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">string-array</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string-array</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_units_values&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>@string/pref_units_metric<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>@string/pref_units_imperial<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">string-array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>pref_general.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;ListPreference<br>    android:defaultValue=&quot;@string/pref_units_metric&quot;<br>    android:entries=&quot;@array/pref_units_options&quot;<br>    android:entryValues=&quot;@array/pref_units_values&quot;<br>    android:key=&quot;@string/pref_units_key&quot;<br>    android:title=&quot;@string/pref_units_label&quot; /&gt;<br></code></pre></td></tr></table></figure>

<p><strong>SettingActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    addPreferencesFromResource(R.xml.pref_general);<br>    bindPreferenceSummaryToValue(<br>            findPreference(getString(R.string.pref_location_key)));<br>    bindPreferenceSummaryToValue(<br>            findPreference(getString(R.string.pref_units_key)));<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">formatHighLows</span><span class="hljs-params">(<span class="hljs-keyword">double</span> high, <span class="hljs-keyword">double</span> low)</span> </span>&#123;<br>    SharedPreferences sharedPreferences =<br>        PreferenceManager.getDefaultSharedPreferences(getActivity());<br>    String unitType = sharedPreferences.getString(<br>        getString(R.string.pref_units_key),<br>        getString(R.string.pref_units_metric));<br><br>    <span class="hljs-keyword">if</span> (unitType.equals(getString(R.string.pref_units_imperial))) &#123;<br>        high = (high * <span class="hljs-number">1.8</span>) + <span class="hljs-number">32</span>;<br>        low = (low * <span class="hljs-number">1.8</span>) + <span class="hljs-number">32</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!unitType.equals(getString(R.string.pref_units_metric))) &#123;<br>        Log.d(LOG_TAG, <span class="hljs-string">&quot;Unit type not found : &quot;</span> + unitType);<br>    &#125;<br><br>    <span class="hljs-keyword">long</span> roundedHigh = Math.round(high);<br>    <span class="hljs-keyword">long</span> roundedLow = Math.round(low);<br><br>    String highLowStr = roundedHigh + <span class="hljs-string">&quot;/&quot;</span> + roundedLow;<br>    <span class="hljs-keyword">return</span> highLowStr;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="Implicit-Intent"><a href="#Implicit-Intent" class="headerlink" title="Implicit Intent"></a>Implicit Intent</h2><blockquote>
<p>게으른 프로그래머는 더 적은 실수를 한다</p>
</blockquote>
<p>지도에서 내가 날씨를 얻는곳을 보고 싶어요<br>일단 메뉴를 추가해 봅시다</p>
<p><strong>menu_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;item<br>    android:id=&quot;@+id/action_map&quot;<br>    android:title=&quot;@string/action_map&quot;<br>    app:showAsAction=&quot;never&quot; /&gt;<br></code></pre></td></tr></table></figure>

<p><strong>strings.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action_map은&quot;</span> <span class="hljs-attr">translatable</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Map Location<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br><br>    <span class="hljs-keyword">if</span> (id == R.id.action_settings) &#123;<br>        startActivity(<span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, SettingsActivity.class));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (id == R.id.action_map) &#123;<br>        openPreferredLocationInMap();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openPreferredLocationInMap</span><span class="hljs-params">()</span> </span>&#123;<br>    SharedPreferences sharedPreferences =<br>        PreferenceManager.getDefaultSharedPreferences(<span class="hljs-keyword">this</span>);<br><br>    String location = sharedPreferences.getString(<br>        getString(R.string.pref_location_key),<br>        getString(R.string.pref_location_default));<br><br>    Uri geoLocation = Uri.parse(<span class="hljs-string">&quot;geo:0,0?&quot;</span>).buildUpon()<br>        .appendQueryParameter(<span class="hljs-string">&quot;q&quot;</span>, location)<br>        .build();<br><br>    Intent intent = <span class="hljs-keyword">new</span> Intent(Intent.ACTION_VIEW);<br>    intent.setData(geoLocation);<br><br>    <span class="hljs-keyword">if</span>(intent.resolveActivity(getPackageManager()) != <span class="hljs-keyword">null</span>)&#123;<br>        startActivity(intent);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        Log.d(LOG_TAG, <span class="hljs-string">&quot;Couldn&#x27;t call&quot;</span> + location + <span class="hljs-string">&quot;, no receiving apps installed!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="여기서-우리는-궁금합니다-어떻게-Map-Application이-실행되는지"><a href="#여기서-우리는-궁금합니다-어떻게-Map-Application이-실행되는지" class="headerlink" title="여기서 우리는 궁금합니다 - 어떻게 Map Application이 실행되는지"></a>여기서 우리는 궁금합니다 - 어떻게 Map Application이 실행되는지</h2><p>이것은 다른 앱의 AndroidManifest.xml의 정답이 있습니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>    &lt;action:name=&quot;android.intent.action.View&quot;/&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;geo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>geo라는 Data scheme를 처리 하게 됩니다</p>
<p>만약 Data scheme를 처리할 수 있는 Application이 여러개라면 사용자가 선택할 수 있도록 팝업창을 보여주게 됩니다</p>
<hr>
<h2 id="Share-action-provider"><a href="#Share-action-provider" class="headerlink" title="Share action provider"></a>Share action provider</h2><p><strong>Share action provider</strong> 라는 것이 추가 되었습니다<br>뭐라고 설명해야 하지… 그 ActionBar Icon 중에서 먼가 공유할때 쓰는 버튼이 있습니다</p>
<p>그것을 우리도 추가를 해봅시다<br>날씨를 친구들에게도 알려줍시다</p>
<p>기본적으로 Share action provider를 이용하기 위해서는 문자열부터 추가하는것으로 시작 합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action_share&quot;</span>&gt;</span>Share<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>menu_detail_fragment</strong>라는 이름의 메뉴를 추가 하세요</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br>    &lt;item<br>        android:id=&quot;@+id/action_share&quot;<br>        android:title=&quot;@string/action_share&quot;<br>        app:actionProviderClass=&quot;android.support.v7.widget.ShareActionProvider&quot;<br>        app:showAsAction=&quot;always&quot; /&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/img/adnroid-developing/3/17.png"></p>
<p>PlaceholderFragment을 DetailFragment로 바꿉시다<br>class name은 막 바꾸면 안되기 때문에 그림에서 설명한 방법으로 변경합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetailFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOG_TAG = DetailActivity.class.getSimpleName();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FORECAST_SHARE_HASHTAG = <span class="hljs-string">&quot; #SunshineApp&quot;</span>;<br>    <span class="hljs-keyword">private</span> String mForecastStr;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DetailFragment</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">			Bundle savedInstanceState)</span> </span>&#123;<br>        View rootView = inflater.inflate(R.layout.fragment_detail, container, <span class="hljs-keyword">false</span>);<br>        Intent intent = getActivity().getIntent();<br>        <span class="hljs-keyword">if</span> (intent != <span class="hljs-keyword">null</span> &amp;&amp; intent.hasExtra(Intent.EXTRA_TEXT)) &#123;<br>            mForecastStr = intent.getStringExtra(Intent.EXTRA_TEXT);<br>            ((TextView)rootView.findViewById(R.id.detail_text)).setText(mForecastStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> rootView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Share intent를 만듭시다. ACTION_SEND를 이용해서 처리합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Intent <span class="hljs-title">createShareForecastIntent</span><span class="hljs-params">()</span> </span>&#123;<br>    Intent shareIntent = <span class="hljs-keyword">new</span> Intent(Intent.ACTION_SEND);<br>    shareIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);<br>    shareIntent.setType(<span class="hljs-string">&quot;text/plain&quot;</span>);<br>    shareIntent.putExtra(Intent.EXTRA_TEXT,<br>        mForecastStr + FORECAST_SHARE_HASHTAG);<br>    <span class="hljs-keyword">return</span> shareIntent;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 메뉴를 만들어야 합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DetailFragment</span><span class="hljs-params">()</span> </span>&#123;<br>    setHasOptionsMenu(<span class="hljs-keyword">true</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu, MenuInflater inflater)</span> </span>&#123;<br>    inflater.inflate(R.menu.menu_detail_fragment, menu);<br><br>    MenuItem menuItem = menu.findItem(R.id.action_share);<br><br>    ShareActionProvider mShareActionProvider =<br>        (ShareActionProvider) MenuItemCompat.getActionProvider(menuItem);<br><br>    <span class="hljs-keyword">if</span> (mShareActionProvider != <span class="hljs-keyword">null</span>) &#123;<br>        mShareActionProvider.setShareIntent(CreateShareForecastIntent());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Log.d(LOG_TAG, <span class="hljs-string">&quot;Share Action Provider is null?&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">super</span>.onCreateOptionsMenu(menu, inflater);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 우리는 데이터도 전송 할 수 있습니다.</p>
<hr>
<p>여기서 추가로 더 배워봅시다</p>
<p><strong>Brodcast Intents</strong> 입니다</p>
<p>Android Device에서는 여러가지 방송메세지가 돌아 다닙니다<br>배터리가 충전이 다되었다. 문자가 왔다. 전화가 왔다. 다운로드가 완료되었다. 등등 정말 많은 메세지가 돌아다닙니다</p>
<p>이런 메세지는 intent filter를 가진 Brodcast Reciver가 있는 모든 Application에 전송이 됩니다</p>
<p>Intent Filter는 2가지 방법으로 등록 할 수 있습니다.</p>
<p><strong>XML - Static</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>&quot;<span class="hljs-attr">.MyReceiver</span>&quot;&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;me.hoyuo.testapp.SunShine&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>JAVA - Dynamic</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">IntentFilter intentFilter =<br>    <span class="hljs-keyword">new</span> IntentFilter(<span class="hljs-string">&quot;me.hoyuo.testapp.SunShine&quot;</span>);<br>registerReceiver(myReceiver, intentFilter);<br></code></pre></td></tr></table></figure>

<p>두가지 방법 모두 Brodcast Recevier를 등록하는 것입니다<br>두가지 방법에는 미세한 차이가 있습니다</p>
<p><img src="/img/adnroid-developing/3/18.png"></p>
<hr>
<h1 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h1><ul>
<li>ListView Item Selected</li>
<li>Toast</li>
<li>Activity</li>
<li>Setting</li>
<li>Intent</li>
<li>Share action provider</li>
<li>Brodcast</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Content Providers</title>
    <url>/2017/02/12/adnroid-developing/Developing-Android-Apps-05/</url>
    <content><![CDATA[<h2 id="Content-Providers"><a href="#Content-Providers" class="headerlink" title="Content Providers"></a>Content Providers</h2><p><strong>Why?</strong></p>
<p>왜 Content Providers를 사용하는가? 묻는 것은 이상한것이 아닙니다<br>데이터를 안전하게 공유하고 효율적으로 app의 경계선을 넘어서 파일들이나 또는 정말 어떤 다른 것과 같이 넘으려고 하는 것을 허용하기 때문이다<br>캘린더, SMS와 같은 것은 Shared content providers를 이용하여 작동된다<br>Content Providers를 설계하는것은 나중에 다른 App에 날씨 데이터를 공유 하기 위해서 입니다</p>
<p>만약 공유할 필요가 없으면 넘어 가면 됩니다!<br>하지만, 우리는 공부가 목적이닌깐 만듭시다!!</p>
<p><a href="https://developer.android.com/guide/topics/providers/content-providers.html">content providers</a></p>
<p><img src="/img/adnroid-developing/5/1.png"></p>
<p><img src="/img/adnroid-developing/5/2.png"></p>
<p>ContentProvider를 이용해서 widgets, Search가 작동하는 방법입니다<br>APIs의 상당량은 syncing, querying data, UI의 updating을 적절히 하는 과정의 최적화 설계가 되어있습니다<br>Syncadapter, Cursorloader를 나중에 이용하게 됩니다<br>Content Observer를 이용해서 UI를 자동적으로 업데이트 하게 만들 수 있습니다</p>
<hr>
<h2 id="Content-Uri"><a href="#Content-Uri" class="headerlink" title="Content Uri"></a>Content Uri</h2><p><img src="/img/adnroid-developing/5/3.png"></p>
<p>우리는 이제 실제로 작업을 시작해야합니다<br>다음과 같은 순서로 진행을 합니다</p>
<ol>
<li>Application 에서 지원하는 URI를 결정합니다</li>
<li>Contract의 내용을 추가합니다</li>
<li>URI를 각각 지원하는 UriMatcher를 사용합니다</li>
<li>ContentProvider의 6개의 함수를 구현합니다</li>
</ol>
<hr>
<h3 id="1-Application-에서-지원하는-URI를-결정합니다"><a href="#1-Application-에서-지원하는-URI를-결정합니다" class="headerlink" title="1. Application 에서 지원하는 URI를 결정합니다"></a>1. Application 에서 지원하는 URI를 결정합니다</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">content:&#x2F;&#x2F;com.study.sunshine.app&#x2F;weather&#x2F;Seoul,kr<br></code></pre></td></tr></table></figure>

<p>다음과 같이 Seoul지역의 날씨를 조회하는 URI를 사용합니다</p>
<p>커서를 통해서 다음 URI의 반환값을 줍니다</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">content:&#x2F;&#x2F;com.study.sunshine.app&#x2F;weather&#x2F;Busan,kr<br><br>content:&#x2F;&#x2F;com.study.sunshine.app&#x2F;weather&#x2F;Tokyo,jp<br></code></pre></td></tr></table></figure>

<p>다음과 같이 URI를 변경하면 다른 국가, 다른 지역의 날씨 정보를 가져올 수 있습니다</p>
<hr>
<ul>
<li>content:</li>
</ul>
<p>SCHEME : URI에 사용되는 프로토콜을 식별합니다</p>
<ul>
<li>com.study.sunshine.app</li>
</ul>
<p>AUTHORITY : 콘텐츠를 찾는 데 사용되는 고유 글자, 거의 항상 Application의 패키지 이름으로 합니다</p>
<ul>
<li>weather</li>
</ul>
<p>데이터베이스의 테이블을 가리키는 위치입니다</p>
<ul>
<li>Seoul,kr</li>
</ul>
<p>QUERY : 테이블의 원하는 쿼리 데이터를 넣는 것 입니다</p>
<ul>
<li>Seoul,kr?DATE=1485700000</li>
</ul>
<p>다음과 같은 형태로 일반적인 쿼리 형태를 취할 수도 있습니다<br>DATE -&gt; 1970. 01. 01. 00:00:00 을 기준으로 합니다</p>
<hr>
<p><img src="/img/adnroid-developing/5/4.png"></p>
<p>다음과 같은 URI를 정했습니다</p>
<p>2번은 우리의 첫페이지에서 날씨 예보를 보는데 사용하겠고<br>3번은 상세 날씨보기에서 사용을 합니다</p>
<p>1,4번은 데이터 삽입, 수정, 삭제에 사용합니다<br>기본 URI를 잡아두면 테스팅할때 매우 유용합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/weather</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER_WITH_LOCATION = <span class="hljs-number">101</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/weather/[LOCATION]</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER_WITH_LOCATION_AND_DATE = <span class="hljs-number">102</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/weather/[LOCATION]/[DATE]</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LOCATION = <span class="hljs-number">300</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/location</span><br></code></pre></td></tr></table></figure>

<p>androidTest - data 폴더<br><a href="/downloads/code/5/TestProvider.java">TestProvider.java</a><br><a href="/downloads/code/5/TestUriMatcher.java">TestUriMatcher.java</a><br><a href="/downloads/code/5/TestWeatherContract.java">TestWeatherContract.java</a></p>
<p>androidTest 폴더<br><a href="/downloads/code/5/TestFetchWeatherTask.java">TestFetchWeatherTask.java</a></p>
<p>기본package data 폴더<br><a href="/downloads/code/5/WeatherProvider.java">WeatherProvider.java</a><br><a href="/downloads/code/5/WeatherContract.java">WeatherContract.java</a></p>
<hr>
<p>WeatherContract 에 URI 관련 정보를 추가했습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CONTENT_AUTHORITY = <span class="hljs-string">&quot;본인패키지명.앱이름.app&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Uri BASE_CONTENT_URI = Uri.parse(<span class="hljs-string">&quot;content://&quot;</span> + CONTENT_AUTHORITY);<br></code></pre></td></tr></table></figure>

<p>CONTENT_AUTHORITY를 이용해서 CONTENT_AUTHORITY_URI를 만들어 줍니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PATH_WEATHER = <span class="hljs-string">&quot;weather&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PATH_LOCATION = <span class="hljs-string">&quot;location&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>각각 테이블을 의미합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Uri <span class="hljs-title">buildWeatherUri</span><span class="hljs-params">(<span class="hljs-keyword">long</span> id)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Uri <span class="hljs-title">buildWeatherLocation</span><span class="hljs-params">(String locationSetting)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Uri <span class="hljs-title">buildWeatherLocationWithStartDate</span><span class="hljs-params">(String locationSetting, <span class="hljs-keyword">long</span> startDate)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Uri <span class="hljs-title">buildWeatherLocationWithDate</span><span class="hljs-params">(String locationSetting, <span class="hljs-keyword">long</span> date)</span></span><br></code></pre></td></tr></table></figure>
<p>EnCoding</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getLocationSettingFromUri</span><span class="hljs-params">(Uri uri)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getDateFromUri</span><span class="hljs-params">(Uri uri)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getStartDateFromUri</span><span class="hljs-params">(Uri uri)</span></span><br></code></pre></td></tr></table></figure>
<p>DeCoding</p>
<p><a href="https://developer.android.com/reference/android/net/Uri.Builder.html">UriBuilder API</a></p>
<hr>
<h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><ul>
<li>WeatherContract.WeatherEntry.buildWeatherLocation() 완성합니다</li>
<li>TestWeatherContract.testBuildWeatherLocation() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답"><a href="#정답" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Uri <span class="hljs-title">buildWeatherLocation</span><span class="hljs-params">(String locationSetting)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> CONTENT_URI.buildUpon().appendPath(locationSetting).build();<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="UriMatcher"><a href="#UriMatcher" class="headerlink" title="UriMatcher"></a>UriMatcher</h2><p>ContentProvider에는 UriMatcher를 쉽게 사용할 방법을 제공하고 있습니다<br>ContentProvider는 전달된 URI 따라서 각각의 기능을 수행합니다<br>우리는 4가지의 URI를 구현합니다</p>
<p><img src="/img/adnroid-developing/5/5.png"></p>
<p>각각 다른 작업을 수행합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/weather</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER_WITH_LOCATION = <span class="hljs-number">101</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/weather/[LOCATION]</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER_WITH_LOCATION_AND_DATE = <span class="hljs-number">102</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/weather/[LOCATION]/[DATE]</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LOCATION = <span class="hljs-number">300</span>;<br><span class="hljs-comment">//content://com.study.sunshine.app/location</span><br></code></pre></td></tr></table></figure>

<p>정해진 static final int 값과 비교하여서 작업을 수행합니다<br>ContentProvider에 전달된 URI의 형태를 알수있는 방법이 필요하기 때문입니다<br>switch - case 문을 이용해서 손 쉽게 처리할 수 있습니다<br>UriMatcher는 다양한 형태의 URI에 표현 구문을 일치 시킬 정규표현식과 같은 역할을 합니다</p>
<p><strong>#</strong> : 숫자<br><strong>*</strong> : 모든 문자열</p>
<p><a href="https://developer.android.com/reference/android/content/UriMatcher.html">UriMatcher API</a></p>
<h2 id="연습-1"><a href="#연습-1" class="headerlink" title="연습"></a>연습</h2><ul>
<li>WeatherProvider.buildUriMatcher() 완성합니다</li>
<li>TestUriMatcher.testUriMatcher() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-1"><a href="#정답-1" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> UriMatcher <span class="hljs-title">buildUriMatcher</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> UriMatcher matcher = <span class="hljs-keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);<br>    <span class="hljs-keyword">final</span> String authority = WeatherContract.CONTENT_AUTHORITY;<br><br>    matcher.addURI(authority, WeatherContract.PATH_WEATHER, WEATHER);<br>    matcher.addURI(authority, WeatherContract.PATH_WEATHER + <span class="hljs-string">&quot;/*&quot;</span>, WEATHER_WITH_LOCATION);<br>    matcher.addURI(authority, WeatherContract.PATH_WEATHER + <span class="hljs-string">&quot;/*/#&quot;</span>, WEATHER_WITH_LOCATION_AND_DATE);<br><br>    matcher.addURI(authority, WeatherContract.PATH_LOCATION, LOCATION);<br>    <span class="hljs-keyword">return</span> matcher;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="ContentProvider-Registry"><a href="#ContentProvider-Registry" class="headerlink" title="ContentProvider Registry"></a>ContentProvider Registry</h2><p>UriMatcher는 ContentProvider를 구현할 때 핵심입니다!!<br>ContentProvider를 사용하기 전에 AndroidManifest.xml에 등록을 하여야 합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;provider<br>    android:name=[CONTENT PROVIDER CLASS]<br>    android:authorities=[CONTENT_AUTHORITY]/&gt;<br></code></pre></td></tr></table></figure>

<p>ContentResolver라는 Android Util Class를 사용할 수 있습니다<br>ContentResolver는 AUTHORITY를 사용하여 클래스를 찾아 WeatherProvider를 호출합니다<br>AndroidManifest에 ContentProvider를 등록하여서 WeatherContract와 WeatherContract.CONTENT_AUTHORITY를 등록합시다</p>
<p><a href="https://developer.android.com/guide/topics/manifest/provider-element.html">Manifest - Providers</a><br><a href="https://developer.android.com/guide/topics/providers/content-provider-basics.html#ClientProvider">ContentProvider</a></p>
<h2 id="연습-2"><a href="#연습-2" class="headerlink" title="연습"></a>연습</h2><ul>
<li>AndroidManifest에 provider를 등록하세요</li>
<li>TestProvider.testProviderRegistry() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-2"><a href="#정답-2" class="headerlink" title="정답"></a>정답</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;provider<br>    android:name=&quot;.data.WeatherProvider&quot;<br>    android:authorities=&quot;본인패키지명.앱이름.app&quot;/&gt;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="ContentProvider-6-function"><a href="#ContentProvider-6-function" class="headerlink" title="ContentProvider 6 function"></a>ContentProvider 6 function</h2><p>AndroidManifest에 provider를 등록했습니다<br>이제 WeatherProvider를 코딩합시다</p>
<p>ContentProvider 구현이 가장 어려운 부분입니다<br><strong>6개의 함수를 구현해야(Override) 합니다</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">Cursor <span class="hljs-title">query</span> <span class="hljs-params">(Uri uri, String[] projection,String selection,</span></span><br><span class="hljs-function"><span class="hljs-params">               String[] selectionArgs, String sortOrder)</span></span><br><span class="hljs-function">Uri <span class="hljs-title">insert</span> <span class="hljs-params">(Uri uri, ContentValues values)</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span> <span class="hljs-params">(Uri uri, ContentValues values,</span></span><br><span class="hljs-function"><span class="hljs-params">             String selection, String[] selectionArgs)</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span> <span class="hljs-params">(Uri uri,String selection, String[] selectionArgs)</span></span><br><span class="hljs-function">String <span class="hljs-title">getType</span> <span class="hljs-params">(Uri uri)</span></span><br></code></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onCreate</span><span class="hljs-params">()</span> </span>&#123;<br>    mOpenHelper = <span class="hljs-keyword">new</span> WeatherDbHelper(getContext());<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>OpenHelper를 인스턴스 등록하여서 사용합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">(Uri uri)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> match = sUriMatcher.match(uri);<br><br>    <span class="hljs-keyword">switch</span> (match) &#123;<br>        <span class="hljs-keyword">case</span> WEATHER:<br>            <span class="hljs-keyword">return</span> WeatherContract.WeatherEntry.CONTENT_TYPE;<br>        <span class="hljs-keyword">case</span> LOCATION:<br>            <span class="hljs-keyword">return</span> WeatherContract.LocationEntry.CONTENT_TYPE;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">&quot;Unknown uri: &quot;</span> + uri);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>입력된 URI가 어떤 형태를 요구하는지 UriMatcher를 통해서 알려줍니다</p>
<h2 id="연습-3"><a href="#연습-3" class="headerlink" title="연습"></a>연습</h2><ul>
<li>WeatherProvider.getType(Uri uri) 완성합니다</li>
<li>TestProvider.testGetType() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-3"><a href="#정답-3" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">(Uri uri)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> match = sUriMatcher.match(uri);<br><br>    <span class="hljs-keyword">switch</span> (match) &#123;<br>        <span class="hljs-keyword">case</span> WEATHER_WITH_LOCATION_AND_DATE:<br>            <span class="hljs-keyword">return</span> WeatherContract.WeatherEntry.CONTENT_ITEM_TYPE;<br>        <span class="hljs-keyword">case</span> WEATHER_WITH_LOCATION:<br>            <span class="hljs-keyword">return</span> WeatherContract.WeatherEntry.CONTENT_TYPE;<br>        <span class="hljs-keyword">case</span> WEATHER:<br>            <span class="hljs-keyword">return</span> WeatherContract.WeatherEntry.CONTENT_TYPE;<br>        <span class="hljs-keyword">case</span> LOCATION:<br>            <span class="hljs-keyword">return</span> WeatherContract.LocationEntry.CONTENT_TYPE;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">&quot;Unknown uri: &quot;</span> + uri);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>WEATHER_WITH_LOCATION_AND_DATE 은 하나의 아이템이 나와야 합니다<br>WEATHER_WITH_LOCATION은 디렉토리가 나와야 합니다</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Cursor <span class="hljs-title">query</span><span class="hljs-params">(Uri uri, String[] projection,</span></span><br><span class="hljs-function"><span class="hljs-params">                    String selection, String[] selectionArgs, String sortOrder)</span></span><br></code></pre></td></tr></table></figure>

<p>query 함수는 제일 구현하기 복잡하고 어렵습니다<br>기본 코드에 뼈대만 잡혀 있습니다<br>이것을 이용해서 구현합니다</p>
<p>switch - case 문을 이용해서 각각의 Cursor를 반환합니다<br>함수 끝 부분에서 전달된 URI를 설정합니다<br>URI의 변화를 모니터링 하기 위해서 입니다</p>
<h2 id="연습-4"><a href="#연습-4" class="headerlink" title="연습"></a>연습</h2><ul>
<li>WeatherProvider.query() 완성합니다</li>
<li>TestProvider.testBasicWeatherQuery(), TestProvider.testBasicLocationQueries() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-4"><a href="#정답-4" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> WEATHER: &#123;<br>    retCursor = mOpenHelper.getReadableDatabase().query(<br>            WeatherContract.WeatherEntry.TABLE_NAME,<br>            projection,<br>            selection,<br>            selectionArgs,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span>,<br>            sortOrder<br>    );<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> LOCATION: &#123;<br>    retCursor = mOpenHelper.getReadableDatabase().query(<br>            WeatherContract.LocationEntry.TABLE_NAME,<br>            projection,<br>            selection,<br>            selectionArgs,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span>,<br>            sortOrder<br>    );<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p><img src="/img/adnroid-developing/5/6.png"></p>
<p>다음과 같이 우리는 테이블관의 관계를 설정했습니다<br>Join을 사용하여 쿼리를 구현하는 방법을 설명하겠습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> SQLiteQueryBuilder sWeatherByLocationSettingQueryBuilder;<br></code></pre></td></tr></table></figure>

<p>SQLiteQueryBuilder는 Query를 완성하는데 도움을 줍니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">sWeatherByLocationSettingQueryBuilder.setTables(<br>        WeatherContract.WeatherEntry.TABLE_NAME + <span class="hljs-string">&quot; INNER JOIN &quot;</span> +<br>                WeatherContract.LocationEntry.TABLE_NAME +<br>                <span class="hljs-string">&quot; ON &quot;</span> + WeatherContract.WeatherEntry.TABLE_NAME +<br>                <span class="hljs-string">&quot;.&quot;</span> + WeatherContract.WeatherEntry.COLUMN_LOC_KEY +<br>                <span class="hljs-string">&quot; = &quot;</span> + WeatherContract.LocationEntry.TABLE_NAME +<br>                <span class="hljs-string">&quot;.&quot;</span> + WeatherContract.LocationEntry._ID);<br></code></pre></td></tr></table></figure>
<p>setTables는 SQL 쿼리의 내용의 일부를 설명하게 됩니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String sLocationSettingSelection =<br>        WeatherContract.LocationEntry.TABLE_NAME +<br>                <span class="hljs-string">&quot;.&quot;</span> + WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING + <span class="hljs-string">&quot; = ? &quot;</span>;<br></code></pre></td></tr></table></figure>

<p>기본형 쿼리를 완성해 두고 ? 에는 우리가 전달하는 값이 들어갑니다</p>
<p>getWeatherByLocationSetting()<br>getWeatherByLocationSettingAndDate()</p>
<p>메서드에서 사용하는 모습을 볼 수 있습니다</p>
<p><strong>이제 insert를 해봅시다</strong></p>
<p>다른 함수와 마찬가지로 UriMatcher를 이용해서 합니다<br>insert는 단순합니다<br>테이블에 맞는 데이터를 맞게 insert 하면 됩니다<br>ContentValues를 이용해서 삽입합니다</p>
<p>그러나 어려운 점이 존재합니다!<br>데이터베이스의 데이터를 삽입하면 변경된 데이터를 가질 가능성이 있는 모든 곳에 알려줘야 합니다</p>
<p>루트가 되는 URI에 알림을 하면 하위의 모든 URI에 알림이 됩니다<br>ContentResolver를 사용해서 ContentObserver에게 알려 줄 수 있다</p>
<p>하위 URI에만 알림을 해주면 루트 URI에는 알림이 오지 않습니다<br>항상 이점을 명심하고 주의해야합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> WEATHER: &#123;<br>    normalizeDate(values);<br>    <span class="hljs-keyword">long</span> _id = db.insert(WeatherContract.WeatherEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, values);<br>    <span class="hljs-keyword">if</span> (_id &gt; <span class="hljs-number">0</span>)<br>        returnUri = WeatherContract.WeatherEntry.buildWeatherUri(_id);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> android.database.SQLException(<span class="hljs-string">&quot;Failed to insert row into &quot;</span> + uri);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>데이터 삽입이 정상적으로 이루어졌는지 검사를 하고 애러 처리까지 해줍니다<br>_id 까지 포함이 된 Uri를 만들어서 반환해 주면 끝입니다</p>
<p>ContentProvider를 완벽히 구현한다면 Contract, UriMatcher, query 함수 의 URI형을 다 구현해야 합니다</p>
<h2 id="연습-5"><a href="#연습-5" class="headerlink" title="연습"></a>연습</h2><ul>
<li>WeatherProvider.insert() 완성합니다</li>
<li>TestProvider.testInsertReadProvider 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-5"><a href="#정답-5" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> LOCATION: &#123;<br>    <span class="hljs-keyword">long</span> _id = db.insert(WeatherContract.LocationEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, values);<br>    <span class="hljs-keyword">if</span> (_id &gt; <span class="hljs-number">0</span>)<br>        returnUri = WeatherContract.LocationEntry.buildLocationUri(_id);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> android.database.SQLException(<span class="hljs-string">&quot;Failed to insert row into &quot;</span> + uri);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>남은 것은 update, delete입니다</strong><br>insert와 비슷합니다</p>
<p>다만 다른 점이라고 하면 삭제된 곳이나 변경이 된곳의 _id를 알려줘야 합니다<br>URI가 아닌 int (_id) 라는 점 입니다</p>
<p>테스트를 하기 전에 다음과 같이 변경 합니다</p>
<p><strong>TestDb.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAllRecords</span><span class="hljs-params">()</span> </span>&#123;<br>    deleteAllRecordsFromProvider();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>더 이상 DB로 직접 지우는 게 아니라 ContentProvider를 이용해야 하기 때문에 변경합니다</p>
<h2 id="연습-6"><a href="#연습-6" class="headerlink" title="연습"></a>연습</h2><ul>
<li>WeatherProvider.update, WeatherProvider.delete 완성합니다</li>
<li>TestProvider.testUpdateLocation, TestProvider.testDeleteRecords 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-6"><a href="#정답-6" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> SQLiteDatabase db = mOpenHelper.getWritableDatabase();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> match = sUriMatcher.match(uri);<br>    <span class="hljs-keyword">int</span> rowsDeleted;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == selection) selection = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-keyword">switch</span> (match) &#123;<br>        <span class="hljs-keyword">case</span> WEATHER:<br>            rowsDeleted = db.delete(<br>                    WeatherContract.WeatherEntry.TABLE_NAME, selection, selectionArgs);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> LOCATION:<br>            rowsDeleted = db.delete(<br>                    WeatherContract.LocationEntry.TABLE_NAME, selection, selectionArgs);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">&quot;Unknown uri: &quot;</span> + uri);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (rowsDeleted != <span class="hljs-number">0</span>) &#123;<br>        getContext().getContentResolver().notifyChange(uri, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    db.close();<br>    <span class="hljs-keyword">return</span> rowsDeleted;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> SQLiteDatabase db = mOpenHelper.getWritableDatabase();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> match = sUriMatcher.match(uri);<br>    <span class="hljs-keyword">int</span> rowsUpdated;<br><br>    <span class="hljs-keyword">switch</span> (match) &#123;<br>        <span class="hljs-keyword">case</span> WEATHER:<br>            normalizeDate(values);<br>            rowsUpdated = db.update(WeatherContract.WeatherEntry.TABLE_NAME, values, selection,<br>                    selectionArgs);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> LOCATION:<br>            rowsUpdated = db.update(WeatherContract.LocationEntry.TABLE_NAME, values, selection,<br>                    selectionArgs);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">&quot;Unknown uri: &quot;</span> + uri);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (rowsUpdated != <span class="hljs-number">0</span>) &#123;<br>        getContext().getContentResolver().notifyChange(uri, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    db.close();<br>    <span class="hljs-keyword">return</span> rowsUpdated;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>우리는 다 완성 했습니다<br>하지만 좀 더 효율적으로 할 필요가 있습니다<br>Database를 다루다 보면 하나의 데이터를 삽입하는 것보다 여러개 데이터를 한번에 처리하는것이 더 빠릅니다<br>트랜잭션으로 그룹화 해서 처리하는게 더 효율적입니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bulkInsert</span><span class="hljs-params">(Uri uri, ContentValues[] values)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> SQLiteDatabase db = mOpenHelper.getWritableDatabase();<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> match = sUriMatcher.match(uri);<br>    <span class="hljs-keyword">switch</span> (match) &#123;<br>        <span class="hljs-keyword">case</span> WEATHER:<br>            db.beginTransaction();<br>            <span class="hljs-keyword">int</span> returnCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (ContentValues value : values) &#123;<br>                    normalizeDate(value);<br>                    <span class="hljs-keyword">long</span> _id = db.insert(WeatherContract.WeatherEntry.TABLE_NAME, <span class="hljs-keyword">null</span>, value);<br>                    <span class="hljs-keyword">if</span> (_id != -<span class="hljs-number">1</span>) &#123;<br>                        returnCount++;<br>                    &#125;<br>                &#125;<br>                db.setTransactionSuccessful();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                db.endTransaction();<br>            &#125;<br>            getContext().getContentResolver().notifyChange(uri, <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">return</span> returnCount;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.bulkInsert(uri, values);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>setTransactionSuccessful()를 호출하지 않으면 기록이 되지 않는다는 점을 명심하세여</strong></p>
<p>ContentProvider를 완벽하게 다 만들었습니다</p>
<p><img src="/img/adnroid-developing/5/3.png"></p>
<ol>
<li>Application 에서 지원하는 URI를 결정했습니다</li>
<li>Contract의 UriMatcher와 관련된 내용을 추가하였습니다</li>
<li>URI를 각각 지원하는 UriMatcher를 사용해서 구현했습니다</li>
<li>ContentProvider의 6개의 함수를 구현했습니다</li>
</ol>
<hr>
<h2 id="FetchWeatherTask-Refactoring"><a href="#FetchWeatherTask-Refactoring" class="headerlink" title="FetchWeatherTask Refactoring"></a>FetchWeatherTask Refactoring</h2><p>ContentProvider를 완성했으니 이제 코드를 Refactoring을 합시다<br>기존에 FetchWeatherTask class를 파일로 빼고 수정을 합니다</p>
<p>package 폴더<br><a href="/downloads/code/5/FetchWeatherTask.java">FetchWeatherTask.java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    FetchWeatherTask fetchWeatherTask = <span class="hljs-keyword">new</span> FetchWeatherTask(getActivity(), mForecastAdapter);<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>FetchWeatherTask의 생성자를 살펴보면 다음 코드를 이해할 수 있습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FetchWeatherTask</span><span class="hljs-params">(Context context, ArrayAdapter&lt;String&gt; forecastAdapter)</span> </span>&#123;<br>        mContext = context;<br>        mForecastAdapter = forecastAdapter;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>FetchWeatherTask.addLocation() 메서드를 완성 해 봅시다<br>도시의 이름, 위도, 경도를 입력하게 됩니다</p>
<p>DB에 있는 도시이면 id 값을 찾아서 반환하고, 없는 도시이면 저장 후 반환합니다</p>
<h2 id="연습-7"><a href="#연습-7" class="headerlink" title="연습"></a>연습</h2><ul>
<li>FetchWeatherTask.addLocation() 완성합니다</li>
<li>TestFetchWeatherTask.testAddLocation() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-7"><a href="#정답-7" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">addLocation</span><span class="hljs-params">(String locationSetting, String cityName, <span class="hljs-keyword">double</span> lat, <span class="hljs-keyword">double</span> lon)</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> locationId;<br><br>    Cursor locationCursor = mContext.getContentResolver().query(<br>            WeatherContract.LocationEntry.CONTENT_URI,<br>            <span class="hljs-keyword">new</span> String[]&#123;WeatherContract.LocationEntry._ID&#125;,<br>            WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING + <span class="hljs-string">&quot; = ?&quot;</span>,<br>            <span class="hljs-keyword">new</span> String[]&#123;locationSetting&#125;,<br>            <span class="hljs-keyword">null</span>);<br><br>    <span class="hljs-keyword">if</span> (locationCursor.moveToFirst()) &#123;<br>        <span class="hljs-keyword">int</span> locationIdIndex = locationCursor.getColumnIndex(WeatherContract.LocationEntry._ID);<br>        locationId = locationCursor.getLong(locationIdIndex);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ContentValues locationValues = <span class="hljs-keyword">new</span> ContentValues();<br><br>        locationValues.put(WeatherContract.LocationEntry.COLUMN_CITY_NAME, cityName);<br>        locationValues.put(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING, locationSetting);<br>        locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LAT, lat);<br>        locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LONG, lon);<br><br>        Uri insertedUri = mContext.getContentResolver().insert(<br>                WeatherContract.LocationEntry.CONTENT_URI,<br>                locationValues<br>        );<br><br>        locationId = ContentUris.parseId(insertedUri);<br>    &#125;<br><br>    locationCursor.close();<br>    <span class="hljs-keyword">return</span> locationId;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>bulkInsert는 트랙잭션을 효율적으로 이용하여서 여러개의 데이터를 효율적으로 삽입할 수 있습니다</p>
<p>우리는 기존의 일주일 데이터가 아닌 2주일 데이터를 저장도록 합시다</p>
<h2 id="연습-8"><a href="#연습-8" class="headerlink" title="연습"></a>연습</h2><ul>
<li>FetchWeatherTask.getWeatherDataFromJson() 완성합니다</li>
<li>TestProvider.testBulkInsert() 이용해서 테스트합니다</li>
</ul>
<h3 id="정답-8"><a href="#정답-8" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (cVVector.size() &gt; <span class="hljs-number">0</span>) &#123;<br>    ContentValues[] cvArray = <span class="hljs-keyword">new</span> ContentValues[cVVector.size()];<br>    cVVector.toArray(cvArray);<br>    mContext.getContentResolver().bulkInsert(WeatherEntry.CONTENT_URI, cvArray);<br>&#125;<br><br>String sortOrder = WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot; ASC&quot;</span>;<br>Uri weatherForLocationUri = WeatherEntry.buildWeatherLocationWithStartDate(<br>        locationSetting, System.currentTimeMillis());<br><br>Cursor cur = mContext.getContentResolver().query(weatherForLocationUri,<br>        <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, sortOrder);<br><br>cVVector = <span class="hljs-keyword">new</span> Vector&lt;ContentValues&gt;(cur.getCount());<br><span class="hljs-keyword">if</span> (cur.moveToFirst()) &#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        ContentValues cv = <span class="hljs-keyword">new</span> ContentValues();<br>        DatabaseUtils.cursorRowToContentValues(cur, cv);<br>        cVVector.add(cv);<br>    &#125; <span class="hljs-keyword">while</span> (cur.moveToNext());<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 실행하면 이주일 동안의 날씨 정보를 볼 수 있습니다</p>
<hr>
<h1 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h1><ul>
<li>ContentProvider</li>
<li>URI 설계</li>
<li>UriMatcher</li>
<li>ContentProvider Registry</li>
<li>ContentProvider 6 function</li>
<li>FetchWeatherTask Refactoring</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>6. Hooking it up with Loaders</title>
    <url>/2017/02/15/adnroid-developing/Developing-Android-Apps-06/</url>
    <content><![CDATA[<h2 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h2><p><strong>로더는 정말 대단하다!</strong><br>로더는 Activity나 Fragment 내에서 비동기 데이터를 로딩할 때 최선의 작업방식이다<br>만들어진 로더는 Background Thread에 Data를 로딩할 AsyncTask를 만듭니다</p>
<p>첫 로딩이 완료되면 UI 스레드와 동기화합니다<br>이제 데이터를 모니터링하고 갱신되는 사항은 모두 UI 스레드로 보내도록 설정할 수 있습니다<br>더 좋은 점은 힘들게 DB에 ContentProvider를 추가한 혜택을 느낄 수 있습니다!</p>
<p><img src="/img/adnroid-developing/6/1.png"></p>
<p><strong>Cursorloader</strong>는 AsyncTask Loader의 하위 구현으로서 ContentProvider에 질의를 수행하고 커서를 반환합니다<br>이 Cursor는 직접 UI에 바인딩 할 수 있습니다</p>
<p>Cursorloader는 데이터베이스에 따라 ContentProvider가 변경되는 경우 Cursor를 자동으로 업데이트합니다<br>설정이 바뀌어서 Host Activity가 함께 다시 만들어지면 직전의 커서에 다시 연결하기 때문에 장치가 회전해도 데이터를 다시 쿼리 할 필요는 없습니다</p>
<p>Cursorloader는 Cursor의 관리, Background Thread의 생성, UI와 동기화, 데이터 소스의 모니터링을 처리합니다<br>ContentProvider를 이용하지 않는 것은 현명하지 않지만 그 경우에도 로더를 사용할 수 있습니다<br>AsyncTaskLoader를 상속받아서 사용자의 Loader를 만들 수 있습니다</p>
<p><a href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html">AsyncTask Loader API</a></p>
<p><img src="/img/adnroid-developing/6/2.png"></p>
<p><img src="/img/adnroid-developing/6/3.png"></p>
<p>Loader는 데이터의 동기화를 위한 프레임워크를 제공합니다<br>Loader는 LoaderManager를 통해서 ID로 등록합니다<br>Loader를 등록함으로써 Lifecycle에 자유롭습니다</p>
<p><img src="/img/adnroid-developing/6/4.png"></p>
<p><strong>현재 우리 구조를 그대로 사용한다면 화면을 회전하거나 Activity가 restart 하는 경우 AsyncTask 모듈이 다시 호출 됩니다</strong></p>
<p><img src="/img/adnroid-developing/6/5.png"></p>
<p><strong>AsyncTaskLoader는 AsyncTask와 같은 기능을 수행합니다만 Loader 이기 때문에 Lifecycle이 다릅니다</strong></p>
<p>Loader의 Thread는 loadInBackgroud 에서 계속 실행 되게 됩니다</p>
<p>Activity가 불려져서 restart 하는 경우 LoaderManager는 이전의 Loader 가져오게 됩니다<br>작업이 완료된 후 AsyncTask의 onPostExecute()에 해당하는 메서드 onLoadFinished() 가 불려지게 됩니다</p>
<p>이렇게 진행 되기 때문에 기존의 구조처럼 2번 부르는 일은 발생하지 않습니다</p>
<p><img src="/img/adnroid-developing/6/6.png"></p>
<p>Cursorloader는 AsyncTaskLoader의 하위 Class 입니다<br>좀 더 최적화가 되어있는 형태입니다</p>
<p>onLoadFinished를 통해서 Cursor가 전달되고 UI에 즉시 전달되는 형태입니다</p>
<p><img src="/img/adnroid-developing/6/7.png"></p>
<hr>
<p>데이터 베이스를 쿼리 할 때 여기에 있는 클래스를 이용하는 방법을 설명하겠습니다</p>
<ol>
<li>UI는 WeatherContract를 이용해서 URI를 구축합니다</li>
<li>이 URI를 가지고 ContentResolver를 호출합니다</li>
<li>ContentResolver는 WeatherProvider에 요청을 전송합니다</li>
<li>WeatherProvider는 DB Helper를 이용해서 WeatherDBHelper 인스턴스를 얻습니다</li>
<li>WeatherDBHelper 인스턴스에 SQL Query를 전달하여서 SQLite 데이터베이스에 쿼리를 보냅니다</li>
</ol>
<p><img src="/img/adnroid-developing/6/8.png"></p>
<p>Cursorloader는 URI를 취득한 상태에서 우리가 직접 ContentResolver를 호출하는 방법 대신에 AsyncTask를 만들어서 ContentResolver를 호출합니다</p>
<p><img src="/img/adnroid-developing/6/9.png"></p>
<p>Query 결과인 Cursor는 Android UI에 전달이 됩니다<br>CursorAdapter는 Cursor를 이용해서 View를 만들고 ListView 항목을 채우게 됩니다</p>
<hr>
<p>이제 우리는 ArrayAdapter을 CursorAdapter로 변경합니다</p>
<p><a href="/downloads/code/6/ForecastAdapter.java">ForecastAdapter.java</a><br><a href="/downloads/code/6/Utility.java">Utility.java</a></p>
<p><strong>TestFetchWeatherTask.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">FetchWeatherTask fwt = <span class="hljs-keyword">new</span> FetchWeatherTask(getContext(), <span class="hljs-keyword">null</span>);<br><span class="hljs-comment">// 위에 내용을 아래처럼 바꿔주세요</span><br>FetchWeatherTask fwt = <span class="hljs-keyword">new</span> FetchWeatherTask(getContext());<br></code></pre></td></tr></table></figure>

<p><strong>FetchWeatherTask.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">public class FetchWeatherTask extends AsyncTask&lt;String, Void, String[]&gt;&#123;&#125;<br><span class="hljs-comment">// 위에 내용을 아래처럼 바꿔주세요</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FetchWeatherTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Void</span>&gt;</span>&#123;&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FetchWeatherTask</span><span class="hljs-params">(Context context, ArrayAdapter&lt;String&gt; forecastAdapter)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 위에 내용을 아래처럼 바꿔주세요</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FetchWeatherTask</span><span class="hljs-params">(Context context)</span></span><br></code></pre></td></tr></table></figure>

<p>getReadableDateString(), formatHighLows(), convertContentValuesToUXFormat(), onPostExecute() 삭제</p>
<p>getWeatherDataFromJson() 반환형 void 변경<br>doInBackground() 반환형 Void 변경</p>
<p>getWeatherDataFromJson()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getWeatherDataFromJson</span><span class="hljs-params">(String forecastJsonStr, String locationSetting)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> JSONException </span>&#123;<br>    <span class="hljs-keyword">final</span> String OWM_CITY = <span class="hljs-string">&quot;city&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_CITY_NAME = <span class="hljs-string">&quot;name&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_COORD = <span class="hljs-string">&quot;coord&quot;</span>;<br><br>    <span class="hljs-keyword">final</span> String OWM_LATITUDE = <span class="hljs-string">&quot;lat&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_LONGITUDE = <span class="hljs-string">&quot;lon&quot;</span>;<br><br>    <span class="hljs-keyword">final</span> String OWM_LIST = <span class="hljs-string">&quot;list&quot;</span>;<br><br>    <span class="hljs-keyword">final</span> String OWM_PRESSURE = <span class="hljs-string">&quot;pressure&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_HUMIDITY = <span class="hljs-string">&quot;humidity&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_WINDSPEED = <span class="hljs-string">&quot;speed&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_WIND_DIRECTION = <span class="hljs-string">&quot;deg&quot;</span>;<br><br><br>    <span class="hljs-keyword">final</span> String OWM_TEMPERATURE = <span class="hljs-string">&quot;temp&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_MAX = <span class="hljs-string">&quot;max&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_MIN = <span class="hljs-string">&quot;min&quot;</span>;<br><br>    <span class="hljs-keyword">final</span> String OWM_WEATHER = <span class="hljs-string">&quot;weather&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_DESCRIPTION = <span class="hljs-string">&quot;main&quot;</span>;<br>    <span class="hljs-keyword">final</span> String OWM_WEATHER_ID = <span class="hljs-string">&quot;id&quot;</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        JSONObject forecastJson = <span class="hljs-keyword">new</span> JSONObject(forecastJsonStr);<br>        JSONArray weatherArray = forecastJson.getJSONArray(OWM_LIST);<br><br>        JSONObject cityJson = forecastJson.getJSONObject(OWM_CITY);<br>        String cityName = cityJson.getString(OWM_CITY_NAME);<br><br>        JSONObject cityCoord = cityJson.getJSONObject(OWM_COORD);<br>        <span class="hljs-keyword">double</span> cityLatitude = cityCoord.getDouble(OWM_LATITUDE);<br>        <span class="hljs-keyword">double</span> cityLongitude = cityCoord.getDouble(OWM_LONGITUDE);<br><br>        <span class="hljs-keyword">long</span> locationId = addLocation(locationSetting, cityName, cityLatitude, cityLongitude);<br><br>        Vector&lt;ContentValues&gt; cVVector = <span class="hljs-keyword">new</span> Vector&lt;ContentValues&gt;(weatherArray.length());<br><br>        Time dayTime = <span class="hljs-keyword">new</span> Time();<br>        dayTime.setToNow();<br><br>        <span class="hljs-keyword">int</span> julianStartDay = Time.getJulianDay(System.currentTimeMillis(), dayTime.gmtoff);<br><br>        dayTime = <span class="hljs-keyword">new</span> Time();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; weatherArray.length(); i++) &#123;<br>            <span class="hljs-keyword">long</span> dateTime;<br>            <span class="hljs-keyword">double</span> pressure;<br>            <span class="hljs-keyword">int</span> humidity;<br>            <span class="hljs-keyword">double</span> windSpeed;<br>            <span class="hljs-keyword">double</span> windDirection;<br><br>            <span class="hljs-keyword">double</span> high;<br>            <span class="hljs-keyword">double</span> low;<br><br>            String description;<br>            <span class="hljs-keyword">int</span> weatherId;<br><br>            JSONObject dayForecast = weatherArray.getJSONObject(i);<br><br>            dateTime = dayTime.setJulianDay(julianStartDay+i);<br><br>            pressure = dayForecast.getDouble(OWM_PRESSURE);<br>            humidity = dayForecast.getInt(OWM_HUMIDITY);<br>            windSpeed = dayForecast.getDouble(OWM_WINDSPEED);<br>            windDirection = dayForecast.getDouble(OWM_WIND_DIRECTION);<br><br>            JSONObject weatherObject =<br>                        dayForecast.getJSONArray(OWM_WEATHER).getJSONObject(<span class="hljs-number">0</span>);<br>            description = weatherObject.getString(OWM_DESCRIPTION);<br>            weatherId = weatherObject.getInt(OWM_WEATHER_ID);<br><br>            JSONObject temperatureObject = dayForecast.getJSONObject(OWM_TEMPERATURE);<br>            high = temperatureObject.getDouble(OWM_MAX);<br>            low = temperatureObject.getDouble(OWM_MIN);<br><br>            ContentValues weatherValues = <span class="hljs-keyword">new</span> ContentValues();<br><br>            weatherValues.put(WeatherEntry.COLUMN_LOC_KEY, locationId);<br>            weatherValues.put(WeatherEntry.COLUMN_DATE, dateTime);<br>            weatherValues.put(WeatherEntry.COLUMN_HUMIDITY, humidity);<br>            weatherValues.put(WeatherEntry.COLUMN_PRESSURE, pressure);<br>            weatherValues.put(WeatherEntry.COLUMN_WIND_SPEED, windSpeed);<br>            weatherValues.put(WeatherEntry.COLUMN_DEGREES, windDirection);<br>            weatherValues.put(WeatherEntry.COLUMN_MAX_TEMP, high);<br>            weatherValues.put(WeatherEntry.COLUMN_MIN_TEMP, low);<br>            weatherValues.put(WeatherEntry.COLUMN_SHORT_DESC, description);<br>            weatherValues.put(WeatherEntry.COLUMN_WEATHER_ID, weatherId);<br><br>            cVVector.add(weatherValues);<br>    	&#125;<br><br>    	<span class="hljs-keyword">int</span> inserted = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> ( cVVector.size() &gt; <span class="hljs-number">0</span> ) &#123;<br>            ContentValues[] cvArray = <span class="hljs-keyword">new</span> ContentValues[cVVector.size()];<br>            cVVector.toArray(cvArray);<br>            inserted = mContext.getContentResolver().bulkInsert(WeatherEntry.CONTENT_URI, cvArray);<br>        &#125;<br><br>        Log.d(LOG_TAG, <span class="hljs-string">&quot;FetchWeatherTask Complete. &quot;</span> + inserted + <span class="hljs-string">&quot; Inserted&quot;</span>);<br><br>    &#125; <span class="hljs-keyword">catch</span> (JSONException e) &#123;<br>    	Log.e(LOG_TAG, e.getMessage(), e);<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayAdapter&lt;String&gt; mForecastAdapter;<br><span class="hljs-comment">// 변경</span><br>ForecastAdapter mForecastAdapter;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                             Bundle savedInstanceState)</span> </span>&#123;<br>    String locationSetting = Utility.getPreferredLocation(getActivity());<br>        String sortOrder = WeatherContract.WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot; ASC&quot;</span>;<br>        Uri weatherForLocationUri = WeatherContract.WeatherEntry.buildWeatherLocationWithStartDate(<br>                locationSetting, System.currentTimeMillis());<br><br>        Cursor cur = getActivity().getContentResolver().query(weatherForLocationUri,<br>                <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, sortOrder);<br><br>        mForecastAdapter = <span class="hljs-keyword">new</span> ForecastAdapter(getActivity(), cur, <span class="hljs-number">0</span>);<br><br>        View rootView = inflater.inflate(R.layout.fragment_main, container, <span class="hljs-keyword">false</span>);<br>        ListView listView = (ListView) rootView.findViewById(R.id.listview_forecast);<br>        listView.setAdapter(mForecastAdapter);<br><br>        <span class="hljs-keyword">return</span> rootView;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    FetchWeatherTask fetchWeatherTask = <span class="hljs-keyword">new</span> FetchWeatherTask(getActivity());<br>    String location = Utility.getPreferredLocation(getActivity());<br>    fetchWeatherTask.execute(location);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">openPreferredLocationInMap</span><span class="hljs-params">()</span> </span>&#123;<br>    String location = Utility.getPreferredLocation(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="CursorLoader"><a href="#CursorLoader" class="headerlink" title="CursorLoader"></a>CursorLoader</h2><p>CursorLoader 만드는 방법은 총 3단계 입니다<br>쉽게 따라오세여</p>
<ol>
<li>LoaderID를 만드세요<ul>
<li>이건 단순한 상수 값입니다</li>
<li>private static final int MY_LOADER_ID = [MY_ID];</li>
</ul>
</li>
<li>Loader Callback을 사용합니다<ul>
<li> Loader&lt; Cursor &gt; onCreateLoader(int i, Bundle bundel)</li>
<li>void onLoadFinished(Loadr&lt; Cursor &gt; cursorLoader, Cursor cursor)<ul>
<li> 작업이 완료되어서 데이터를 사용할 수 있을 때 호출</li>
<li> 데이터 변경을 하기 위해서는 cursorAdapter.swapCursor(cursor)</li>
</ul>
</li>
<li>void onLoaderReset(Loader&lt; Cursor &gt; cursorLoader)<ul>
<li> 로더 파기 시에만 호출</li>
<li> 더이상 변경을 안하는 것은 cursorAdapter.swapCursor(null)</li>
</ul>
</li>
</ul>
</li>
<li>LoaderManager를 이용해서 Loader를 초기화 합니다<ul>
<li>로더 ID를 통해서 초기화 합니다<ul>
<li>getLoaderManager().initLoader([LoaderID], [Bundle], [loaderCallBack]);</li>
</ul>
</li>
<li>Fragment에서 Loader를 사용하는 경우 onActivityCreated에서 초기화합니다</li>
</ul>
</li>
</ol>
<h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><ul>
<li>ForecastFragment에 CursorLoader를 구현해 봅시다</li>
<li>3가지를 이용해서 구현하면 됩니다</li>
</ul>
<p><a href="https://developer.android.com/guide/components/loaders.html">Loader Document</a><br><a href="https://developer.android.com/reference/android/content/CursorLoader.html">CursorLoader API</a></p>
<h3 id="정답"><a href="#정답" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">implements LoaderManager.LoaderCallbacks&lt;Cursor&gt;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> FORECAST_LOADER = <span class="hljs-number">0</span>;<br><br>mForecastAdapter = <span class="hljs-keyword">new</span> ForecastAdapter(getActivity(), <span class="hljs-keyword">null</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onActivityCreated</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;<br>    getLoaderManager().initLoader(FORECAST_LOADER, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">super</span>.onActivityCreated(savedInstanceState);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Loader&lt;Cursor&gt; <span class="hljs-title">onCreateLoader</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, Bundle args)</span> </span>&#123;<br>    String locationSetting = Utility.getPreferredLocation(getActivity());<br><br>    String sortOrder = WeatherContract.WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot; ASC&quot;</span>;<br>    Uri weatherForLocationUri = WeatherContract.WeatherEntry.buildWeatherLocationWithStartDate(<br>            locationSetting, System.currentTimeMillis());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CursorLoader(getActivity(),<br>            weatherForLocationUri,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span>,<br>            sortOrder);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLoadFinished</span><span class="hljs-params">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;<br>    mForecastAdapter.swapCursor(data);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLoaderReset</span><span class="hljs-params">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;<br>    mForecastAdapter.swapCursor(<span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="Projections"><a href="#Projections" class="headerlink" title="Projections"></a>Projections</h2><p>실행하면 똑같아 보이지만 사실 Loader 이용해서 동작하고 있습니다</p>
<p>데이터 베이스에서 각 열은 인덱스(정수) 값으로 지정이 되어있습니다<br>그렇기 때문에 우리는 getColumnIndex() 메서드를 통해서 열의 인덱스를 알고 값을 가져왔습니다<br>(ForecastAdapter.convertCursorRowToUXFormat() 참고)</p>
<p>이것은 비 효율적입니다<br>인덱스 값은 순서대로 지정이 되어있습니다 우리가 요청한 열 순서대로 되어있습니다</p>
<p>Projections 을 이용해서 데이터를 가져오겠습니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_WEATHER_ID = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_WEATHER_DATE = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_WEATHER_DESC = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_WEATHER_MAX_TEMP = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_WEATHER_MIN_TEMP = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_LOCATION_SETTING = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_WEATHER_CONDITION_ID = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_COORD_LAT = <span class="hljs-number">7</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COL_COORD_LONG = <span class="hljs-number">8</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] FORECAST_COLUMNS = &#123;<br>        WeatherContract.WeatherEntry.TABLE_NAME + <span class="hljs-string">&quot;.&quot;</span> + WeatherContract.WeatherEntry._ID,<br>        WeatherContract.WeatherEntry.COLUMN_DATE,<br>        WeatherContract.WeatherEntry.COLUMN_SHORT_DESC,<br>        WeatherContract.WeatherEntry.COLUMN_MAX_TEMP,<br>        WeatherContract.WeatherEntry.COLUMN_MIN_TEMP,<br>        WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING,<br>        WeatherContract.WeatherEntry.COLUMN_WEATHER_ID,<br>        WeatherContract.LocationEntry.COLUMN_COORD_LAT,<br>        WeatherContract.LocationEntry.COLUMN_COORD_LONG<br>&#125;;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Loader&lt;Cursor&gt; <span class="hljs-title">onCreateLoader</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, Bundle args)</span> </span>&#123;<br>    String locationSetting = Utility.getPreferredLocation(getActivity());<br><br>    String sortOrder = WeatherContract.WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot; ASC&quot;</span>;<br>    Uri weatherForLocationUri = WeatherContract.WeatherEntry.buildWeatherLocationWithStartDate(<br>            locationSetting, System.currentTimeMillis());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CursorLoader(getActivity(),<br>            weatherForLocationUri,<br>            FORECAST_COLUMNS,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span>,<br>            sortOrder);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">convertCursorRowToUXFormat</span><span class="hljs-params">(Cursor cursor)</span> </span>&#123;<br>    String highAndLow = formatHighLows(<br>            cursor.getDouble(ForecastFragment.COL_WEATHER_MAX_TEMP),<br>            cursor.getDouble(ForecastFragment.COL_WEATHER_MIN_TEMP));<br><br>    <span class="hljs-comment">// Date - Weather - High/Low</span><br>    <span class="hljs-keyword">return</span> Utility.formatDate(cursor.getLong(ForecastFragment.COL_WEATHER_DATE)) +<br>            <span class="hljs-string">&quot; - &quot;</span> + cursor.getString(ForecastFragment.COL_WEATHER_DESC) +<br>            <span class="hljs-string">&quot; - &quot;</span> + highAndLow;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>날씨 정보를 정상적으로 가져오는것을 확인 할 수 있습니다<br>다시 DetailActivity 하고 연결을 합시다</p>
<p>일단 <strong>DetailActivity</strong>에서 작업을 시작합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">						 Bundle savedInstanceState)</span> </span>&#123;<br>    View rootView = inflater.inflate(R.layout.fragment_detail, container, <span class="hljs-keyword">false</span>);<br>    Intent intent = getActivity().getIntent();<br><br>    <span class="hljs-keyword">if</span> (intent != <span class="hljs-keyword">null</span>) &#123;<br>        mForecastStr = intent.getDataString();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != mForecastStr) &#123;<br>        ((TextView) rootView.findViewById(R.id.detail_text)).setText(mForecastStr);<br>    &#125;<br>    <span class="hljs-keyword">return</span> rootView;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>ForecastFragment에서 ListView ItemClick액션을 추가해줍니다</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">listView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; adapterView, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> l)</span> </span>&#123;<br>        Cursor cursor = (Cursor) adapterView.getItemAtPosition(position);<br>        <span class="hljs-keyword">if</span> (cursor != <span class="hljs-keyword">null</span>) &#123;<br>            String locationSetting = Utility.getPreferredLocation(getActivity());<br>            Intent intent = <span class="hljs-keyword">new</span> Intent(getActivity(), DetailActivity.class)<br>                    .setData(WeatherContract.WeatherEntry.buildWeatherLocationWithDate(<br>                            locationSetting, cursor.getLong(COL_WEATHER_DATE)<br>                    ));<br>            startActivity(intent);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>실행을 해보면 URI가 잘 나오는것을 확인할 수 있습니다</p>
<h2 id="연습-1"><a href="#연습-1" class="headerlink" title="연습"></a>연습</h2><ul>
<li>DetailActivity에서 받아온 URI를 가지고 날씨 정보를 표시하세요</li>
</ul>
<h3 id="정답-1"><a href="#정답-1" class="headerlink" title="정답"></a>정답</h3><ul>
<li><a href="/downloads/code/6/DetailActivity.java">DetailActivity.java</a></li>
</ul>
<hr>
<p>동작에는 문제가 없습니다 하지만 간단한 문제가 있습니다<br>설정값을 변경하여도 실시간 반영이 안됩니다</p>
<p>간단한 테크닉을 통해서 수정합시다</p>
<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onLocationChanged</span><span class="hljs-params">()</span> </span>&#123;<br>    updateWeather();<br>    getLoaderManager().restartLoader(FORECAST_LOADER, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>추가하고 onStart는 삭제합니다</p>
<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String mLocation; <span class="hljs-comment">//추가</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onResume();<br>    String location = Utility.getPreferredLocation(<span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-keyword">if</span> (location != <span class="hljs-keyword">null</span> &amp;&amp; !location.equals(mLocation)) &#123;<br>        Fragment fragment = getVisibleFragment();<br><br>        <span class="hljs-keyword">if</span>(fragment <span class="hljs-keyword">instanceof</span> ForecastFragment) &#123;<br>            Log.i(LOG_TAG, <span class="hljs-string">&quot;Location Change&quot;</span>);<br>            ((ForecastFragment)fragment).onLocationChanged();<br>        &#125;<br><br>        mLocation = location;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">getVisibleFragment</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (Fragment fragment : getSupportFragmentManager().getFragments()) &#123;<br>        <span class="hljs-keyword">if</span> (fragment.isVisible()) &#123;<br>            <span class="hljs-keyword">return</span> fragment;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 정상적으로 작동 합니다</p>
<hr>
<p>ContentProvider를 다른앱에서 사용 가능하게 하는 것은 간단합니다</p>
<p>AndroidManifests.xml 파일에서 provider 속성 중에 exported 를 true 변경하면 됩니다<br>이것만으로도 Content URI를 안다면 어떤 응용 프로그램에서도 접근할 수 있습니다</p>
<p>데이터의 민감도에 따라서 권한을 설정을 해서 접근하게 만들 수도 있습니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;provider<br>        android:name=&quot;.MyContentProvider&quot;<br>        android:authorities=&quot;com.myapp.myauthorities&quot;<br>        android:enabled=&quot;true&quot;<br>        android:exported=&quot;true&quot;<br>        android:permission=&quot;com.myapp.LICENSE_TO_KILL&quot;/&gt;<br><br>&lt;permission<br>        android:name=&quot;com.myapp.LICENSE_TO_KILL&quot;<br>        android:label=&quot;Licenced to Kill&quot;<br>        android:protectionLevel=&quot;dangerous&quot;/&gt;<br></code></pre></td></tr></table></figure>

<p>해당 permission을 아는 앱에서만 사용 할 수 있습니다<br>해당하는 URI와 열 정보만 제공을 하면 다른 앱에서도 사용할 수가 있습니다<br>Android 내부 기본 앱들은 그렇게 데이터를 제공하고 있습니다</p>
<h2 id="연습-2"><a href="#연습-2" class="headerlink" title="연습"></a>연습</h2><ul>
<li>네이티브 ContentProvider를 알아보세요</li>
<li>오디오 파일에 접근 할 수 있는 URI를 알아보세여</li>
</ul>
<p><a href="https://developer.android.com/reference/android/provider/package-summary.html">android.provider</a><br><a href="https://developer.android.com/guide/topics/providers/calendar-provider.html">Calendar Provider</a><br><a href="https://developer.android.com/guide/topics/providers/contacts-provider.html">Contacts Provider</a></p>
<h3 id="정답-MediaStore-Audio-Media-INTERNAL-CONTENT-URI"><a href="#정답-MediaStore-Audio-Media-INTERNAL-CONTENT-URI" class="headerlink" title="정답 : MediaStore.Audio.Media.INTERNAL_CONTENT_URI"></a>정답 : MediaStore.Audio.Media.INTERNAL_CONTENT_URI</h3><hr>
<h2 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h2><ul>
<li>Loader</li>
<li>CursorAdapter</li>
<li>Projections</li>
<li>ContentProvider Permission</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>7. Rich and Responsive Layouts (1)</title>
    <url>/2017/02/18/adnroid-developing/Developing-Android-Apps-07-01/</url>
    <content><![CDATA[<h2 id="Android-Design-Principles"><a href="#Android-Design-Principles" class="headerlink" title="Android Design Principles"></a>Android Design Principles</h2><ul>
<li>새로운 테마</li>
<li>복잡한 뷰를 위한 새로운 위젯</li>
<li>사용자 지정 그림자 및 애니메이션을 위한 새로운 API</li>
</ul>
<p><strong>보기에도 좋고 그만큼 기능적인 면에서도 우수하며 사용하기 쉬운 앱을 만드는것이다!</strong></p>
<p>사용자는 우리 앱을 30초면 평가를 한다 / 이것은 대부분 시각적인 요소(UI)에 편중되어 있다</p>
<ul>
<li>세련되고 깔끔한가?</li>
<li>전문적으로 보이는가?</li>
<li>사용하기는 얼마나 쉬운가?</li>
</ul>
<p>디자인이라는건 개발자가 설명하기 어려운 사항이기도 합니다<br>하지만 우리는 기본적으로 많이 사용되는 어플리케이션, 내가 자주 사용하는 어플리케이션을 생각해 봅시다</p>
<p>자세한 것은 Google 에서 제시하는 디자인 가이드 라인을 참고해 봅시다</p>
<p><a href="https://design.google.com/">Google Design</a><br><a href="https://material.io/guidelines/material-design/introduction.html?hl=ko">Material design</a><br><a href="https://developer.android.com/training/material/index.html">개발자를 위한 머티리얼 디자인</a></p>
<hr>
<h2 id="View-amp-ViewGroup"><a href="#View-amp-ViewGroup" class="headerlink" title="View &amp; ViewGroup"></a>View &amp; ViewGroup</h2><p>Android UI를 만들기 위해서는 View를 사용합니다<br>View는 단순하게 직사각형 화면입니다</p>
<p>drawing과 event handling을 처리합니다<br><a href="https://material.io/guidelines/components/buttons.html">Material Design - Components - Buttons</a></p>
<p><img src="/img/adnroid-developing/7/1.png"></p>
<p>다음 같은 Layouts(ViewGroup) 또한 View 입니다<br>또한 ViewGroup안에는 View와 ViewGroup 다 포함하는 구조가 가능합니다</p>
<p><img src="/img/adnroid-developing/7/2.png"></p>
<p><strong>View의 width와 height에 따라서 뷰의 크기가 어떻게 변하는지 알수있습니다</strong></p>
<p><img src="/img/adnroid-developing/7/3.png"></p>
<p><strong>gravity = center</strong> 로 설정하면 글자가 가운대 정렬 하는 모습을 볼 수 있습니다<br><strong>layout_gravity = center</strong> 로 설정을 하면 뷰가 부모의 정 가운데에 위치하게 됩니다</p>
<p><img src="/img/adnroid-developing/7/4.png"></p>
<p><strong>padding과 layout_margin</strong>을 이용해서 뷰를 원하는 곳으로 이동 할 수 있습니다</p>
<p><img src="/img/adnroid-developing/7/5.png"></p>
<p><strong>android:visibility=</strong></p>
<ul>
<li>visible : 보여준다</li>
<li>invisible : 안보여준다(공간 차지 O)</li>
<li>gone : 안보여준다(공간 차지 x)</li>
</ul>
<p>앱이 실행되는 동안에 visibility 를 변경할 수 있습니다</p>
<p><a href="https://developer.android.com/reference/android/view/View.html#attr_android:visibility">View - visibility</a></p>
<hr>
<p><img src="/img/adnroid-developing/7/6.png"></p>
<p>우리는 앱을 만들기 위해서 다양한 화면 세팅을 생각하고 Wire Frame부터 생성합니다</p>
<p><img src="/img/adnroid-developing/7/7.png"></p>
<p>최종적으로 컬러, 아이콘, 폰트, 크기와 같은 완벽한 레이아웃에 도달하도록 하는것입니다</p>
<hr>
<h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><p><img src="/img/adnroid-developing/7/8.png"></p>
<p>다음과 같이 화면의 와이어 프레임을 정하고 항목의 아이템을 설정합니다</p>
<h3 id="정답"><a href="#정답" class="headerlink" title="정답"></a>정답</h3><p><strong>list_item_forecast.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:minHeight</span>=<span class="hljs-string">&quot;?android:attr/listPreferredItemHeight&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;16dp&quot;</span>&gt;</span><br><br>    &lt;ImageView<br>        android:id=&quot;@+id/list_item_icon&quot;<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:src=&quot;@mipmap/ic_launcher&quot;/&gt;<br><br>    &lt;LinearLayout<br>        android:layout_width=&quot;0dp&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:layout_weight=&quot;1&quot;<br>        android:orientation=&quot;vertical&quot;<br>        android:paddingLeft=&quot;16dp&quot;&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_date_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;<br>            android:text=&quot;Tomorrow&quot;/&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_forecast_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;<br>            android:text=&quot;Clear&quot;/&gt;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    &lt;LinearLayout<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:orientation=&quot;vertical&quot;&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_high_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;<br>            android:text=&quot;81&quot;/&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_low_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;<br>            android:text=&quot;68&quot;/&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<h2 id="연습-1"><a href="#연습-1" class="headerlink" title="연습"></a>연습</h2><p><img src="/img/adnroid-developing/7/9.png"></p>
<ul>
<li>새로운 list_item_forecast_today.xml 파일을 만들고 다음과 같은 디자인을 완성해 봅시다</li>
</ul>
<h3 id="정답-1"><a href="#정답-1" class="headerlink" title="정답"></a>정답</h3><p><strong>list_item_forecast_today.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:minHeight</span>=<span class="hljs-string">&quot;?android:attr/listPreferredItemHeight&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;16dp&quot;</span>&gt;</span><br><br>    &lt;LinearLayout<br>        android:layout_width=&quot;0dp&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:layout_weight=&quot;1&quot;<br>        android:gravity=&quot;center_horizontal&quot;<br>        android:orientation=&quot;vertical&quot;&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_date_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;/&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_high_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;/&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_low_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;/&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    &lt;LinearLayout<br>        android:layout_width=&quot;0dp&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:layout_weight=&quot;1&quot;<br>        android:gravity=&quot;center_horizontal&quot;<br>        android:orientation=&quot;vertical&quot;&gt;<br><br>        &lt;ImageView<br>            android:id=&quot;@+id/list_item_icon&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;/&gt;<br><br>        &lt;TextView<br>            android:id=&quot;@+id/list_item_forecast_textview&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;/&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>ForecastAdapter.bindView() 메서드 안에 내용은 주석합니다<br>실행을 하면 단순한 화면만 반복되어서 나옵니다<br>아직 Today 에 대한 표시는 안했습니다</p>
<p><img src="/img/adnroid-developing/7/10.png"></p>
<p>다음과 같이 Cursor의 데이터를 View에 Binding 합시다</p>
<p>ForecastAdapter는 CursorAdapter를 상속해서 구현했습니다<br>CursorAdapter는 abstract class 입니다. 구현해야 할 메서드가 2개면 충분합니다<br>newView(), bindView()</p>
<p>newView()는 데이터가 들어 있지 않은 새 항목의 레이아웃을 만듭니다<br>bindView()는 기존의 만들어져있는 레이아웃을 이용하여서 Cursor 데이터를 사용하여 업데이트합니다</p>
<hr>
<h2 id="연습-2"><a href="#연습-2" class="headerlink" title="연습"></a>연습</h2><ul>
<li>ForecastAdapter.bindView() 메서드를 완성해 봅시다</li>
<li>list_item_forecast.xml 하드 코딩으로 되어있는 내용들 정리 합시다</li>
<li>밑에 2개의 파일 내용을 추가한 뒤에 해보세요</li>
</ul>
<p><strong>strings.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span> <span class="hljs-attr">xmlns:xliff</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 생략 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;today&quot;</span>&gt;</span>오늘<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tomorrow&quot;</span>&gt;</span>내일<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_full_friendly_date&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;day&quot;</span>&gt;</span>%1$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span>%2$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>Utility.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DATE_FORMAT = <span class="hljs-string">&quot;yyyyMMdd&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Helper method to convert the database representation of the date into something to display</span><br><span class="hljs-comment"> * to users.  As classy and polished a user experience as &quot;20140102&quot; is, we can do better.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context Context to use for resource localization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dateInMillis The date in milliseconds</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a user-friendly representation of the date.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getFriendlyDayString</span><span class="hljs-params">(Context context, <span class="hljs-keyword">long</span> dateInMillis)</span> </span>&#123;<br>    Time time = <span class="hljs-keyword">new</span> Time();<br>    time.setToNow();<br>    <span class="hljs-keyword">long</span> currentTime = System.currentTimeMillis();<br>    <span class="hljs-keyword">int</span> julianDay = Time.getJulianDay(dateInMillis, time.gmtoff);<br>    <span class="hljs-keyword">int</span> currentJulianDay = Time.getJulianDay(currentTime, time.gmtoff);<br><br>    <span class="hljs-keyword">if</span> (julianDay == currentJulianDay) &#123;<br>        String today = context.getString(R.string.today);<br>        <span class="hljs-keyword">int</span> formatId = R.string.format_full_friendly_date;<br>        <span class="hljs-keyword">return</span> String.format(<br>                context.getString(formatId,<br>                today,<br>                getFormattedMonthDay(context, dateInMillis)));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( julianDay &lt; currentJulianDay + <span class="hljs-number">7</span> ) &#123;<br>        <span class="hljs-keyword">return</span> getDayName(context, dateInMillis);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        SimpleDateFormat shortenedDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;MMM dd EEE&quot;</span>);<br>        <span class="hljs-keyword">return</span> shortenedDateFormat.format(dateInMillis);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Given a day, returns just the name to use for that day.</span><br><span class="hljs-comment"> * E.g &quot;today&quot;, &quot;tomorrow&quot;, &quot;wednesday&quot;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context Context to use for resource localization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dateInMillis The date in milliseconds</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getDayName</span><span class="hljs-params">(Context context, <span class="hljs-keyword">long</span> dateInMillis)</span> </span>&#123;<br>    Time t = <span class="hljs-keyword">new</span> Time();<br>    t.setToNow();<br>    <span class="hljs-keyword">int</span> julianDay = Time.getJulianDay(dateInMillis, t.gmtoff);<br>    <span class="hljs-keyword">int</span> currentJulianDay = Time.getJulianDay(System.currentTimeMillis(), t.gmtoff);<br>    <span class="hljs-keyword">if</span> (julianDay == currentJulianDay) &#123;<br>        <span class="hljs-keyword">return</span> context.getString(R.string.today);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( julianDay == currentJulianDay +<span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-keyword">return</span> context.getString(R.string.tomorrow);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Time time = <span class="hljs-keyword">new</span> Time();<br>        time.setToNow();<br>        SimpleDateFormat dayFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;EEEE&quot;</span>);<br>        <span class="hljs-keyword">return</span> dayFormat.format(dateInMillis);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Converts db date format to the format &quot;Month day&quot;, e.g &quot;June 24&quot;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context Context to use for resource localization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dateInMillis The db formatted date string, expected to be of the form specified</span><br><span class="hljs-comment"> *                in Utility.DATE_FORMAT</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The day in the form of a string formatted &quot;December 6&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getFormattedMonthDay</span><span class="hljs-params">(Context context, <span class="hljs-keyword">long</span> dateInMillis )</span> </span>&#123;<br>    Time time = <span class="hljs-keyword">new</span> Time();<br>    time.setToNow();<br>    SimpleDateFormat dbDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(Utility.DATE_FORMAT);<br>    SimpleDateFormat monthDayFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;MMMM dd&quot;</span>);<br>    String monthDayString = monthDayFormat.format(dateInMillis);<br>    <span class="hljs-keyword">return</span> monthDayString;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="정답-2"><a href="#정답-2" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bindView</span><span class="hljs-params">(View view, Context context, Cursor cursor)</span> </span>&#123;<br>    <span class="hljs-comment">// Read weather icon ID from cursor</span><br>    <span class="hljs-keyword">int</span> weatherId = cursor.getInt(ForecastFragment.COL_WEATHER_ID);<br>    <span class="hljs-comment">// Use placeholder image for now</span><br>    ImageView iconView = (ImageView) view.findViewById(R.id.list_item_icon);<br>    iconView.setImageResource(R.mipmap.ic_launcher);<br><br>    <span class="hljs-comment">// Read date from cursor</span><br>    <span class="hljs-keyword">long</span> dateInMillis = cursor.getLong(ForecastFragment.COL_WEATHER_DATE);<br>    <span class="hljs-comment">// Find TextView and set formatted date on it</span><br>    TextView dateView = (TextView) view.findViewById(R.id.list_item_date_textview);<br>    dateView.setText(Utility.getFriendlyDayString(context, dateInMillis));<br><br>    <span class="hljs-comment">// Read weather forecast from cursor</span><br>    String description = cursor.getString(ForecastFragment.COL_WEATHER_DESC);<br>    <span class="hljs-comment">// Find TextView and set weather forecast on it</span><br>    TextView descriptionView = (TextView) view.findViewById(R.id.list_item_forecast_textview);<br>    descriptionView.setText(description);<br><br>    <span class="hljs-comment">// Read user preference for metric or imperial temperature units</span><br>    <span class="hljs-keyword">boolean</span> isMetric = Utility.isMetric(context);<br><br>    <span class="hljs-comment">// Read high temperature from cursor</span><br>    <span class="hljs-keyword">double</span> high = cursor.getDouble(ForecastFragment.COL_WEATHER_MAX_TEMP);<br>    TextView highView = (TextView) view.findViewById(R.id.list_item_high_textview);<br>    highView.setText(Utility.formatTemperature(high, isMetric));<br><br>    <span class="hljs-comment">// Read low temperature from cursor</span><br>    <span class="hljs-keyword">double</span> low = cursor.getDouble(ForecastFragment.COL_WEATHER_MIN_TEMP);<br>    TextView lowView = (TextView) view.findViewById(R.id.list_item_low_textview);<br>    lowView.setText(Utility.formatTemperature(low, isMetric));<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>지금은 모든 항목들이 동일한 레이아웃입니다<br>Today(오늘) 날씨는 레이아웃이 다르게 표시 되어야 합니다</p>
<p><img src="/img/adnroid-developing/7/11.png"></p>
<p>getItemViewType() 이것을 이용해서 다르게 표시 할 수있습니다<br>getViewTypeCount() 은 총 몇가지 뷰 형태의 레이아웃이 있는지 표시합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> VIEW_TYPE_TODAY = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> VIEW_TYPE_FUTURE_DAY = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> VIEW_TYPE_COUNT = <span class="hljs-number">2</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getItemViewType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> position == <span class="hljs-number">0</span> ? VIEW_TYPE_TODAY : VIEW_TYPE_FUTURE_DAY;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getViewTypeCount</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> VIEW_TYPE_COUNT;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">newView</span><span class="hljs-params">(Context context, Cursor cursor, ViewGroup parent)</span> </span>&#123;<br>    <span class="hljs-comment">// Choose the layout type</span><br>    <span class="hljs-keyword">int</span> viewType = getItemViewType(cursor.getPosition());<br>    <span class="hljs-keyword">int</span> layoutId = -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Determine layoutId from viewType</span><br>    <span class="hljs-keyword">return</span> LayoutInflater.from(context).inflate(layoutId, parent, <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="연습-3"><a href="#연습-3" class="headerlink" title="연습"></a>연습</h2><ul>
<li>newView() 메서드를 완성해 보세요</li>
</ul>
<h3 id="정답-3"><a href="#정답-3" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">newView</span><span class="hljs-params">(Context context, Cursor cursor, ViewGroup parent)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> viewType = getItemViewType(cursor.getPosition());<br>    <span class="hljs-keyword">int</span> layoutId = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">switch</span> (viewType) &#123;<br>        <span class="hljs-keyword">case</span> VIEW_TYPE_TODAY:<br>            layoutId = R.layout.list_item_forecast_today;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> VIEW_TYPE_FUTURE_DAY:<br>            layoutId = R.layout.list_item_forecast;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> LayoutInflater.from(context).inflate(layoutId, parent, <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>bindView() 메서드는 모든 다른 View에 데이터를 설정합니다(Data Binding)<br>이미 사용 된 적이 있는 View이었다고해도 전체 View에서 다시 한번 찾아서 사용하게 됩니다</p>
<p>매번 findViewById 호출을 제거하기 위해서 ViewHolder를 이용합니다</p>
<p>하나의 레이아웃안에 여러개의 View를 사용하는 경우 레이아웃에서 각 View를 참조하는 멤버 변수를 포함한 ViewHolder를 이용합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewHolder</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ImageView iconView;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> TextView dateView;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> TextView descriptionView;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> TextView highTempView;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> TextView lowTempView;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ViewHolder</span><span class="hljs-params">(View view)</span> </span>&#123;<br>        iconView = (ImageView) view.findViewById(R.id.list_item_icon);<br>        dateView = (TextView) view.findViewById(R.id.list_item_date_textview);<br>        descriptionView = (TextView) view.findViewById(R.id.list_item_forecast_textview);<br>        highTempView = (TextView) view.findViewById(R.id.list_item_high_textview);<br>        lowTempView = (TextView) view.findViewById(R.id.list_item_low_textview);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">newView</span><span class="hljs-params">(Context context, Cursor cursor, ViewGroup parent)</span> </span>&#123;<br><span class="hljs-comment">// 생략</span><br>    View view = LayoutInflater.from(context).inflate(layoutId, parent, <span class="hljs-keyword">false</span>);<br>    ViewHolder viewHolder = <span class="hljs-keyword">new</span> ViewHolder(view);<br>    view.setTag(viewHolder);<br>    <span class="hljs-keyword">return</span> view;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bindView</span><span class="hljs-params">(View view, Context context, Cursor cursor)</span> </span>&#123;<br>    ViewHolder viewHolder = (ViewHolder) view.getTag();<br><br>    viewHolder.iconView.setImageResource(R.mipmap.ic_launcher);<br><br>    <span class="hljs-keyword">long</span> dateInMillis = cursor.getLong(ForecastFragment.COL_WEATHER_DATE);<br>    viewHolder.dateView.setText(Utility.getFriendlyDayString(context, dateInMillis));<br><br>    String description = cursor.getString(ForecastFragment.COL_WEATHER_DESC);<br>    viewHolder.descriptionView.setText(description);<br><br>    <span class="hljs-keyword">boolean</span> isMetric = Utility.isMetric(context);<br><br>    <span class="hljs-keyword">double</span> high = cursor.getDouble(ForecastFragment.COL_WEATHER_MAX_TEMP);<br>    viewHolder.highTempView.setText(Utility.formatTemperature(high, isMetric));<br><br>    <span class="hljs-keyword">double</span> low = cursor.getDouble(ForecastFragment.COL_WEATHER_MIN_TEMP);<br>    viewHolder.lowTempView.setText(Utility.formatTemperature(low, isMetric));<br>&#125;<br></code></pre></td></tr></table></figure>

<p>실행하면 잘 나오지만 먼가 허전합니다<br>날씨를 표현할때 표기법에 맞게 표현해주면 더 완벽할꺼같습니다</p>
<p>가장 무난하게 하는 방법은 번역자가 각 언어에 맞게 텍스트 및 매개변수를 재배치할 수 있도록 하는 것입니다<br>참고 : <a href="https://developer.android.com/distribute/tools/localization-checklist.html">xliff tag</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_temperature&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;temp&quot;</span>&gt;</span>%1.0f<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span>\u00B0<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> context.getString(R.string.format_temperature, temp);<br></code></pre></td></tr></table></figure>

<p>-7° 같은 표기가 완성 됩니다</p>
<p>MainActivity는 어느정도 했으니 DetailActivity를 해봅시다</p>
<p>날짜, 최고/최저기온, 추가적인 기상정보, 날씨 아이콘, 날씨 예보 등이 되어있습니다</p>
<p><img src="/img/adnroid-developing/7/12.png"></p>
<hr>
<h2 id="연습-4"><a href="#연습-4" class="headerlink" title="연습"></a>연습</h2><p><strong>DetailActivity</strong>를 구성해봅시다</p>
<ul>
<li>fragment_detail.xml 수정 (스크롤 추가)</li>
<li>DetailActivity와 DetailFragment의 분리</li>
<li>DetailFragment View 수정</li>
</ul>
<p><strong>strings.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Windspeed formats --&gt;</span><br><span class="hljs-comment">&lt;!-- Wind in mph [CHAR LIMIT=25] --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_wind_mph&quot;</span>&gt;</span><br>    Wind: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;speed&quot;</span>&gt;</span>%1$1.0f<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span> mph <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;direction&quot;</span>&gt;</span>%2$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Wind in kph [CHAR LIMIT=25] --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_wind_kmh&quot;</span>&gt;</span><br>    Wind: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;speed&quot;</span>&gt;</span>%1$1.0f<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span> km/h <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;direction&quot;</span>&gt;</span>%2$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Pressure format CHAR LIMIT=25] --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_pressure&quot;</span>&gt;</span>Pressure: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pressure&quot;</span>&gt;</span>%1.0f<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span> hPa<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Humidity format CHAR LIMIT=25]--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_humidity&quot;</span>&gt;</span>Humidity: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;humidity&quot;</span>&gt;</span>%1.0f<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span> %%<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>Utility.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getFormattedWind</span><span class="hljs-params">(Context context, <span class="hljs-keyword">float</span> windSpeed, <span class="hljs-keyword">float</span> degrees)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> windFormat;<br>    <span class="hljs-keyword">if</span> (Utility.isMetric(context)) &#123;<br>        windFormat = R.string.format_wind_kmh;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        windFormat = R.string.format_wind_mph;<br>        windSpeed = <span class="hljs-number">0.621371192237334f</span> * windSpeed;<br>    &#125;<br><br>    String direction = <span class="hljs-string">&quot;Unknown&quot;</span>;<br>    <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">337.5</span> || degrees &lt; <span class="hljs-number">22.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;N&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">22.5</span> &amp;&amp; degrees &lt; <span class="hljs-number">67.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;NE&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">67.5</span> &amp;&amp; degrees &lt; <span class="hljs-number">112.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;E&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">112.5</span> &amp;&amp; degrees &lt; <span class="hljs-number">157.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;SE&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">157.5</span> &amp;&amp; degrees &lt; <span class="hljs-number">202.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;S&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">202.5</span> &amp;&amp; degrees &lt; <span class="hljs-number">247.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;SW&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">247.5</span> &amp;&amp; degrees &lt; <span class="hljs-number">292.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;W&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (degrees &gt;= <span class="hljs-number">292.5</span> || degrees &lt; <span class="hljs-number">22.5</span>) &#123;<br>        direction = <span class="hljs-string">&quot;NW&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> String.format(context.getString(windFormat), windSpeed, direction);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h3 id="정답-4"><a href="#정답-4" class="headerlink" title="정답"></a>정답</h3><ul>
<li><a href="/downloads/code/7/fragment_detail.xml">fragment_detail.xml</a></li>
<li><a href="/downloads/code/7/DetailActivity.java">DetailActivity.java</a></li>
<li><a href="/downloads/code/7/DetailFragment.java">DetailFragment.java</a></li>
</ul>
<p>onLoadFinished()에서 매번 findViewById를 호출하기 때문에 불필요한 행동을 최소화 하기 위해서 변수로 설정합니다</p>
<hr>
<h2 id="Optimizing-Layouts"><a href="#Optimizing-Layouts" class="headerlink" title="Optimizing Layouts"></a>Optimizing Layouts</h2><p>Nested Layouts을 구성하는 법도 배웠습니다<br>하지만 복잡한 Layouts을 inflate하면 리소스도 많이 잡아먹고 앱의 성능과 반응성에도 문제가 생길 수 있습니다</p>
<p>다음과 같은 규칙을 염두해 둡시다</p>
<ul>
<li>좁고 깊은 레이아웃 구조보다는 넓고 얕은 레이아웃 구조가 좋습니다</li>
<li>같은 레벨의 항목을 여러 개 두고 하위 레벨의 항목을 적게 유지하는 것입니다</li>
<li>액티비티 전체 구조에서 Nested View를 10개 이하로 유지합니다</li>
<li>총 80개 이하의 뷰를 사용합니다</li>
</ul>
<p><a href="https://developer.android.com/studio/profile/hierarchy-viewer.html">Hierarchy Viewer</a><br><a href="https://developer.android.com/studio/profile/optimize-ui.html#HierarchyViewer">Optimizing Your UI</a><br><a href="https://developer.android.com/studio/write/lint.html">Improve Your Code with Lint</a></p>
<p><img src="/img/adnroid-developing/7/13.png"></p>
<p>HierarchyViewer 를 총해서 Activity와 Application을 볼 수가 있습니다</p>
<p>또한 Android Studio 에는 Lint 라는 도구가 있습니다</p>
<p><img src="/img/adnroid-developing/7/15.png"></p>
<p>Lint는 정적 분석 도구 입니다<br>레이아웃 접근성 문제, 번역 누락, 하드코딩된 문자열등등에 대해서 표시해줍니다</p>
<hr>
<h2 id="Responsive-Design"><a href="#Responsive-Design" class="headerlink" title="Responsive Design"></a>Responsive Design</h2><p>이제 와이어 프레임 단계의 레이아웃을 두 화면(MainActivity, DetailActivity)에 적용을 하였습니다</p>
<p>미리 보기 화면에서 테블릿으로 변경해서 보면 너비만 넓어지고 별 차이가 없습니다<br>상세보기 화면을 같이 보여주거나 리스트를 보여주는 형식을 변경하는게 더 좋을꺼 같습니다</p>
<p>이렇게 하는게 반응형 디자인의 일부입니다</p>
<p>반응형 디자인이란 앱을 디자인할 때 다양한 화면 크기에서 사용될 것을 고려하는 것을 말합니다<br>이런 디자인은 어떻게 하며 태블릿처럼 큰 화면의 기기를 고려해 만든다는 것은 어떤 의미일까요?</p>
<p>단순하게 늘어진 UI로만 구성하는것이 아니라 크기에 맞게 보여줄 정보의 제공을 변경하는것을 의미합니다</p>
<p><a href="https://developer.android.com/distribute/essentials/quality/tablets.html">태블릿 앱 품질</a><br><a href="https://developer.android.com/training/design-navigation/multiple-sizes.html">Planning for Multiple Touchscreen Sizes</a></p>
<p>실제로 Application을 개발하다보면 tablets을 지원 안하는 경우가 더 많습니다<br>하지만 앞으로 우리는 설계를 할 때 반응형 디자인으로 설계하기를 바랍니다</p>
<p>Application을 만들어야 하는데 기기의 종류는 너무나도 많습니다</p>
<p>휴대폰, 7인치 테블릿, 10인치 테블릿 등등 너무 많습니다<br>우리는 DP, DPI로 분류를 하는것이 더 좋습니다</p>
<table>
<thead>
<tr>
<th align="center">ldpi</th>
<th align="center">mdpi</th>
<th align="center">hdpi</th>
<th align="center">xhdpi</th>
<th align="center">xxhdpi</th>
<th align="center">xxxhdpi</th>
</tr>
</thead>
<tbody><tr>
<td align="center">~120</td>
<td align="center">~160</td>
<td align="center">~240</td>
<td align="center">~320</td>
<td align="center">~480</td>
<td align="center">~640</td>
</tr>
</tbody></table>
<p>px로 하는 것이 아니라 dp를 이용해서 어떤 화면의 크기이던 같은 크기의 이미지로 보여 줄 수 있다</p>
<p><a href="https://developer.android.com/guide/practices/screens_support.html#dips-pels">dp 단위를 픽셀 단위로 변환</a><br><a href="https://developer.android.com/guide/practices/screens_support.html#ConfigurationExamples">다중 화면 지원 - 구성 예시</a></p>
<p>Android의 리소스들은 모두 res 폴더 안에 있습니다</p>
<p><img src="/img/adnroid-developing/7/16.png"></p>
<p>런타임시 Android가 적절하게 리소스를 선택하게 됩니다</p>
<p><a href="https://developer.android.com/guide/practices/screens_support.html">다중화면지원</a><br><a href="https://developer.android.com/design/style/devices-displays.html">Devices and Displays</a></p>
<p>이미지를 다운받고 우리 프로젝트에 추가하면 됩니다</p>
<p><a href="https://github.com/udacity/Sunshine-Version-2/archive/assets.zip">Assert</a></p>
<p>다운 받은 폴더를 확인하면 drawable-hdpi와 같은 형태로 되어있습니다<br>하지만 우리가 사용할때는 R.drawable.{파일이름} 같은 형태로 사용하면 화면 크기에 맞게 Android 에서 찾아줍니다</p>
<hr>
<h2 id="연습-5"><a href="#연습-5" class="headerlink" title="연습"></a>연습</h2><ul>
<li>DetailFragment를 수정해서 날씨 아이콘을 표현하세요</li>
</ul>
<p><strong>Utility.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Helper method to provide the icon resource id according to the weather condition id returned</span><br><span class="hljs-comment"> * by the OpenWeatherMap call.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> weatherId from OpenWeatherMap API response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> resource id for the corresponding icon. -1 if no relation is found.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIconResourceForWeatherCondition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weatherId)</span> </span>&#123;<br>    <span class="hljs-comment">// Based on weather code data found at:</span><br>    <span class="hljs-comment">// http://openweathermap.org/weather-conditions</span><br>    <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">200</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">232</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_storm;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">300</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">321</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_light_rain;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">500</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">504</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_rain;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId == <span class="hljs-number">511</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_snow;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">520</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">531</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_rain;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">600</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">622</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_snow;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">701</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">781</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_fog;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId == <span class="hljs-number">800</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_clear;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId == <span class="hljs-number">801</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_light_clouds;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">802</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">804</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.ic_cloudy;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Helper method to provide the art resource id according to the weather condition id returned</span><br><span class="hljs-comment"> * by the OpenWeatherMap call.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> weatherId from OpenWeatherMap API response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> resource id for the corresponding image. -1 if no relation is found.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getArtResourceForWeatherCondition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weatherId)</span> </span>&#123;<br>    <span class="hljs-comment">// Based on weather code data found at:</span><br>    <span class="hljs-comment">// http://openweathermap.org/weather-conditions</span><br>    <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">200</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">232</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_storm;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">300</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">321</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_light_rain;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">500</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">504</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_rain;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId == <span class="hljs-number">511</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_snow;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">520</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">531</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_rain;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">600</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">622</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_snow;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">701</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">781</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_fog;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId == <span class="hljs-number">800</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_clear;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId == <span class="hljs-number">801</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_light_clouds;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weatherId &gt;= <span class="hljs-number">802</span> &amp;&amp; weatherId &lt;= <span class="hljs-number">804</span>) &#123;<br>        <span class="hljs-keyword">return</span> R.drawable.art_clouds;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="정답-5"><a href="#정답-5" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mIconView.setImageResource(Utility.getArtResourceForWeatherCondition(weatherId));<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bindView</span><span class="hljs-params">(View view, Context context, Cursor cursor)</span> </span>&#123;<br>    ViewHolder viewHolder = (ViewHolder) view.getTag();<br><br>    <span class="hljs-keyword">int</span> viewType = getItemViewType(cursor.getPosition());<br>    <span class="hljs-keyword">switch</span> (viewType) &#123;<br>        <span class="hljs-keyword">case</span> VIEW_TYPE_TODAY: &#123;<br>            viewHolder.iconView.setImageResource(Utility.getArtResourceForWeatherCondition(<br>                    cursor.getInt(ForecastFragment.COL_WEATHER_CONDITION_ID)));<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> VIEW_TYPE_FUTURE_DAY: &#123;<br>            viewHolder.iconView.setImageResource(Utility.getIconResourceForWeatherCondition(<br>                    cursor.getInt(ForecastFragment.COL_WEATHER_CONDITION_ID)));<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p><img src="/img/adnroid-developing/7/17.png"></p>
<p>Tablets 은 다음과 같이 화면을 설계하게 됩니다</p>
<p>한 화면에 2개의 fragment를 포함합니다<br>폰에서는 각 각 하나의 화면으로 존재했던 사항들 입니다</p>
<p><a href="https://developer.android.com/training/basics/fragments/fragment-ui.html">Building a Dynamic UI with Fragments</a></p>
<p>한 화면에서 각각의 Fragment가 통신을 하는 방법을 알아야 합니다<br>오늘 날씨를 보여주는 부분은 다른 날씨 보여주는 부분과 같은 모양으로 나오게 해야합니다<br>현재 활성화 되어있는 항목을 표시하는 방법도 필요하게 됩니다</p>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>7. Rich and Responsive Layouts (2)</title>
    <url>/2017/02/18/adnroid-developing/Developing-Android-Apps-07-02/</url>
    <content><![CDATA[<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p><strong>왜?</strong> Fragment를 사용하는지 자체에 대한 의문이 생길것입니다</p>
<p>단지 UI 구성 요소를 묶으려면 그냥 ViewGroup이나 재사용 가능한 XML Layout정의를 만들면 되지않을까요?<br>물론 이것도 가능합니다</p>
<p>하지만 Fragment는 단순히 UI구성요소를 묶는 정도에 그치지 않습니다<br>Fragment는 유지 중인 앱 상태에서 수신하는 Lifecycle Event를 포함한 Activity을 완전히 모듈화 하도록 해 줍니다</p>
<p>Fragments는 허니콤(Android 3.0)에서 특정 문제를 해결하기 위해서 처음 도입되었습니다<br>최초로 Tablets을 지원했기때문에 좋은 UI를 만들기 위해서는 2개 이상의 Activity를 나란히 보여주는 것 입니다</p>
<p>Fragments를 사용하면 FragmentManager를 통해서 편하게 처리 할 수있습니다<br>Activity Lifecycle Event 처리, UI 개별 요소의 상태 관리, 앱 상태를 유지하기 위해서 언제 어느 스크린 요소가 출력되어있는지에 대한 정보 등등을 처리해 줍니다</p>
<p>단일 Activity에서 Fragment를 바꿔줌으로써 여러 화면을 표시하는것과 같은 효과를 줄 수도 있습니다</p>
<p>하지만 이런 구조는 비추천합니다</p>
<ul>
<li>단일 Activity로 구성할 경우 코드가 복잡합니다</li>
<li>Intent Filter 생성 및 관리가 훨씬 어렵습니다</li>
<li>Activity 코드를 읽고 테스트하고 관리하는데도 어렵습니다</li>
<li>독립적인 구성요소들 함께 묶게 되는 문제가 있습니다 (coupling)</li>
<li>단일 Activity에 민감한 정보와 공유 가능한 일반 정보가 같이 있는 경우 보안의 위험성도 커집니다</li>
</ul>
<p>Context가 변경될 때 마다 Activity를 만드는 방법을 추천합니다<br>View에서 Input으로 전환하는등 출력 데이터의 종류가 바뀔 때 하는 것이 좋습니다</p>
<p>Fragment가 UI에서 각각의 독립된 생명 주기를 가진 Mini Activity로 취급한다면 실제 Activity의 Lifecycle와 비교했을 때 어떨까요?</p>
<p>기본적인 Lifecycle은 부모 액티비티와 유사하고 시작, 재개, 일시정지, 정지의 주기를 순환하며 그와 같은 Lifecycle은 프래그먼트 자체 내에서 일어납니다</p>
<p>대부분의 경우 액티비티 생명주기 핸들에 넣을 수 잇는 것은 어떤것이라도 그에 해당하는 프래그먼트 핸들에 넣을 수 있습니다<br>물론 예외가 몇가지 있긴 합니다</p>
<p>UI를 *<em>onCreate()**</em>에 만드는 대신에 **onCreateView()**를 이용합니다<br>**onCreateView()**에서는 UI를 생성하거나 inflate해서 데이터 소스와 연결해서 부모 Activity한테 돌려주고 뷰 구조로 통합 될 수 있습니다</p>
<p><strong>onDestoryView()</strong> 는 Fragment가 backstack에 추가되기 직전에 호출되는데 부모 Activity와는 독립적입니다</p>
<p>FragmentManager는 FragmentTransaction 이용하여 fragment를 backstack으로 추가, 제거, 대체 할 수 있습니다<br>하나의 부모 Activity 활성화로 말입니다 그래서 Fragment는 host Activity에 상관없이 Lifecycle을 자유롭게 이동할 수 있습니다</p>
<p>**onDestoryView()**에서 UI와 특별하게 관련된 리소스, Data Cursors, 메모리에 있는 비트맵 같은 것들을 지울 수 있습니다<br>Fragment가 보이지 않을 때 필요없는 데이터로 앱의 메모리를 사용하지 않도록 합니다</p>
<p>Fragment가 backstack에서 돌아오자마자 **onCreateView()**가 호출이 되고 UI를 다시 만들어서 FragmentTransaction이 나머지 Lifecycle을 통하여 다시 활성화되기 전에 데이터 소스와 다시 연결할 수 있습니다</p>
<p>Fragment는 Activity안에서만 존재할 수 있기 때문에 부모 Activity와 붙여있는지 떨어졌는지 알려주는 <strong>onAttach()</strong>, <strong>onDetach()</strong> 호출이 필요합니다<br>**onAttach()**는 부모 Activity에 대한 참조를 얻을 수 있습니다<br>**onDetach()**는 Fragment가 소멸 된 뒤에 가장 나중에 일어납니다</p>
<p><strong>onActivityCreated()</strong> 부모 Activity가 create가 완료한것을 Fragment에 통지하고 UI와 안전하게 통신 할 수 있는지 나타냅니다</p>
<p><img src="http://3.bp.blogspot.com/-YJSE-iQngrw/U3bLHPnB1YI/AAAAAAAABWs/CD03Kp6O-zM/s1600/fragmentlifecycle.png"></p>
<p><img src="http://cfile29.uf.tistory.com/image/15665C4B4E9BD0800B86F3"><br><img src="http://cfile10.uf.tistory.com/image/17665C4B4E9BD0810CAC54"></p>
<hr>
<p>Fragment를 이용하는 마지막 이점은 UI와 관계가 없습니다<br>알다시피 시각적인 구성요소로서 기기의 설정이 변하면 액티비티는 파괴되고 다시 생성됩니다<br>하지만 우리가 Fragment를 사용해서 Visual Activity module을 분할하고 로직을 찾는다면 정확하게 그 일을 할 수 있습니다<br>왜냐하면 이 Fragment은 시각적이지 않기 때문에 UI가 업데이트 될 때마다 새로 만들 필요가 없습니다<br>onCreate()에서 setRetainInstance(true)를 호출해서 onCreateView()에서 null 을 반환합시다</p>
<p>이렇게 하면 부모 Activity와 독립적으로 작업을 할 수 있습니다<br>Connections, Thread, Task등의 작업을 중단없이 할 수 있습니다</p>
<hr>
<h2 id="Tablets"><a href="#Tablets" class="headerlink" title="Tablets"></a>Tablets</h2><p><a href="https://developer.android.com/guide/practices/screens_support.html#ConfigurationExamples">다중 화면 지원 - 구성</a></p>
<p><img src="/img/adnroid-developing/7/23.png"></p>
<p>Tablets 전용 UI 를 구현해 봅시다</p>
<ul>
<li>values-w820dp 폴더를 삭제합시다 사용할 이유가 없습니다</li>
<li>layout-sw600dp 폴더를 만듭니다 / 각 파일들을 추가합니다<ul>
<li><a href="/downloads/code/7/activity_main.xml">activity_main.xml</a></li>
<li><a href="/downloads/code/7/content_main.xml">content_main.xml</a></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>content_main.xml 수정<ul>
<li>android:name=”com.study.sunshine.ForecastFragment”</li>
<li>android:id=”@+id/fragment_forecast”</li>
</ul>
</li>
<li>activity_detail.xml 수정<ul>
<li>android:id=”@+id/weather_detail_container”</li>
</ul>
</li>
<li>DetailActivity.java 수정<ul>
<li>.add(R.id.weather_detail_container, new DetailFragment())</li>
</ul>
</li>
</ul>
<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>    <span class="hljs-keyword">if</span> (findViewById(R.id.weather_detail_container) != <span class="hljs-keyword">null</span>) &#123;<br>        mTwoPane = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">if</span> (savedInstanceState == <span class="hljs-keyword">null</span>) &#123;<br>            getSupportFragmentManager().beginTransaction()<br>                    .replace(R.id.weather_detail_container, <span class="hljs-keyword">new</span> DetailFragment(), DETAILFRAGMENT_TAG)<br>                    .commit();<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        mTwoPane = <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    mLocation = Utility.getPreferredLocation(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">// 생략</span><br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onResume();<br>    String location = Utility.getPreferredLocation(<span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-keyword">if</span> (location != <span class="hljs-keyword">null</span> &amp;&amp; !location.equals(mLocation)) &#123;<br>        ForecastFragment forecastFragment = (ForecastFragment)<br>                        getSupportFragmentManager().findFragmentById(R.id.fragment_forecast);<br><br>        <span class="hljs-keyword">if</span> (forecastFragment != <span class="hljs-keyword">null</span>) &#123;<br>            Log.i(LOG_TAG, <span class="hljs-string">&quot;Location Change&quot;</span>);<br>            forecastFragment.onLocationChanged();<br>        &#125;<br>        mLocation = location;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>DetailFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Loader&lt;Cursor&gt; <span class="hljs-title">onCreateLoader</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, Bundle args)</span> </span>&#123;<br>    Log.v(LOG_TAG, <span class="hljs-string">&quot;In onCreateLoader&quot;</span>);<br>    Intent intent = getActivity().getIntent();<br>    <span class="hljs-keyword">if</span> (intent == <span class="hljs-keyword">null</span> || intent.getData() == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CursorLoader(<br>            getActivity(),<br>            intent.getData(),<br>            DETAIL_COLUMNS,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span>,<br>            <span class="hljs-keyword">null</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Nexus 10 으로 가상머신을 돌려보면 처음에 아무것도 안나와서 당황하지만 날씨 업데이트를 요청하면 정상적으로 보이는 모습을 볼 수 있습니다</p>
<p><img src="/img/adnroid-developing/7/24.png"></p>
<p><img src="/img/adnroid-developing/7/25.png"></p>
<p>List Item Click에 대한 액션 처리를 해야합니다<br>항목을 클릭하면 DetailActivity가 나오는데 이것은 Tablets에 맞지 않습니다</p>
<p>하나의 항목을 클릭하면 DetailFragment가 교체 되는 형식으로 해야합니다</p>
<p>ForecastFragment와 DetailFragment의 데이터를 주고 받는 행위는 MainActivity에서 이루어져야 합니다<br>단순히 두 Fragment간의 통신을 하게 하면 안됩니다</p>
<p>그렇게 하기 위해서는 ForecastFragment에 Notify callback을 만들 필요가 있습니다</p>
<hr>
<h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><ul>
<li>ForecastFragment에 Notify callback을 추가하세요 / Notify callback을 완성하세요</li>
<li>실행하는 환경에 따라서 DetailActivity or DetailFragment 선택을 하세요</li>
<li>DetailFragment에서 setArguments()를 사용해야합니다</li>
</ul>
<h3 id="정답"><a href="#정답" class="headerlink" title="정답"></a>정답</h3><p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callback</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemSelected</span><span class="hljs-params">(Uri dateUri)</span></span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">                         Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-comment">// 생략</span><br>    ((Callback) getActivity())<br>            .onItemSelected(WeatherContract.WeatherEntry.buildWeatherLocationWithDate(<br>                    locationSetting, cursor.getLong(COL_WEATHER_DATE)));<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ForecastFragment</span>.<span class="hljs-title">Callback</span> </span>&#123;<br>    <span class="hljs-comment">//생략</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 생략</span><br>            DetailFragment detailFragment = (DetailFragment)getSupportFragmentManager().findFragmentByTag(DETAILFRAGMENT_TAG);<br>            <span class="hljs-keyword">if</span>(detailFragment != <span class="hljs-keyword">null</span>) &#123;<br>                detailFragment.onLocationChanged(location);<br>            &#125;<br>        <span class="hljs-comment">// 생략</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemSelected</span><span class="hljs-params">(Uri contentUri)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (mTwoPane) &#123;<br>            Bundle args = <span class="hljs-keyword">new</span> Bundle();<br>            args.putParcelable(DetailFragment.DETAIL_URI, contentUri);<br><br>            DetailFragment fragment = <span class="hljs-keyword">new</span> DetailFragment();<br>            fragment.setArguments(args);<br><br>            getSupportFragmentManager().beginTransaction()<br>                    .replace(R.id.weather_detail_container, fragment, DETAILFRAGMENT_TAG)<br>                    .commit();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Intent intent = <span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, DetailActivity.class)<br>                    .setData(contentUri);<br>            startActivity(intent);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>DetailFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DETAIL_URI = <span class="hljs-string">&quot;URI&quot;</span>;<br><br><span class="hljs-keyword">private</span> Uri mUri;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">						 Bundle savedInstanceState)</span> </span>&#123;<br>    Bundle arguments = getArguments();<br>    <span class="hljs-keyword">if</span> (arguments != <span class="hljs-keyword">null</span>) &#123;<br>        mUri = arguments.getParcelable(DetailFragment.DETAIL_URI);<br>    &#125;<br>    <span class="hljs-comment">//생략</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onLocationChanged</span><span class="hljs-params">(String newLocation)</span> </span>&#123;<br>    Uri uri = mUri;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != uri) &#123;<br>        <span class="hljs-keyword">long</span> date = WeatherContract.WeatherEntry.getDateFromUri(uri);<br>        Uri updatedUri = WeatherContract.WeatherEntry.buildWeatherLocationWithDate(newLocation, date);<br>        mUri = updatedUri;<br>        getLoaderManager().restartLoader(DETAIL_LOADER, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Loader&lt;Cursor&gt; <span class="hljs-title">onCreateLoader</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, Bundle args)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (mUri != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CursorLoader(<br>                getActivity(),<br>                mUri,<br>                DETAIL_COLUMNS,<br>                <span class="hljs-keyword">null</span>,<br>                <span class="hljs-keyword">null</span>,<br>                <span class="hljs-keyword">null</span><br>        );<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>DetailActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_detail);<br>    <span class="hljs-keyword">if</span> (savedInstanceState == <span class="hljs-keyword">null</span>) &#123;<br>        Bundle arguments = <span class="hljs-keyword">new</span> Bundle();<br>        arguments.putParcelable(DetailFragment.DETAIL_URI, getIntent().getData());<br><br>        DetailFragment fragment = <span class="hljs-keyword">new</span> DetailFragment();<br>        fragment.setArguments(arguments);<br><br>        getSupportFragmentManager().beginTransaction()<br>                .add(R.id.weather_detail_container, fragment)<br>                .commit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>SettingsActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TargetApi(Build.VERSION_CODES.JELLY_BEAN)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Intent <span class="hljs-title">getParentActivityIntent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParentActivityIntent().addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>선택한 항목의 URI를 전달하는 문제에 대해서 어려움이 많을것이라 예상이 됩니다</p>
<p>우리가 사용할 수 있는건 Bundle이 있습니다<br>Bundle의 데이터는 Key-value 구조 입니다</p>
<p>Bundle과 Fragment의 arguments를 이용하면 쉽게 전달할 수 있습니다</p>
<hr>
<p>Tablets의 와이어 프레임에서 항목을 선택하면 활성화되는 부분은 활성화 표시가 되어있습니다</p>
<p>항목의 배경 상태를 drawable로 설정하여서 볼 수 있습니다<br>StateListDrawable는 View의 상태에 따라 drawable을 정할 수 있습니다</p>
<p>적용을 해봅시다</p>
<p><strong>drawable-v21/touch_selector.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_pressed</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ripple</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;@color/grey&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_activated</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/sunshine_light_blue&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@android:color/transparent&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>drawable/touch_selector.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_pressed</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/sunshine_light_blue&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_activated</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/sunshine_light_blue&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@android:color/transparent&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>values/styles.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ForecastListStyle&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>values-sw600dp/styles.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ForecastListStyle&quot;</span>&gt;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:choiceMode&quot;</span>&gt;</span>singleChoice<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>​```<br><br>**color.xml**<br><br>```xml<br><span class="hljs-tag">&lt;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;grey&quot;</span>&gt;</span>#cccccc<span class="hljs-tag">&lt;/<span class="hljs-name">color</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sunshine_light_blue&quot;</span>&gt;</span>#ff64c2f4<span class="hljs-tag">&lt;/<span class="hljs-name">color</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>list_item_forecast.xml, list_item_forecast_today.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">android:background=&quot;@drawable/touch_selector&quot;<br></code></pre></td></tr></table></figure>

<p><strong>fragment_main.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">style=&quot;@style/ForecastListStyle&quot;<br></code></pre></td></tr></table></figure>

<p>휴대폰에서 동작 시켰을 때는 보기 어렵지만 Tablets으로 진행한다면 바로 볼 수가 있습니다</p>
<p>생각해보니 우리앱에 큰 문제가 있습니다 마지막 항목을 클릭하고 화면을 회전하면 스크롤이 위로 올라가 있습니다<br>상당히 불편합니다 이것을 수정해 봅시다</p>
<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ListView mListView;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mPosition = ListView.INVALID_POSITION;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SELECTED_KEY = <span class="hljs-string">&quot;selected_position&quot;</span>;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">						 Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-comment">// 생략</span><br>    mListView = (ListView) rootView.findViewById(R.id.listview_forecast);<br>    mListView.setAdapter(mForecastAdapter);<br><br>    mListView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>        <span class="hljs-comment">//생략</span><br>    		mPosition = position;<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">if</span>(savedInstanceState != <span class="hljs-keyword">null</span> &amp;&amp; savedInstanceState.containsKey(SELECTED_KEY)) &#123;<br>        mPosition = savedInstanceState.getInt(SELECTED_KEY);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> rootView;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onSaveInstanceState</span><span class="hljs-params">(Bundle outState)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (mPosition != ListView.INVALID_POSITION) &#123;<br>        outState.putInt(SELECTED_KEY, mPosition);<br>    &#125;<br>    <span class="hljs-keyword">super</span>.onSaveInstanceState(outState);<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLoadFinished</span><span class="hljs-params">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;<br>    mForecastAdapter.swapCursor(data);<br><br>    <span class="hljs-keyword">if</span>(mPosition != ListView.INVALID_POSITION) &#123;<br>        mListView.smoothScrollToPosition(mPosition);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<hr>
<p>스크롤의 위치를 화면이 바뀌기 전 상태와 동일하게 동작을 합니다!</p>
<p>그래도 아직 UI 와이어프레임을 끝낸것은 아닙니다</p>
<p>Tablets상의 화면이랑 핸드폰 상태의 화면이랑 동일합니다<br>공간이 낭비되는거 같고 불필요 합니다</p>
<p>이것을 수정해 주도록 합시다</p>
<hr>
<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><img src="/img/adnroid-developing/7/26.png"></p>
<p>다음과 같은 화면을 구성하기 위해서는 fragment_detail.xml 파일을 어디서 수정해야 할까요?</p>
<ul>
<li>layout</li>
<li>layout-land</li>
<li>layout-sw600dp</li>
<li>layout-sw720dp</li>
</ul>
<h3 id="정답-1"><a href="#정답-1" class="headerlink" title="정답"></a>정답</h3><p><strong>layout, layout-land, layout-sw600dp</strong> 입니다</p>
<p>Wide하게 화면을 배치하기 위해서는 land, sw600dp 두곳에 파일을 복사해서 사용해야 합니다<br>하지만 다중 카피를 막기 위해서 layout aliasing을 사용합니다</p>
<p><a href="https://developer.android.com/training/multiscreen/screensizes.html#TaskUseAliasFilters">레이아웃 별칭 사용</a></p>
<hr>
<ul>
<li><a href="/downloads/code/7/fragment_detail_wide.xml">fragment_detail_wide.xml</a></li>
</ul>
<p>이 파일을 이용해서 화면을 표시해 봅시다</p>
<p><strong>values-land/refs.xml, values-sw600dp/refs.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fragment_detail&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;layout&quot;</span>&gt;</span>@layout/fragment_detail_wide<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>핸드폰에서 화면을 회전하거나 Tablets에서 표시되는 내용이 좀 더 보기 좋게 변하였습니다</p>
<p>우리는 이제 변화를 주고 싶습니다<br>폰에서는 Today가 보여주는 View를 좀 더 크게 바꾸고 싶습니다<br>Tablets에서는 모든 view가 동일하게 표현되도록 바꾸고 싶습니다<br>Tablets은 바로 옆에 Detail화면이 보이는 데 Today를 강조 할 필요가 없습니다</p>
<hr>
<h2 id="연습-1"><a href="#연습-1" class="headerlink" title="연습"></a>연습</h2><ul>
<li>ForecastFragment.getItemViewType()을 수정하세요</li>
<li>ForecastAdapter와 ForecastFragment를 요구 사항대로 수정하세요</li>
</ul>
<p><strong>ForecastAdapter.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> mUseTodayLayout = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUseTodayLayout</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> useTodayLayout)</span> </span>&#123;<br>    mUseTodayLayout = useTodayLayout;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getItemViewType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (position == <span class="hljs-number">0</span> &amp;&amp; mUseTodayLayout) ? VIEW_TYPE_TODAY : VIEW_TYPE_FUTURE_DAY;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="정답-2"><a href="#정답-2" class="headerlink" title="정답"></a>정답</h3><p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> mUseTodayLayout;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-function"><span class="hljs-params">						 Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-comment">// 생략</span><br>    mForecastAdapter.setUseTodayLayout(mUseTodayLayout);<br>    <span class="hljs-keyword">return</span> rootView;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUseTodayLayout</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> useTodayLayout)</span> </span>&#123;<br>    mUseTodayLayout = useTodayLayout;<br>    <span class="hljs-keyword">if</span> (mForecastAdapter != <span class="hljs-keyword">null</span>) &#123;<br>        mForecastAdapter.setUseTodayLayout(mUseTodayLayout);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>MainActivity.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-comment">// 생략</span><br>    ForecastFragment forecastFragment = ((ForecastFragment) getSupportFragmentManager()<br>            .findFragmentById(R.id.fragment_forecast));<br>    forecastFragment.setUseTodayLayout(!mTwoPane);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="Visual-Mocks"><a href="#Visual-Mocks" class="headerlink" title="Visual Mocks"></a>Visual Mocks</h2><p>와이어 프레임을 다 완성 시켰습니다</p>
<p>이제 스타일과 뷰를 수정해서 앱을 멋지게 꾸며봅시다!!</p>
<p>앱의 완성 단계를 보여주는 모형들이 있습니다</p>
<p>디자이너들과 작업을 하게 된다면 빨간선으로 크기, 폰트, 색, 간격등을 명시해 줍니다<br>빨간선은 모형과 동일한 아주 정확한 레이아웃을 만드는 데 도움을 줍니다</p>
<p><a href="https://material.io/guidelines/layout/metrics-keylines.html">Android Design Guide: Metrics and Grids</a><br>링크를 참조해서 우리 앱에서 필요한 부분에 맞게 조정하도록 합시다</p>
<hr>
<h2 id="ActionBar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h2><p>이제까지는 각자의 View에 style을 적용하는 방법을 설명했었습니다</p>
<p>Activity나 Application에서 모든 View에서 style을 적용하려면 Androidmanifest에서 <activity> or <application>에서 <strong>android:theme</strong>속성을 지정해야 합니다</p>
<p><a href="https://developer.android.com/training/appbar/index.html">App bar - developer</a><br><a href="https://material.io/guidelines/layout/structure.html#structure-app-bar">App bar - designer</a></p>
<p>MainActivity와 DetailActivity의 ActionBar을 봅시다<br>SettingsActivity은 별도 입니다</p>
<p><img src="/img/adnroid-developing/7/27.png"></p>
<p>이렇게 표시 하기 위해서는 2개의 theme가 필요합니다</p>
<ul>
<li>DetailActivity Theme : AppTheme</li>
<li>MainActivity Theme : ForecastTheme</li>
</ul>
<p><img src="/img/adnroid-developing/7/28.png"></p>
<p>화면의 컬러는 다음과 같이 지정되어있습니다</p>
<p><a href="https://www.materialpalette.com/">materialpalette</a><br><a href="https://material.uplabs.com/">Material Design, Daily – MaterialUp</a></p>
<p>위에 싸이트를 이용하면 색상을 선택하기 편합니다</p>
<p>AppTheme를 Custom 하려면 <strong>values - styles.xml</strong>로 이동합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimary&quot;</span>&gt;</span>@color/sunshine_blue<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/sunshine_dark_blue<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>colors.xml</strong> 컬러를 추가합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sunshine_blue&quot;</span>&gt;</span>#ff1ca8f4<span class="hljs-tag">&lt;/<span class="hljs-name">color</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">color</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sunshine_dark_blue&quot;</span>&gt;</span>#0288D1<span class="hljs-tag">&lt;/<span class="hljs-name">color</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>MainActivity에서 적용할 테마 ForecastTheme를 만듭니다</p>
<p><strong>style.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ForecastTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;AppTheme&quot;</span>&gt;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;actionBarStyle&quot;</span>&gt;</span>@style/ActionBar.Solid.Sunshine.NoTitle<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ActionBar.Solid.Sunshine.NoTitle&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;@style/Widget.AppCompat.Light.ActionBar.Solid.Inverse&quot;</span>&gt;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;displayOptions&quot;</span>&gt;</span>useLogo|showHome<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span>@drawable/ic_logo<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>Androidmanifest.xml에서 Theme를 변경합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;activity<br>    android:name=&quot;.MainActivity&quot;<br>    android:label=&quot;@string/app_name&quot;<br>    android:theme=&quot;@style/ForecastTheme&quot;&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">getSupportActionBar().setElevation(<span class="hljs-number">0f</span>);<br></code></pre></td></tr></table></figure>

<p>SettingsActivity 화면도 Theme를 설정합시다</p>
<p><strong>styles.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Settings activity theme. --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SettingsTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;AppTheme&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>values-v14/styles.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Settings activity theme. --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SettingsTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;@android:style/Theme.Holo.Light.DarkActionBar&quot;</span>&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:actionBarStyle&quot;</span>&gt;</span>@style/ActionBar.V14.Sunshine.NoTitle<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Settings activity action bar styles --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ActionBar.V14.Sunshine.NoTitle&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;@android:style/Widget.Holo.Light.ActionBar.Solid.Inverse&quot;</span>&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:background&quot;</span>&gt;</span>@color/sunshine_blue<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:height&quot;</span>&gt;</span>56dp<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>values-v21/styles.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SettingsTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;@android:style/Theme.Material.Light.DarkActionBar&quot;</span>&gt;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:colorPrimary&quot;</span>&gt;</span>@color/sunshine_blue<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:colorPrimaryDark&quot;</span>&gt;</span>@color/sunshine_dark_blue<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>Androidmanifest.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;activity<br>            android:name=&quot;.SettingsActivity&quot;<br>            android:label=&quot;@string/title_activity_settings&quot;<br>            android:parentActivityName=&quot;.MainActivity&quot;<br>            android:theme=&quot;@style/SettingsTheme&quot;&gt;<br></code></pre></td></tr></table></figure>

<p>이렇게 설정을 하면 SettingsActivity에도 ActionBar 설정이 끝났습니다</p>
]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>8. Services and Notifications</title>
    <url>/2017/02/21/adnroid-developing/Developing-Android-Apps-08/</url>
    <content><![CDATA[<h2 id="Application-in-the-Background"><a href="#Application-in-the-Background" class="headerlink" title="Application in the Background"></a>Application in the Background</h2><p>우리는 2강에서 배웠던 내용을 생각해 봅시다<br>Refresh 버튼을 메뉴를 선택하면 AsyncTask를 사용하여 데이터를 업데이트 하였습니다</p>
<p>이것은 좋지 않고 나중에 수정할 것이라고 말한적이 있습니다</p>
<p>AsyncTask는 Activity의 Lifecycle과 무관하기 때문입니다<br>Loader를 배울때의 문제점이 계속 반복되는 구조가 됩니다</p>
<p>Web 서비스에서 Data를 받을 때와 같은 장시간 Background 작업은 좋은 방법이 아닙니다</p>
<p>AsyncTask는 Application 프로세스가 살아 있는 동안 계속 실행 됩니다<br>단 우선순위가 낮기 때문에 Background로 이동을 하는 상황이나 리소스가 부족한 상황에서는 죽게 됩니다<br>이것은 큰 문제입니다!!</p>
<p>Application을 시작할때 날씨를 업데이트 하지만 날씨가 빠르게 변화하면 바람직하지 않은 움직임을 할 수도 있습니다</p>
<p>날씨를 업데이트 하는 올바른 방법을 배웁시다<br>배터리 소모를 최소화하고 Background에서 정기적으로 Data를 업데이트 합시다</p>
<p>4강에서 활동양이 미비한 Application은 종료시킨다는 사실을 배웠습니다</p>
<p>Foreground Application을 위한 활동이라는 사실도 배웠습니다<br>Application이 보이지 않는 곳에서도 해야할 활동이 있다면?</p>
<p>예를 들어서 사진 업로드 / 다운로드, 음악 재생 같은 것이 있다면 어떨까요?</p>
<p>이런동작을 하기 위해서 Application의 Component가 있습니다</p>
<p><strong>Activity, Content Provider, Broadcast Receiver, intent</strong> 같은 것들을 이미 다 배웠습니다</p>
<p>마지막 단계인 Services만 배우면 됩니다!</p>
<p><img src="/img/adnroid-developing/8/1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">startService(myService);<br>stopService(myService);<br></code></pre></td></tr></table></figure>

<p>이런식으로 서비스를 시작 / 정지 할 수 있습니다</p>
<p>Activity와 Services의 다른 점은 UI가 없고 Background Activity보다 우선순위도 높지 않습니다<br>실행중인 서비스를 가지고 있는 앱은 Foreground 활동을 위한 리소스 확보 때문에 종료될 가능성이 있습니다<br>하지만 기본 설정으로 시스템은 앱 내에서 중지된 서비스를 재시작 하려고 시도합니다</p>
<p><img src="/img/adnroid-developing/8/2.png"></p>
<p>Activity와는 다르게 서비스는 방해 없이 작업을 수행하도록 설계되어 있습니다</p>
<p>보통 실행하고 싶은 백그라운드 작업을 시작하려고 할 때만 <strong>onStartCommand</strong> handler를 override 합니다<br>그런데 이 경우에는 앱 상태 변화를 모니터링하고 백그라운드 앱에 전달할 handler가 없다는 것을 알아야 합니다</p>
<p>실행중인 Service가 프레임워크에 다음과 같이 통지하기 때문입니다</p>
<blockquote>
<p>“이 Application은 Background에 실행중인 Service를 가지지 않는 다른 Application보다 우선 순위가 높다”</p>
</blockquote>
<p>Services는 작업 수행도 가능합니다<br>음악을 재생하거나 네비게이션 길안내를 수행하는 작업들이 가능합니다<br>이 작업은 UI를 가지지 않기 때문에 중단시 사용자 경험을 방해하게 됩니다</p>
<p>이러한 경우 startForeground() 호출에 의해 “Service가 Foreground에서 실행되고 있다”고 통지할수 잇습니다</p>
<p><img src="/img/adnroid-developing/8/3.png"></p>
<p><img src="/img/adnroid-developing/8/4.png"></p>
<p>Activity와 Receiver와 같이 Service도 Main-Thread 입니다</p>
<p>그래서 Service내에서 시간이 오래 걸리는 작업을 실행시키는 경우에는 Background Thread로 처리 할 수 있습니다</p>
<p>IntentService Class를 이용 할 수 있습니다 Practice Patterns을 이용해서 사용됩니다</p>
<p>intent를 이용해서 들어오는 intent의 목록을 만들고 startService()가 호출될 때 넘어 들어옵니다<br>큐 형식으로 되어있습니다</p>
<p>Services는 강력한 툴 입니다<br>배우는 것도 중요하지만 현실적으로 프레임워크를 통해 자기만의 Services implementation을 실행하는 방법도 종종 있습니다<br>백그라운드 작업을 실행할 IntentService이든 SyncAdapter든 간에 계속 배워 나가봅시다</p>
<hr>
<p><strong>Android에서는 App Priority를 3단계로 구분합니다</strong></p>
<p>Low, High, Critical</p>
<ul>
<li>Critical : Active Activities Foreground Services</li>
<li>High : Visible Activities, Running Services</li>
<li>Low : Background Applications</li>
</ul>
<p><strong>Android 자원 관리의 3가지 법칙!!</strong></p>
<ol>
<li>Android는 유저가 사용하고 있는 중인 앱들을 부드럽게 사용가능하도록 유지시킵니다</li>
<li>1번을 어기지 않는 이상 Android는 보이거나 실행중인 앱들은 그대로 내비둡니다</li>
<li>1번 2번을 어기지 않는 이상 Android는 Background에 있는 모든 앱들을 유지시킵니다</li>
</ol>
<hr>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><a href="https://developer.android.com/guide/components/services.html?hl=ko">Services</a><br><a href="https://developer.android.com/reference/android/app/IntentService.html">IntentService</a></p>
<p>Service를 이용해서 Applications을 어떻게 적용할까요?</p>
<p>WeatherProvider 내에 Content Notifier가 Content Observer에게 통보해 줍니다<br>FetchWeatherTask는 이미 UI와 독립적으로 실행되고 있습니다</p>
<p>이제 IntentService를 활용할 수 있습니다!</p>
<p>service 패키지를 만들어 봅시다<br><strong>SunshineService</strong> class를 만들 때 <strong>IntentService</strong>를 상속받아서 해봅시다</p>
<p>기본적인 생성자와 handler를 override 합시다</p>
<p><strong>AndroidManifest.xml</strong> 에 Service를 추가합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.service.SunshineService&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<p>FetchWeatherTask.doInBackground() 내용을 SunshineService.onHandleIntent()로 이동합니다<br>나머지 부속 함수들도 이동합니다</p>
<p>마무리로 FetchWeatherTask class를 삭제합니다</p>
<p><a href="/downloads/code/8/SunshineService.java">SunshineService.java</a></p>
<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    Intent intent = <span class="hljs-keyword">new</span> Intent(getActivity(), SunshineService.class);<br>    intent.putExtra(SunshineService.LOCATION_QUERY_EXTRA,<br>                Utility.getPreferredLocation(getActivity()));<br>    getActivity().startService(intent);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>이제 우리 Application에는 간단한 Service가 포함되어있습니다<br>하지만 이것은 스스로 작동하지는 않습니다</p>
<p>Alarm Manager를 통해서 작업을 진행해 봅시다<br>Alarm Manager는 일정 시간이 지난뒤 시작하려는 Application 구성 요소 시스템에 말하고 Background에서 몇가지 작업을 처리 할 수 있습니다</p>
<p>우리는 Background에서 어떤 작업을 시키면 될까요? 이것을 하기위해서 어떤것이 필요할까요?</p>
<hr>
<h2 id="Broadcast-Receiver"><a href="#Broadcast-Receiver" class="headerlink" title="Broadcast Receiver"></a>Broadcast Receiver</h2><p>Broadcast Receiver는 아주 특별한 역할을 합니다</p>
<p>다른 Applications에서 Intent Broadcast를 수신하는데 사용합니다<br>일반적으로 Broadcast Receiver는 Intent Filter에 등록합니다<br>또한 Application에서 알람을 listen것도 하나의 방법입니다</p>
<p>우리는 <a href="https://developer.android.com/reference/android/app/PendingIntent.html">PendingIntent</a>를 사용합니다</p>
<p>PendingIntent는 하나의 Application에서 또 다른 Application으로 전달하는 역할을 수행합니다<br>기존의 Intent와 다르게 permission, ID를 보내서 지정한 작업을 수행 할 권한을 부여받는 역할을 합니다</p>
<p>Android 내부에 보안 모델에 무단 액세스하지 않고 특정 비동기 방법으로 Application의 CallBack 프로세스에 허용합니다</p>
<p><strong>SunshineService</strong> Class 안에 추가 합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlarmReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BroadcastReceiver</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>AndroidManifest</strong> 에도 Receiver를 등록합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;receiver<br>    android:name=&quot;.service.SunshineService$AlarmReceiver&quot;<br>    android:enabled=&quot;true&quot;/&gt;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><ul>
<li>AlarmReceiver.onReceive()를 완성하세요</li>
<li>updateWeather()를 수정하세요</li>
</ul>
<h3 id="정답"><a href="#정답" class="headerlink" title="정답"></a>정답</h3><p><strong>SunshineService.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlarmReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BroadcastReceiver</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;<br>        Intent sendIntent = <span class="hljs-keyword">new</span> Intent(context, SunshineService.class);<br>        sendIntent.putExtra(SunshineService.LOCATION_QUERY_EXTRA,<br>                            intent.getStringExtra(SunshineService.LOCATION_QUERY_EXTRA));<br>        context.startService(sendIntent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    Intent alarmIntent = <span class="hljs-keyword">new</span> Intent(getActivity(), SunshineService.AlarmReceiver.class);<br>    alarmIntent.putExtra(SunshineService.LOCATION_QUERY_EXTRA,<br>            Utility.getPreferredLocation(getActivity()));<br><br>    PendingIntent pendingIntent = PendingIntent.getBroadcast(<br>            getActivity(),<br>            <span class="hljs-number">0</span>,<br>            alarmIntent,<br>            PendingIntent.FLAG_ONE_SHOT<br>    );<br><br>    AlarmManager alarmManager = (AlarmManager) getActivity().getSystemService(Context.ALARM_SERVICE);<br><br>    alarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + <span class="hljs-number">3000</span>, pendingIntent);<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>이제 앱을 실행하면 5초후에 화면이 업데이트 되는걸 볼 수 있습니다<br>우리는 이것을 이용해서 Background에서 Update와 Service를 이용해서 폰의 기능을 더 유용하게 사용할 수 있습니다</p>
<p>우리 Android 휴대폰 내부에는 Cell Radio가 있습니다</p>
<p><img src="/img/adnroid-developing/8/5.png"></p>
<p><img src="/img/adnroid-developing/8/6.png"></p>
<p><img src="/img/adnroid-developing/8/7.png"></p>
<p><img src="/img/adnroid-developing/8/8.png"></p>
<hr>
<p>고객이나 서비스 사이트의 변화를 무시할 수 없습니다</p>
<ul>
<li>최소량의 상태 전송만 한다</li>
<li>Prefetch, Batch를 이용한다</li>
<li>긴급하지 않은 전송은 대기</li>
<li>사용자나 서버가 시작한 긴급전송과 묶어서 전송</li>
</ul>
<p>이것을 통해서 Cell Radio 변화의 빈도를 낮출 수 있습니다</p>
<p>크기에 상관 없이 데이터를 옮길 때마다 Radio는 30초까지 켜져 있을 수 있다는 사실을 알아야 합니다<br>어느정도 균형을 맞춰서 작업이 되어야합니다</p>
<p>현재 섹션에서 사용자가 필요료 할만한 모든 데이터를 한 번 연결된 상태에서 한꺼번에 최대한 다운 받아야 합니다</p>
<p>하지만, 사용하지 않을 데이터를 다운 받느라 배터리와 주파수를 낭비하면 안됩니다</p>
<p><a href="https://developer.android.com/training/efficient-downloads/index.html">Transferring Data Without Draining the Battery</a><br><a href="https://www.youtube.com/watch?v=cSIB2pDvH3E&list=PLWz5rJ2EKKc-VJS9WQlj9xM_ygPopZ-Qd">Efficient Data Transfers</a></p>
<hr>
<h2 id="SyncAdapter"><a href="#SyncAdapter" class="headerlink" title="SyncAdapter"></a>SyncAdapter</h2><p>Background에서 Transaction을 쉽게 만드는 방법은 여러가지가 있습니다<br>Android는 여러가지 Practice들을 제공하는 SyncManager 프레임워크를 가지고 있습니다</p>
<p>SyncAdapter를 이용해서 그 프레임워크를 사용할 수 있습니다!!!</p>
<p>Application이 구글 Application이 이용하는 효과적은 싱크 기능을 이용할 수 있도록 만들어줍니다</p>
<p>Data Transfer을 한자리에 보관할 수 있는 중심적인 장소입니다<br>Android에 의해 효율적으로 관리 됩니다</p>
<p>Android SyncManager는 SyncAdapter를 이용해서 Sync 요청을 처리합니다<br>SyncManager는 이러한 요청을 배열하고 시간을 조정함으로서 Application에서 다른 Application으로 Data가 이동하게 하거나 System이 Radio를 switch 하는 빈도를 줄여 줍니다</p>
<p>메모리가 부족하다면 동시에 Sync 하는 수를 적게 합니다<br>SyncManager는 Network가 불안정할 때 Data Transfer나 Download 재시작 전에 Network 연결 상태를 점검합니다</p>
<p>Synchronization 프레임워크는 Content Provider와 Two-way Synchronization을 해주고 Android 계정 관리자가 그 계정에 알맞는 Synchronization 서비스를 제공하도록 합니다</p>
<p>우리 앱은 그런 것들을 하는건 아닙니다<br>이러 기능들의 복잡함을 다루기는 할 것입니다</p>
<p>SyncAdapter를 만드는것은 처음에는 어려울 수도 있습니다</p>
<hr>
<p>한번 SyncAdapter를 구현해 봅시다</p>
<script src="//gist.github.com/6fc5b24e3296fbcb1da4e7b4cd6baa90.js"></script>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;service<br>    android:name=&quot;.sync.SunshineAuthenticatorService&quot;&gt;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.accounts.AccountAuthenticator&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><br>    &lt;meta-data<br>        android:name=&quot;android.accounts.AccountAuthenticator&quot;<br>        android:resource=&quot;@xml/authenticator&quot;/&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;provider<br>    android:name=&quot;.data.WeatherProvider&quot;<br>    android:authorities=&quot;@string/content_authority&quot;<br>    android:exported=&quot;false&quot;<br>    android:syncable=&quot;true&quot;/&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;uses-permission<br>    android:name=&quot;android.permission.READ_SYNC_SETTINGS&quot;/&gt;<br>&lt;uses-permission<br>    android:name=&quot;android.permission.WRITE_SYNC_SETTINGS&quot;/&gt;<br>&lt;uses-permission<br>    android:name=&quot;android.permission.AUTHENTICATE_ACCOUNTS&quot;/&gt;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">&lt;service<br>    android:name=&quot;.sync.SunshineSyncService&quot;<br>    android:exported=&quot;true&quot;&gt;<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.content.SyncAdapter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><br>    &lt;meta-data<br>        android:name=&quot;android.content.SyncAdapter&quot;<br>        android:resource=&quot;@xml/syncadapter&quot;/&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    SunshineSyncAdapter.syncImmediately(getActivity());<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="한번-해보기"><a href="#한번-해보기" class="headerlink" title="한번 해보기"></a>한번 해보기</h2><p>SyncAdapter를 이용해서 날씨 데이터를 가져오고 DB안에 저장하도록 하세요<br>ForecastFragment.updateWeather()를 수정해서 SyncAdapter와 동기화를 시작하도록 하세요<br><strong>SunshineService.onHandleIntent()에 있는 코드를 SyncAdapter로 이동하면 됩니다</strong></p>
<p><a href="https://developer.android.com/training/sync-adapters/running-sync-adapter.html">Running a Sync Adapter</a></p>
<h3 id="정답-1"><a href="#정답-1" class="headerlink" title="정답"></a>정답</h3><p><a href="/downloads/code/8/SunshineSyncAdapter.java">SunshineSyncAdapter.java</a></p>
<hr>
<p>스케쥴을 동기화 합시다</p>
<ol>
<li><p><strong>FetchWeatherTask</strong>, <strong>SunshineService</strong> class를 삭제하고 <strong>AndroidManifest</strong>에 등록한 service와 receiver도 삭제합니다</p>
</li>
<li><p>SunshineSyncAdapter에 method를 추가 합니다</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Helper method to schedule the sync adapter periodic execution</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configurePeriodicSync</span><span class="hljs-params">(Context context, <span class="hljs-keyword">int</span> syncInterval, <span class="hljs-keyword">int</span> flexTime)</span> </span>&#123;<br>       Account account = getSyncAccount(context);<br>       String authority = context.getString(R.string.content_authority);<br>       <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;<br>           <span class="hljs-comment">// we can enable inexact timers in our periodic sync</span><br>           SyncRequest request = <span class="hljs-keyword">new</span> SyncRequest.Builder().<br>                   syncPeriodic(syncInterval, flexTime).<br>                   setSyncAdapter(account, authority).<br>                   setExtras(<span class="hljs-keyword">new</span> Bundle()).build();<br>           ContentResolver.requestSync(request);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           ContentResolver.addPeriodicSync(account,<br>                   authority, <span class="hljs-keyword">new</span> Bundle(), syncInterval);<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAccountCreated</span><span class="hljs-params">(Account newAccount, Context context)</span> </span>&#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Since we&#x27;ve created an account</span><br><span class="hljs-comment">        */</span><br>       SunshineSyncAdapter.configurePeriodicSync(context, SYNC_INTERVAL, SYNC_FLEXTIME);<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Without calling setSyncAutomatically, our periodic sync will not be enabled.</span><br><span class="hljs-comment">        */</span><br>       ContentResolver.setSyncAutomatically(newAccount, context.getString(R.string.content_authority), <span class="hljs-keyword">true</span>);<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Finally, let&#x27;s do a sync to get things started</span><br><span class="hljs-comment">        */</span><br>       syncImmediately(context);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initializeSyncAdapter</span><span class="hljs-params">(Context context)</span> </span>&#123;<br>       getSyncAccount(context);<br>   &#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>getSyncAccount()에 코드를 추가합니다</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == accountManager.getPassword(newAccount)) &#123;<br><br>    <span class="hljs-keyword">if</span> (!accountManager.addAccountExplicitly(newAccount, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">null</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    onAccountCreated(newAccount, context); <span class="hljs-comment">// 이게 추가된 사항</span><br>&#125;<br><span class="hljs-keyword">return</span> newAccount;<br></code></pre></td></tr></table></figure></li>
<li><p>시간에 대한 설정을 추가 합니다</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Interval at which to sync with the weather, in seconds.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SYNC_INTERVAL = <span class="hljs-number">60</span> * <span class="hljs-number">180</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SYNC_FLEXTIME = SYNC_INTERVAL / <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure>

<p><strong>MainActivity</strong> 마지막에 코드를 추가합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SunshineSyncAdapter.initializeSyncAdapter(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure>

<h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><ol>
<li>MainActivity가 생성될때 SyncAdapter를 초기화합니다</li>
<li>초기화 중에, getSyncAccount() 가 호출됩니다</li>
<li>getSyncAccount()는 계정이 없으면 onAccountCreated()를 이용해서 만든다</li>
<li>onAccountCreated()는 동기화 스케쥴링을 구성하고, 즉시 동기화를 한다</li>
</ol>
<hr>
<h2 id="FCM-Firebase-Cloud-Messaging"><a href="#FCM-Firebase-Cloud-Messaging" class="headerlink" title="FCM (Firebase Cloud Messaging)"></a>FCM (Firebase Cloud Messaging)</h2><p>SyncAdapter를 이용해서는 우리는 반복적인 작업에 대해서 구현했습니다</p>
<p>부정확한 반복 알람은 정확한 반복 알람보다는 훨씬 낫겠지만 여전히 완벽과는 거리가 멉니다<br>반복 알람들의 공통적인 문제는 여전히 업데이트를 확인하기 위해 서버를 폴링한다는 것입니다</p>
<p>자주 폴링하면 할수록 더 최신 데이터를 출력할 수 있지만 배터리 소모량이 많아집니다<br>배터리를 오래 쓰기 위해서 폴링 주기를 길게 늘리면 갱신되지 않은 데이터가 오랫동안 남아 있습니다<br>사용자로 하여금 스스로 업데이트 빈도를 결정하게 할 수도 있지만 앱이 다 알아서 해 준다는 느낌이 덜합니다</p>
<p>더 좋은 방법이 없을까요? 그런것이 가능은 할까요?</p>
<p>FCM은 다운로드될 준비가 된 데이터가 생기면 서버에서 앱에 알리도록 합니다<br>혹은 메세지 playload 안에 데이터를 포함시켜서 보내는 방법도 있습니다</p>
<p>FCM은 Firebase를 통해 서버에서 앱의 어느 인스턴스에라도 메세지를 보낼 수 있습니다</p>
<p>이런구조를 사용하면 폴링을 사용 안해도 됩니다</p>
<p>배터리 생명도 개선이 되고 앱의 최신성도 향상시켜 줍니다</p>
<p>그리고 동기화할 데이터가 있을 때 클라이언트에 알리는 일을 서버에게 맡길 수 있습니다</p>
<p>이러한 알림은 새로운 데이터가 있거나 다운로드가 필요하다고 앱에 알려주고 SyncAdapter를 발동시키는 단순한 메세지일 수도 있고 메세지 안에 새로운 데이터를 포함시켜 보내는 방법도 있습니다</p>
<p>우리 Application에서는 외부 서버를 이용하게 됩니다<br>그렇다고 해도 변경점을 발견하게 되면 소스를 끌어오고 설치된 앱 인스턴스에 알리는 중간 단계를 만드는 것이 좋습니다</p>
<p><a href="https://firebase.google.com/docs/cloud-messaging/">FCM</a></p>
<hr>
<h2 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h2><p>Notification을 만들어 봅시다</p>
<p><strong>string.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Notification Format --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format_notification&quot;</span>&gt;</span><br>Forecast: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;condition&quot;</span>&gt;</span>%1$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span> High: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;high&quot;</span>&gt;</span>%2$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span> Low: <span class="hljs-tag">&lt;<span class="hljs-name">xliff:g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;low&quot;</span>&gt;</span>%3$s<span class="hljs-tag">&lt;/<span class="hljs-name">xliff:g</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Strings related to Notification preference --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pref_last_notification&quot;</span>&gt;</span>last_notification<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>SunshineSyncAdapter에 Projection을 추가합니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] NOTIFY_WEATHER_PROJECTION = <span class="hljs-keyword">new</span> String[] &#123;<br>        WeatherContract.WeatherEntry.COLUMN_WEATHER_ID,<br>        WeatherContract.WeatherEntry.COLUMN_MAX_TEMP,<br>        WeatherContract.WeatherEntry.COLUMN_MIN_TEMP,<br>        WeatherContract.WeatherEntry.COLUMN_SHORT_DESC<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INDEX_WEATHER_ID = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INDEX_MAX_TEMP = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INDEX_MIN_TEMP = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INDEX_SHORT_DESC = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure>

<p>Constants 추가</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> DAY_IN_MILLIS = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> WEATHER_NOTIFICATION_ID = <span class="hljs-number">3004</span>;<br></code></pre></td></tr></table></figure>

<p><strong>Utility.formatTemperature()</strong> 수정</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">formatTemperature</span><span class="hljs-params">(Context context, <span class="hljs-keyword">double</span> temperature)</span> </span>&#123;<br>    String suffix = <span class="hljs-string">&quot;\u00B0&quot;</span>;<br>    <span class="hljs-keyword">if</span> (!isMetric(context)) &#123;<br>        temperature = (temperature * <span class="hljs-number">1.8</span>) + <span class="hljs-number">32</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> String.format(context.getString(R.string.format_temperature), temperature);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>**SunshineSyncAdapter.getWeatherDataFromJson()**에서 bulkInsert 진행 후에</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">notifyWeather();<br></code></pre></td></tr></table></figure>

<p><strong>SunshineSyncAdapter</strong>에 메서드 추가</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyWeather</span><span class="hljs-params">()</span> </span>&#123;<br>    Context context = getContext();<br>    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);<br>    String lastNotificationKey = context.getString(R.string.pref_last_notification);<br>    <span class="hljs-keyword">long</span> lastSync = prefs.getLong(lastNotificationKey, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (System.currentTimeMillis() - lastSync &gt;= DAY_IN_MILLIS) &#123;<br>        String locationQuery = Utility.getPreferredLocation(context);<br><br>        Uri weatherUri = WeatherContract.WeatherEntry.buildWeatherLocationWithDate(locationQuery, System.currentTimeMillis());<br><br>        Cursor cursor = context.getContentResolver().query(weatherUri, NOTIFY_WEATHER_PROJECTION, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">if</span> (cursor.moveToFirst()) &#123;<br>            <span class="hljs-keyword">int</span> weatherId = cursor.getInt(INDEX_WEATHER_ID);<br>            <span class="hljs-keyword">double</span> high = cursor.getDouble(INDEX_MAX_TEMP);<br>            <span class="hljs-keyword">double</span> low = cursor.getDouble(INDEX_MIN_TEMP);<br>            String desc = cursor.getString(INDEX_SHORT_DESC);<br><br>            <span class="hljs-keyword">int</span> iconId = Utility.getIconResourceForWeatherCondition(weatherId);<br>            String title = context.getString(R.string.app_name);<br><br>            String contentText = String.format(context.getString(R.string.format_notification),<br>                    desc,<br>                    Utility.formatTemperature(context, high),<br>                    Utility.formatTemperature(context, low));<br><br>            <span class="hljs-comment">// TODO : Work</span><br>            SharedPreferences.Editor editor = prefs.edit();<br>            editor.putLong(lastNotificationKey, System.currentTimeMillis());<br>            editor.commit();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html">알림</a><br><a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html">NotificationCompat.Builder</a><br><a href="https://developer.android.com/reference/android/app/NotificationManager.html">NotificationManager</a><br><a href="https://developer.android.com/reference/android/app/PendingIntent.html">PendingIntent</a><br><a href="https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html">TaskStackBuilder</a></p>
<hr>
<h2 id="연습-1"><a href="#연습-1" class="headerlink" title="연습"></a>연습</h2><ol>
<li>NotificationCompat.Builder를 이용해서 Notification을 만듭니다</li>
<li>Notification이 선택되면 화면이 열리도록 explicit intent를 만들어 봅시다</li>
<li>TaskStackBuilder를 이용해서 backstack을 만듭시다</li>
<li>NotificationManager를 이용해서 Notification을 보여줍니다</li>
</ol>
<h3 id="정답-2"><a href="#정답-2" class="headerlink" title="정답"></a>정답</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">NotificationCompat.Builder mBuilder =<br>        <span class="hljs-keyword">new</span> NotificationCompat.Builder(getContext())<br>                .setSmallIcon(iconId)<br>                .setContentTitle(title)<br>                .setContentText(contentText);<br><br>Intent resultIntent = <span class="hljs-keyword">new</span> Intent(context, MainActivity.class);<br>TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);<br>stackBuilder.addNextIntent(resultIntent);<br>PendingIntent resultPendingIntent =<br>        stackBuilder.getPendingIntent(<br>                <span class="hljs-number">0</span>,<br>                PendingIntent.FLAG_UPDATE_CURRENT<br>        );<br>mBuilder.setContentIntent(resultPendingIntent);<br><br>NotificationManager mNotificationManager =<br>        (NotificationManager) getContext().getSystemService(Context.NOTIFICATION_SERVICE);<br><br>mNotificationManager.notify(WEATHER_NOTIFICATION_ID, mBuilder.build());<br></code></pre></td></tr></table></figure>

<hr>
<p>Background에서 App을 업데이트 했지만 Application 실행시키지 않으면 변화된 내용을 알 수 있는가?</p>
<p>알림은 Background 업데이트를 사용자에게 알려 주는 편리한 방식으로 시작했지만 가벼운 정도의 방식으로 App과 직접 상호작용하는 강력한 표준 지름길이 되었습니다</p>
<p>단순 한줄 알림에서 많은 정보를 포함할수 있도록 바뀌었고, 알림 내에 잇는 데이터에서 수행되는 작동을 포함 가능하게 합니다</p>
<p>잘 이용한다면 Android Wear에서 쉽게 Notification을 구성 할 수 있습니다</p>
<p>그러나 알림의 유용성과 스팸은 한끗 차이라는것을 명심하세요</p>
<hr>
<h2 id="연습-2"><a href="#연습-2" class="headerlink" title="연습"></a>연습</h2><p>Application을 좀 더 좋게 만들기 위한 작업입니다</p>
<p>preference를 이용해서 Notification을 On / Off 하도록 만들어 보세요!</p>
<h3 id="정답-3"><a href="#정답-3" class="headerlink" title="정답"></a>정답</h3><script src="//gist.github.com/5c52b2defb2d40b594aaa3a637140da1.js"></script>

<hr>
<p>사실 알고계신분도 있을 수 있지만 우리 Application의 Database가 무한정 증가 하고 있습니다</p>
<p>이것은 언젠가 용량부족을 겪게 됩니다<br>그러면 사용자들은 우리 Application을 당연히 삭제합니다… 이렇게 하면 안됩니다</p>
<p>이 문제를 해결해 봅시다<br>단순하게 생각하면 오늘 날짜 이전 데이터는 삭제를 하면 됩니다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">getContext().getContentResolver().delete(WeatherEntry.CONTENT_URI,<br>        WeatherEntry.COLUMN_DATE + <span class="hljs-string">&quot; &lt;= ?&quot;</span>,<br>        <span class="hljs-keyword">new</span> String[]&#123;Long.toString(dayTime.setJulianDay(julianStartDay - <span class="hljs-number">1</span>))&#125;);<br></code></pre></td></tr></table></figure>

<p>이런식으로 코드를 추가하면 불필요 데이터는 삭제가 되기 때문에 문제가 해결이 됩니다</p>
<p>우리 Application에 아직도 불편한 부분이 있습니다<br>지도를 보여줄때 GPS좌표값이 아니라 단순 위치 쿼리를 이용한다는 점입니다</p>
<p>이것을 수정하여서 GPS 좌표값으로 넘겨주도록 합시다<br>또한, 더이상 필요없는 Refresh 버튼도 제거합시다!</p>
<p>일단 MainActivity에 있는 <strong>openPreferredLocationInMap()**을 **ForecastFragment</strong>로 이동합니다</p>
<p><strong>onOptionsItemSelected()**에서 action_map을 삭제합니다<br>**menu_main.xml</strong>에서 action_map 부분을 삭제합니다</p>
<p><strong>forecast_fragment_menu.xml</strong> 을 수정합니다</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br>    &lt;item<br>        android:id=&quot;@+id/action_map&quot;<br>        android:title=&quot;@string/action_map&quot;<br>        app:showAsAction=&quot;never&quot;/&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>ForecastFragment.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = item.getItemId();<br>    <span class="hljs-keyword">if</span>(id == R.id.action_map) &#123;<br>        openPreferredLocationInMap();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.onOptionsItemSelected(item);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openPreferredLocationInMap</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">null</span> != mForecastAdapter ) &#123;<br>        Cursor c = mForecastAdapter.getCursor();<br><br>        <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">null</span> != c ) &#123;<br>            c.moveToPosition(<span class="hljs-number">0</span>);<br><br>            String posLat = c.getString(COL_COORD_LAT);<br>            String posLong = c.getString(COL_COORD_LONG);<br>            Uri geoLocation = Uri.parse(<span class="hljs-string">&quot;geo:&quot;</span> + posLat + <span class="hljs-string">&quot;,&quot;</span> + posLong);<br><br>            Intent intent = <span class="hljs-keyword">new</span> Intent(Intent.ACTION_VIEW);<br>            intent.setData(geoLocation);<br><br>            <span class="hljs-keyword">if</span> (intent.resolveActivity(getActivity().getPackageManager()) != <span class="hljs-keyword">null</span>) &#123;<br>                startActivity(intent);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Log.d(LOG_TAG, <span class="hljs-string">&quot;Couldn&#x27;t call&quot;</span> + geoLocation.toString() + <span class="hljs-string">&quot;, no receiving apps installed!&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="복습은-필수"><a href="#복습은-필수" class="headerlink" title="복습은 필수"></a>복습은 필수</h2><ul>
<li>Service</li>
<li>BroadcastReceiver</li>
<li>SyncAdapter</li>
<li>Notification</li>
<li><a href="https://developer.android.com/studio/intro/index.html">AndroidStudio</a></li>
</ul>
<hr>
<h1 id="끝"><a href="#끝" class="headerlink" title="끝"></a>끝</h1>]]></content>
      <categories>
        <category>android</category>
        <category>Developing Android Apps</category>
      </categories>
      <tags>
        <tag>udacity</tag>
        <tag>android</tag>
      </tags>
  </entry>
</search>
